
app/out/app.elf:     file format elf32-littlearm
app/out/app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000b69

Program Header:
0x70000001 off    0x00015e88 vaddr 0x1a005e88 paddr 0x1a005e88 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00003d90 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00005e90 memsz 0x00005e90 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a005e90 align 2**16
         filesz 0x00000304 memsz 0x00000304 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e84  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000304  10000000  1a005e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020304  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020304  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020304  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020304  2**2
                  CONTENTS
  6 .bss          00003a88  10000308  10000308  00000308  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020304  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020304  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020304  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020304  2**2
                  CONTENTS
 11 .init_array   00000004  1a005e84  1a005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a005e88  1a005e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020304  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020304  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020304  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020304  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020304  2**2
                  CONTENTS
 18 .noinit       00000000  10003d90  10003d90  00020304  2**2
                  CONTENTS
 19 .debug_info   0002c5c4  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000058e0  00000000  00000000  0004c8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000b000  00000000  00000000  000521a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000fc8  00000000  00000000  0005d1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001100  00000000  00000000  0005e170  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00010161  00000000  00000000  0005f270  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001372d  00000000  00000000  0006f3d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002f6f1  00000000  00000000  00082afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000b21ef  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000b226e  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00003028  00000000  00000000  000b22a8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000308 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a005e84 l    d  .init_array	00000000 .init_array
1a005e88 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10003d90 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a003af0 l     F .text	000000a4 uartProcessIRQ
10003b00 l     O .bss	00000004 rxIsrCallbackUART0
10003b04 l     O .bss	00000004 rxIsrCallbackUART2
10003b08 l     O .bss	00000004 rxIsrCallbackUART3
10003b0c l     O .bss	00000004 txIsrCallbackUART0
10003b10 l     O .bss	00000004 txIsrCallbackUART2
10003b14 l     O .bss	00000004 txIsrCallbackUART3
1a005b50 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 driver.c
00000000 l    df *ABS*	00000000 service.c
00000000 l    df *ABS*	00000000 operations.c
00000000 l    df *ABS*	00000000 kernek.c
00000000 l    df *ABS*	00000000 system.c
1000031c l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_2.c
1a000cbc l     F .text	0000002c prvHeapInit
10000320 l     O .bss	00002800 ucHeap
10002b20 l     O .bss	00000008 xEnd
10002b28 l     O .bss	00000004 xHeapHasBeenInitialised.11449
10002b2c l     O .bss	00000008 xStart
100000a8 l     O .data	00000004 xFreeBytesRemaining
00000000 l    df *ABS*	00000000 queue.c
1a000dec l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a000dfe l     F .text	0000001e prvIsQueueFull
1a000e1c l     F .text	0000001a prvIsQueueEmpty
1a000e36 l     F .text	00000076 prvCopyDataToQueue
1a000eac l     F .text	00000024 prvCopyDataFromQueue
1a000ed0 l     F .text	0000006e prvUnlockQueue
1a000fc4 l     F .text	00000022 prvInitialiseNewQueue
1a001240 l     F .text	00000018 prvInitialiseMutex
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002b34 l     O .bss	00000168 uxIdleTaskStack.10728
10002c9c l     O .bss	00000b40 uxTimerTaskStack.10735
100037dc l     O .bss	00000060 xIdleTaskTCB.10727
1000383c l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001770 l     F .text	00000014 prvTaskCheckFreeStackSpace
1a001784 l     F .text	0000002c prvResetNextTaskUnblockTime
1a0017b0 l     F .text	00000092 prvInitialiseNewTask
1a001844 l     F .text	00000068 prvInitialiseTaskLists
1a0018ac l     F .text	000000ac prvAddNewTaskToReadyList
1a001958 l     F .text	00000038 prvDeleteTCB
1a001990 l     F .text	0000004c prvCheckTasksWaitingTermination
1a0019dc l     F .text	00000028 prvIdleTask
1a001a04 l     F .text	00000098 prvAddCurrentTaskToDelayedList
100038a0 l     O .bss	00000004 pxDelayedTaskList
100038a4 l     O .bss	00000004 pxOverflowDelayedTaskList
100038a8 l     O .bss	0000008c pxReadyTasksLists
10003934 l     O .bss	00000004 uxCurrentNumberOfTasks
10003938 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
1000393c l     O .bss	00000004 uxPendedTicks
10003940 l     O .bss	00000004 uxSchedulerSuspended
10003944 l     O .bss	00000004 uxTaskNumber
10003948 l     O .bss	00000004 uxTopReadyPriority
1000394c l     O .bss	00000014 xDelayedTaskList1
10003960 l     O .bss	00000014 xDelayedTaskList2
10003974 l     O .bss	00000004 xNextTaskUnblockTime
10003978 l     O .bss	00000004 xNumOfOverflows
1000397c l     O .bss	00000014 xPendingReadyList
10003990 l     O .bss	00000004 xSchedulerRunning
10003994 l     O .bss	00000014 xSuspendedTaskList
100039a8 l     O .bss	00000014 xTasksWaitingTermination
100039bc l     O .bss	00000004 xTickCount
100039c0 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a002524 l     F .text	00000020 prvGetNextExpireTime
1a002544 l     F .text	00000048 prvInsertTimerInActiveList
1a00258c l     F .text	00000070 prvCheckForValidListAndQueue
1a0025fc l     F .text	00000040 prvInitialiseNewTimer
1a0029cc l     F .text	00000016 prvTimerTask
1a002758 l     F .text	00000078 prvSwitchTimerLists
1a0027d0 l     F .text	0000002c prvSampleTimeNow
1a0027fc l     F .text	00000060 prvProcessExpiredTimer
1a00285c l     F .text	00000074 prvProcessTimerOrBlockTask
1a0028d0 l     F .text	000000fc prvProcessReceivedCommands
100039c4 l     O .bss	00000004 pxCurrentTimerList
100039c8 l     O .bss	00000004 pxOverflowTimerList
100039cc l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10003a6c l     O .bss	00000014 xActiveTimerList1
10003a80 l     O .bss	00000014 xActiveTimerList2
10003a94 l     O .bss	00000004 xLastTime.11777
10003a98 l     O .bss	00000050 xStaticTimerQueue.11827
10003ae8 l     O .bss	00000004 xTimerQueue
10003aec l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a0029e4 l     F .text	00000040 prvTaskExitError
1a002a24 l     F .text	00000022 prvPortStartFirstTask
1a002a4c l     F .text	0000000e vPortEnableVFP
1a002ab0 l       .text	00000000 pxCurrentTCBConst2
1a002b90 l       .text	00000000 pxCurrentTCBConst
10003af0 l     O .bss	00000001 ucMaxSysCallPriority
10003af4 l     O .bss	00000004 ulMaxPRIGROUPValue
100000ac l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 board.c
1a002d64 l     F .text	00000044 Board_LED_Init
1a002da8 l     F .text	00000040 Board_TEC_Init
1a002de8 l     F .text	00000040 Board_GPIO_Init
1a002e28 l     F .text	00000030 Board_ADC_Init
1a002e58 l     F .text	00000038 Board_SPI_Init
1a002e90 l     F .text	00000024 Board_I2C_Init
1a0059d0 l     O .text	00000008 GpioButtons
1a0059d8 l     O .text	0000000c GpioLeds
1a0059e4 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0059fc l     O .text	00000004 InitClkStates
1a005a00 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003000 l     F .text	0000002c Chip_UART_GetIndex
1a005a74 l     O .text	00000008 UART_BClock
1a005a7c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0031a8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0031bc l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a003270 l     F .text	000000a4 pll_calc_divs
1a003314 l     F .text	0000010c pll_get_frac
1a003420 l     F .text	0000004c Chip_Clock_FindBaseClock
1a003694 l     F .text	00000022 Chip_Clock_GetDivRate
10003af8 l     O .bss	00000008 audio_usb_pll_freq
1a005a90 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a005afc l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00396c l     F .text	00000014 Chip_SSP_GetClockIndex
1a003980 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
100000b0 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
100000e8 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
10003b18 l     O .bss	00000004 callBackFuncParams
10003b20 l     O .bss	00000008 tickCounter
10003b28 l     O .bss	00000004 tickHookFunction
10003b2c l     O .bss	00000030 tickerObject.11826
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003e2c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10003b5c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a004104 l     F .text	00000010 clearInterrupt
1a004114 l     F .text	0000005c serveInterrupt
100000ec l     O .data	00000048 ultrasonicSensors
1a005cdc l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlwr.c
00000000 l    df *ABS*	00000000 strtol.c
1a00458e l     F .text	000000f6 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 strupr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0049bc l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a004db0 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
10000138 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 
1a005e88 l       .init_array	00000000 __init_array_end
1a005e84 l       .bss_RAM5	00000000 __preinit_array_end
1a005e84 l       .init_array	00000000 __init_array_start
1a005e84 l       .bss_RAM5	00000000 __preinit_array_start
1a0034b8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000c08 g     F .text	00000012 _isatty_r
1a004556 g     F .text	00000010 strcpy
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000c1a g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a000de0 g     F .text	0000000c xPortGetFreeHeapSize
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
10003b68 g     O .bss	00000004 QeueMinusculizador
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002af8 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
10000000 g     O .data	00000037 AsciFrame
1a004508 g     F .text	00000030 printf
1a002f46 g     F .text	00000008 __stdio_init
1a00539a g     F .text	00000024 __sseek
1a004a3c g     F .text	00000060 __sinit
1a002248 g     F .text	00000078 vTaskGetInfo
1a0046dc g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001658 g     F .text	00000052 vQueueWaitForMessageRestricted
1a004a10 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a003262 g     F .text	0000000c Chip_ADC_SetResolution
1a005482 g     F .text	00000002 __malloc_unlock
1a00044c g     F .text	00000014 LwrCase
1a004566 g     F .text	00000028 strlwr
1a002b94 g     F .text	0000002c SysTick_Handler
1a003080 g     F .text	00000040 Chip_UART_SetBaud
1a000b64  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a002eec g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a002b30 g     F .text	00000064 PendSV_Handler
1a004b58 g     F .text	0000001c __locale_ctype_ptr
1a00126e g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a005e90 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1000389c g     O .bss	00000004 pxCurrentTCB
1a000bfe g     F .text	0000000a _fstat_r
53ff6d26 g       *ABS*	00000000 __valid_user_code_checksum
1a005e90 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0006ec g     F .text	00000140 driver
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0021a4 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a003736 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002bf8 g     F .text	00000110 xPortStartScheduler
1a0044e0 g     F .text	00000016 memcpy
1a0020b0 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
10003b6c g     O .bss	00000004 QeueMayusculizador
1a004a04 g     F .text	0000000c _cleanup_r
1a002bc0  w    F .text	00000038 vPortSetupTimerInterrupt
10003b70 g     O .bss	00000010 Report
1a004190 g     F .text	00000000 .hidden __aeabi_uldivmod
10003d90 g       .noinit	00000000 _noinit
10003b80 g     O .bss	00000004 DataProcessed_handle
1a000d9c g     F .text	00000044 vPortFree
1a003d72 g     F .text	00000018 uartWriteString
10003d88 g     O .bss	00000004 SystemCoreClock
1a00302c g     F .text	00000054 Chip_UART_Init
1a001494 g     F .text	0000019c xQueueSemaphoreTake
1a003dac g     F .text	00000034 tickerCallback
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002d08 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a0037b4 g     F .text	0000004c Chip_Clock_GetRate
1a0016c6 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a002f88 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00030e g     F .text	0000000c uart_config
1a0041c0 g     F .text	000002cc .hidden __udivmoddi4
1a000c9c g     F .text	00000020 _sbrk_r
1a0059cc g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000c24 g     F .text	0000004e _read_r
1a0016c0 g     F .text	00000006 vListInitialiseItem
1a00417a g     F .text	0000000a GPIO1_IRQHandler
1a00133c g     F .text	00000158 xQueueReceive
10003d48 g     O .bss	00000040 xQueueRegistry
1a001754 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a005e88 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a005d40 g     O .text	00000004 _global_impure_ptr
1a004498 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000ce8 g     F .text	000000b4 pvPortMalloc
10003b84 g     O .bss	000001bc message
1a002f08 g     F .text	0000002c Board_Init
10000038 g     O .data	0000006e HexFrame
1a000bf2  w    F .text	00000002 _init
1a0016aa g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
10003d40 g     O .bss	00000004 MsgHandle
1a004684 g     F .text	0000002c strtol
1a000300 g     F .text	0000000e GetData
1a00031c g     F .text	000000d4 ASCI
1a001c98 g     F .text	0000000c xTaskGetTickCount
1a0010c4 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10003d90 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000b68 g     F .text	00000088 Reset_Handler
1a003de0 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a003a64 g     F .text	00000038 Chip_I2C_SetClockRate
1a002398 g     F .text	000000b0 xTaskPriorityDisinherit
1a000460 g     F .text	0000028c server
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a00346c g     F .text	0000004c Chip_Clock_EnableCrystal
1a000438 g     F .text	00000014 UperCase
10008000 g       *ABS*	00000000 __top_RamLoc32
1a002118 g     F .text	0000008c xTaskRemoveFromEventList
1a00176e g     F .text	00000002 vApplicationMallocFailedHook
10000314 g     O .bss	00000004 Task1Handle
1a00018a g     F .text	0000001e data_init
1000030c g     O .bss	00000004 DrivHandle
1a004538 g     F .text	0000001e strcat
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a005ce0 g     O .text	00000020 __sf_fake_stderr
1a003a40 g     F .text	00000024 Chip_I2C_Init
1a003d8c g     F .text	00000014 UART2_IRQHandler
1a0003f0 g     F .text	00000048 EndTask
1a003628 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a005ba4 g     O .text	00000136 gpioPinsInit
1a003b94 g     F .text	00000090 uartInterrupt
1a003d58 g     F .text	0000001a uartWriteByte
1a002508 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a003998 g     F .text	00000012 Chip_SSP_SetClockRate
10003d44 g     O .bss	00000004 MsgHandle_2
1a004dde g     F .text	00000024 __sfputs_r
1a004184 g     F .text	0000000a GPIO2_IRQHandler
1a0053e0 g     F .text	00000000 memchr
1a00082c g     F .text	00000110 task1
1a0021bc g     F .text	00000080 xTaskCheckForTimeOut
1a004c60 g     F .text	0000009c _free_r
1a003710 g     F .text	00000026 Chip_Clock_GetBaseClock
1a0022e0 g     F .text	000000b8 xTaskPriorityInherit
10000308 g       .bss	00000000 _bss
1a003230 g     F .text	00000032 Chip_ADC_SetSampleRate
1a00093c g     F .text	00000110 task2
1a001c88 g     F .text	00000010 vTaskSuspendAll
1a001b74 g     F .text	00000080 eTaskGetState
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0039aa g     F .text	0000003e Chip_SSP_SetBitRate
1a001712 g     F .text	00000028 uxListRemove
1a003968 g     F .text	00000002 Chip_GPIO_Init
1a0059f8 g     O .text	00000004 OscRateIn
1a003cdc g     F .text	0000007c uartInit
1a001a9c g     F .text	00000072 xTaskCreateStatic
10003d90 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001efc g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000fe6 g     F .text	00000090 xQueueGenericCreateStatic
1a0020e0 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000bf4 g     F .text	0000000a _close_r
1a003e60 g     F .text	00000194 gpioInit
1a00173c g     F .text	00000018 vApplicationGetIdleTaskMemory
1a0026ec g     F .text	0000006c xTimerGenericCommand
1a004780 g     F .text	000000dc __swsetup_r
1a00176c g     F .text	00000002 vApplicationStackOverflowHook
1a00448c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001fc4 g     F .text	000000ec vTaskSuspend
1a004a9c g     F .text	00000078 __sfp
1a005340 g     F .text	00000022 __sread
1a003ff4 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a005480 g     F .text	00000002 __malloc_lock
1a002ed8 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a004968 g     F .text	00000054 _fflush_r
1a005d00 g     O .text	00000020 __sf_fake_stdin
1a0034d4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0044f6 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000a4c g     F .text	00000118 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a0016de g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002a90 g     F .text	00000024 SVC_Handler
1a0053be g     F .text	00000008 __sclose
1a00263c g     F .text	00000064 xTimerCreateTimerTask
1a004cfc g     F .text	000000b4 _malloc_r
1a0053c6 g     F .text	0000001a __ascii_wctomb
1a003cb0 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a003744 g     F .text	0000003c Chip_Clock_EnableOpts
1a002f3e g     F .text	00000008 __stdio_getchar
1a001076 g     F .text	0000004e xQueueGenericCreate
1a0034f0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0035a8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003a9c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a000bf0  w    F .text	00000002 _fini
1a004508 g     F .text	00000030 iprintf
1a001dbc g     F .text	000000f4 xTaskResumeAll
1a001bf4 g     F .text	00000094 vTaskStartScheduler
1a0031f0 g     F .text	00000040 Chip_ADC_Init
10003d8c g     O .bss	00000004 g_pUsbApi
1a002f50 g     F .text	00000038 Board_SetupMuxing
1a0030c0 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a000c72 g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a005030 g     F .text	000000ea _printf_common
10000134 g     O .data	00000004 _impure_ptr
1a00485c g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a003cc8 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a004c3c g     F .text	00000024 __ascii_mbtowc
10000000 g       .data	00000000 _data
10000318 g     O .bss	00000004 Task2Handle
1a00223c g     F .text	0000000c vTaskMissedYield
10003d90 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0039e8 g     F .text	00000038 Chip_SSP_Init
1a001630 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001ca4 g     F .text	00000118 xTaskIncrementTick
1a004b74 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a002eb4 g     F .text	00000024 Board_Debug_Init
10000310 g     O .bss	00000004 ServHandle
1a002f34 g     F .text	0000000a __stdio_putchar
1a000f40 g     F .text	00000084 xQueueGenericReset
10000304 g       .data	00000000 _edata
1a003a20 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001b0e g     F .text	00000066 xTaskCreate
1a003814 g     F .text	00000154 Chip_SetupCoreClock
1a005362 g     F .text	00000038 __swrite
1a004170 g     F .text	0000000a GPIO0_IRQHandler
1a004e04 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a004b14 g     F .text	0000003c _fwalk_reent
1a003800 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a001eb0 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a005d20 g     O .text	00000020 __sf_fake_stdout
1a004490 g     F .text	00000008 atoi
1a0022c0 g     F .text	00000020 xTaskGetSchedulerState
1a005d81 g     O .text	00000101 _ctype_
1a002448 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a00448c  w    F .text	00000002 .hidden __aeabi_idiv0
1a0046b0 g     F .text	0000002a strupr
1a003c24 g     F .text	0000008c uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
1a004bbc g     F .text	00000080 __smakebuf_r
1a002a60 g     F .text	0000002c pxPortInitialiseStack
1a00511c g     F .text	00000224 _printf_i
1a004b50 g     F .text	00000006 __locale_ctype_ptr_l
1a003780 g     F .text	00000034 Chip_Clock_Enable
1a003da0 g     F .text	0000000a UART3_IRQHandler
10003b64 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0026a0 g     F .text	0000004c xTimerCreateStatic
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a004010 g     F .text	000000f4 boardInit
1a002ab4 g     F .text	00000044 vPortEnterCritical
10003b60 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a004e04 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
10000308 g     O .bss	00000004 DataProcessed_key
1a001258 g     F .text	00000016 xQueueCreateMutex
10000198 g     O .data	0000016c __global_locale
1a0036b8 g     F .text	00000058 Chip_Clock_SetBaseClock
1a003ad4 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a002ff4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 69 0b 00 1a 79 01 00 1a 7b 01 00 1a     ....i...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 26 6d ff 53     }...........&m.S
	...
1a00002c:	91 2a 00 1a 85 01 00 1a 00 00 00 00 31 2b 00 1a     .*..........1+..
1a00003c:	95 2b 00 1a                                         .+..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	f5 3f 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .?..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 8d 3d 00 1a a1 3d 00 1a     .........=...=..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	71 41 00 1a 7b 41 00 1a 85 41 00 1a bb 01 00 1a     qA..{A...A......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a005e90 	.word	0x1a005e90
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000304 	.word	0x00000304
1a000120:	1a005e90 	.word	0x1a005e90
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a005e90 	.word	0x1a005e90
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a005e90 	.word	0x1a005e90
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a005e90 	.word	0x1a005e90
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000308 	.word	0x10000308
1a000154:	00003a88 	.word	0x00003a88
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f003 fc96 	bl	1a003af0 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <GetData>:

/*==================[external functions definition]==========================*/


//This function copies the data portion of the the message buffer to data  and casts data type to read-only on MsgBuffer inside this block only
int GetData(char *data, const char* buffer,uint8_t size ){
1a000300:	b508      	push	{r3, lr}

	memcpy(data,buffer+1,size-2);
1a000302:	3a02      	subs	r2, #2
1a000304:	3101      	adds	r1, #1
1a000306:	f004 f8eb 	bl	1a0044e0 <memcpy>
	return 1;
}
1a00030a:	2001      	movs	r0, #1
1a00030c:	bd08      	pop	{r3, pc}

1a00030e <uart_config>:

// This functions sets the baud rate of the USB UART
void uart_config(int baud,bool_t state )
{
1a00030e:	b508      	push	{r3, lr}
     uartConfig(UART_USB,baud);
1a000310:	4601      	mov	r1, r0
1a000312:	2003      	movs	r0, #3
1a000314:	f003 fce2 	bl	1a003cdc <uartInit>
	 //uartInterrupt( UART_USB, state); 				// Enable UART interrupt
}
1a000318:	bd08      	pop	{r3, pc}
1a00031a:	Address 0x000000001a00031a is out of bounds.


1a00031c <ASCI>:
	strcat(Msg_Op,Msg_Only);
	printf("Message with operation flag   is %s\r\n",Msg_Op);
	return 1;

}
int ASCI(char *frame, uint8_t  size, char *buf){
1a00031c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00031e:	b0ad      	sub	sp, #180	; 0xb4
1a000320:	4606      	mov	r6, r0
1a000322:	460f      	mov	r7, r1
1a000324:	4614      	mov	r4, r2

char buffer[111]="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";			//This buffer stores the data received in Hex representation
1a000326:	4d31      	ldr	r5, [pc, #196]	; (1a0003ec <ASCI+0xd0>)
1a000328:	224d      	movs	r2, #77	; 0x4d
1a00032a:	4629      	mov	r1, r5
1a00032c:	a810      	add	r0, sp, #64	; 0x40
1a00032e:	f004 f8d7 	bl	1a0044e0 <memcpy>
1a000332:	2222      	movs	r2, #34	; 0x22
1a000334:	2100      	movs	r1, #0
1a000336:	f10d 008d 	add.w	r0, sp, #141	; 0x8d
1a00033a:	f004 f8dc 	bl	1a0044f6 <memset>
int newval, j=0;
char msg[60]="xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx";								//This is where the final ASCCI readable letters are stored
1a00033e:	f10d 0c04 	add.w	ip, sp, #4
1a000342:	3570      	adds	r5, #112	; 0x70
1a000344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000346:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
1a00034a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00034c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
1a000350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000352:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
1a000356:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
1a00035a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}

    for (int i = 0; i < size; i+=2)
1a00035e:	2300      	movs	r3, #0
1a000360:	e013      	b.n	1a00038a <ASCI+0x6e>

            switch(frame[i+1])																				//if RecvData[i+1] is a letter convert it to integer, otherwise use it.
        {
            case 'A':
            {
                secondvalue = 10;
1a000362:	220a      	movs	r2, #10
1a000364:	e00a      	b.n	1a00037c <ASCI+0x60>
            {
                secondvalue = 11;
            }break;
            case 'C':
            {
                secondvalue = 12;
1a000366:	220c      	movs	r2, #12
            }break;
1a000368:	e008      	b.n	1a00037c <ASCI+0x60>
            case 'D':
            {
                secondvalue = 13;
1a00036a:	220d      	movs	r2, #13
            }break;
1a00036c:	e006      	b.n	1a00037c <ASCI+0x60>

            case 'E':
            {
                secondvalue = 14;
1a00036e:	220e      	movs	r2, #14
            }break;
1a000370:	e004      	b.n	1a00037c <ASCI+0x60>
            case 'F':
            {
                secondvalue = 15;
1a000372:	220f      	movs	r2, #15
            }break;
1a000374:	e002      	b.n	1a00037c <ASCI+0x60>
            default:
                secondvalue = frame[i+1] - '0';
1a000376:	3a30      	subs	r2, #48	; 0x30
            break;
1a000378:	e000      	b.n	1a00037c <ASCI+0x60>
                secondvalue = 11;
1a00037a:	220b      	movs	r2, #11
        }

        newval =  16 * firstvalue + secondvalue;						 									//convert the two values into decimal form
1a00037c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
        buffer[i]=(char)newval;																				// cast type newval into character, save in ptrBuffer :buffer[0]='G' only for the first element
1a000380:	a92c      	add	r1, sp, #176	; 0xb0
1a000382:	4419      	add	r1, r3
1a000384:	f801 2c70 	strb.w	r2, [r1, #-112]
    for (int i = 0; i < size; i+=2)
1a000388:	3302      	adds	r3, #2
1a00038a:	429f      	cmp	r7, r3
1a00038c:	dd18      	ble.n	1a0003c0 <ASCI+0xa4>
        int firstvalue = frame[i] - '0';
1a00038e:	5cf2      	ldrb	r2, [r6, r3]
1a000390:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
            switch(frame[i+1])																				//if RecvData[i+1] is a letter convert it to integer, otherwise use it.
1a000394:	18f2      	adds	r2, r6, r3
1a000396:	7852      	ldrb	r2, [r2, #1]
1a000398:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
1a00039c:	2805      	cmp	r0, #5
1a00039e:	d8ea      	bhi.n	1a000376 <ASCI+0x5a>
1a0003a0:	a501      	add	r5, pc, #4	; (adr r5, 1a0003a8 <ASCI+0x8c>)
1a0003a2:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
1a0003a6:	bf00      	nop
1a0003a8:	1a000363 	.word	0x1a000363
1a0003ac:	1a00037b 	.word	0x1a00037b
1a0003b0:	1a000367 	.word	0x1a000367
1a0003b4:	1a00036b 	.word	0x1a00036b
1a0003b8:	1a00036f 	.word	0x1a00036f
1a0003bc:	1a000373 	.word	0x1a000373

    }
	for(int j=0;j<=sizeof(msg);j++){																		//Assign new value for every element in msg array from the converted buffer
1a0003c0:	2300      	movs	r3, #0
1a0003c2:	e009      	b.n	1a0003d8 <ASCI+0xbc>
		msg[j]=buffer[j*2];
1a0003c4:	aa2c      	add	r2, sp, #176	; 0xb0
1a0003c6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
1a0003ca:	f812 1c70 	ldrb.w	r1, [r2, #-112]
1a0003ce:	aa2c      	add	r2, sp, #176	; 0xb0
1a0003d0:	441a      	add	r2, r3
1a0003d2:	f802 1cac 	strb.w	r1, [r2, #-172]
	for(int j=0;j<=sizeof(msg);j++){																		//Assign new value for every element in msg array from the converted buffer
1a0003d6:	3301      	adds	r3, #1
1a0003d8:	2b3c      	cmp	r3, #60	; 0x3c
1a0003da:	d9f3      	bls.n	1a0003c4 <ASCI+0xa8>
	 }
	strcpy(buf,msg);																						//Copy the converted result into the buffer
1a0003dc:	a901      	add	r1, sp, #4
1a0003de:	4620      	mov	r0, r4
1a0003e0:	f004 f8b9 	bl	1a004556 <strcpy>
    return 0;
}
1a0003e4:	2000      	movs	r0, #0
1a0003e6:	b02d      	add	sp, #180	; 0xb4
1a0003e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0003ea:	bf00      	nop
1a0003ec:	1a005484 	.word	0x1a005484

1a0003f0 <EndTask>:

	op[0]=buffer[1];

	return 1;
}
int EndTask(TaskHandle_t *handle,const uint8_t i){										// This function suspends the task, it takes the task handle and the task number, the number to decide the message
1a0003f0:	b538      	push	{r3, r4, r5, lr}
1a0003f2:	4605      	mov	r5, r0
1a0003f4:	460c      	mov	r4, r1



      vTaskDelay(500);
1a0003f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a0003fa:	f001 fd59 	bl	1a001eb0 <vTaskDelay>
      switch (i)																		//Verify the task number
1a0003fe:	2c01      	cmp	r4, #1
1a000400:	d006      	beq.n	1a000410 <EndTask+0x20>
1a000402:	2c02      	cmp	r4, #2
1a000404:	d00d      	beq.n	1a000422 <EndTask+0x32>
    	  break;
      case 2:
    	  uartWriteString(UART_USB,"Task 2 suspended, no Queue created.  \n");
    	  break;
      default:
    	  uartWriteString(UART_USB,"No such task.  \n");
1a000406:	4909      	ldr	r1, [pc, #36]	; (1a00042c <EndTask+0x3c>)
1a000408:	2003      	movs	r0, #3
1a00040a:	f003 fcb2 	bl	1a003d72 <uartWriteString>
1a00040e:	e003      	b.n	1a000418 <EndTask+0x28>
    	  uartWriteString(UART_USB,"Task 1 suspended, no Queue created.  \n");
1a000410:	4907      	ldr	r1, [pc, #28]	; (1a000430 <EndTask+0x40>)
1a000412:	2003      	movs	r0, #3
1a000414:	f003 fcad 	bl	1a003d72 <uartWriteString>
      }
      vTaskSuspend(*handle);
1a000418:	6828      	ldr	r0, [r5, #0]
1a00041a:	f001 fdd3 	bl	1a001fc4 <vTaskSuspend>
	  return 1;
}
1a00041e:	2001      	movs	r0, #1
1a000420:	bd38      	pop	{r3, r4, r5, pc}
    	  uartWriteString(UART_USB,"Task 2 suspended, no Queue created.  \n");
1a000422:	4904      	ldr	r1, [pc, #16]	; (1a000434 <EndTask+0x44>)
1a000424:	2003      	movs	r0, #3
1a000426:	f003 fca4 	bl	1a003d72 <uartWriteString>
    	  break;
1a00042a:	e7f5      	b.n	1a000418 <EndTask+0x28>
1a00042c:	1a005584 	.word	0x1a005584
1a000430:	1a005534 	.word	0x1a005534
1a000434:	1a00555c 	.word	0x1a00555c

1a000438 <UperCase>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/


int UperCase(char *data){
1a000438:	b510      	push	{r4, lr}
1a00043a:	4604      	mov	r4, r0

	strcpy(data,strupr(data));
1a00043c:	f004 f938 	bl	1a0046b0 <strupr>
1a000440:	4601      	mov	r1, r0
1a000442:	4620      	mov	r0, r4
1a000444:	f004 f887 	bl	1a004556 <strcpy>
	return 1;
}
1a000448:	2001      	movs	r0, #1
1a00044a:	bd10      	pop	{r4, pc}

1a00044c <LwrCase>:
int LwrCase(char *data){
1a00044c:	b510      	push	{r4, lr}
1a00044e:	4604      	mov	r4, r0

	strcpy(data,strlwr(data));   			 								// convert to lower case
1a000450:	f004 f889 	bl	1a004566 <strlwr>
1a000454:	4601      	mov	r1, r0
1a000456:	4620      	mov	r0, r4
1a000458:	f004 f87d 	bl	1a004556 <strcpy>
	return 1;
}
1a00045c:	2001      	movs	r0, #1
1a00045e:	bd10      	pop	{r4, pc}

1a000460 <server>:

/*==================[Definition of external data]=========================*/

/*==================[Declaration of internal functions ]====================*/

void server(void){																										// The server assigns the messages to the correct task based on the operation byte, it also creates queues for each task
1a000460:	b570      	push	{r4, r5, r6, lr}
1a000462:	b09a      	sub	sp, #104	; 0x68

	volatile TaskStatus_t xTaskDetails;																					// This variable stores the information about the stack available
	vTaskGetInfo(ServHandle,&xTaskDetails,pdTRUE,eInvalid);																// This function stores in the variable declared above the information about the stack, it also requires the task handle as a parameter
1a000464:	4b87      	ldr	r3, [pc, #540]	; (1a000684 <server+0x224>)
1a000466:	6818      	ldr	r0, [r3, #0]
1a000468:	2305      	movs	r3, #5
1a00046a:	2201      	movs	r2, #1
1a00046c:	a911      	add	r1, sp, #68	; 0x44
1a00046e:	f001 feeb 	bl	1a002248 <vTaskGetInfo>
	Report.ServerStartStack=(const)xTaskDetails.usStackHighWaterMark;													// The current stack size available is stored in the ServerStartStack of  Report structure and cast type it to read only
1a000472:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
1a000476:	b2db      	uxtb	r3, r3
1a000478:	4c83      	ldr	r4, [pc, #524]	; (1a000688 <server+0x228>)
1a00047a:	7023      	strb	r3, [r4, #0]
	Report.ServerStartHeap=(const)xPortGetFreeHeapSize();																// Get the current available heap size and assign to the ServerStartHeap member of the Report structure and cast type it to read only
1a00047c:	f000 fcb0 	bl	1a000de0 <xPortGetFreeHeapSize>
1a000480:	b2c0      	uxtb	r0, r0
1a000482:	7120      	strb	r0, [r4, #4]

	char MsgFromDriver[sizeof(AsciFrame)]="\0";																			// Declaring variable that will store the data from the driver, this variable of size AssciFrame define above
1a000484:	4b81      	ldr	r3, [pc, #516]	; (1a00068c <server+0x22c>)
1a000486:	881c      	ldrh	r4, [r3, #0]
1a000488:	f8ad 400c 	strh.w	r4, [sp, #12]
1a00048c:	2235      	movs	r2, #53	; 0x35
1a00048e:	2100      	movs	r1, #0
1a000490:	f10d 000e 	add.w	r0, sp, #14
1a000494:	f004 f82f 	bl	1a0044f6 <memset>
	char *MsgToDriver=(char *)pvPortMalloc(sizeof(AsciFrame));																			// Declaring variable that will store the data to be sent to the driver, this variable of size AssciFrame define above
1a000498:	2037      	movs	r0, #55	; 0x37
1a00049a:	f000 fc25 	bl	1a000ce8 <pvPortMalloc>
1a00049e:	4605      	mov	r5, r0
	char *f=MsgFromDriver;																								// This pointer holds the first operation byte in order to determine the proper operation
	char flag[2]="\0";																									// This string is used to put together the message and the operation before sending back to the Driver
1a0004a0:	f8ad 4008 	strh.w	r4, [sp, #8]
	char SizeData[3]="\0";																								// This string is used to store the size bytes of the data
1a0004a4:	f8ad 4004 	strh.w	r4, [sp, #4]
1a0004a8:	2300      	movs	r3, #0
1a0004aa:	f88d 3006 	strb.w	r3, [sp, #6]
1a0004ae:	e0ba      	b.n	1a000626 <server+0x1c6>


    	if(!(xQueueReceive(MsgHandle,MsgFromDriver,1000))){                          									// Check if any message was received and store it in MsgFromDriver buffer, important QueueReceive clears buffer  when called again
    		uartWriteString(UART_USB,"Server <-Driver: No received\n");													// Error capture if message was not received
    	}else{
    		SizeData[0]=MsgFromDriver[1];																				// Storing the information about the message size  which correspond to byte 1 and 2
1a0004b0:	f89d 300d 	ldrb.w	r3, [sp, #13]
1a0004b4:	f88d 3004 	strb.w	r3, [sp, #4]
    		SizeData[1]=MsgFromDriver[2];
1a0004b8:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0004bc:	f88d 3005 	strb.w	r3, [sp, #5]
    		flag[0]=MsgFromDriver[0];																					// Copy the the operation byte to flag variable
1a0004c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0004c4:	f88d 3008 	strb.w	r3, [sp, #8]
    		message.size= atoi(SizeData);																				// Convert the Size string to integer and assign it to the size entry of the message structure
1a0004c8:	a801      	add	r0, sp, #4
1a0004ca:	f003 ffe1 	bl	1a004490 <atoi>
1a0004ce:	b2c0      	uxtb	r0, r0
1a0004d0:	4e6f      	ldr	r6, [pc, #444]	; (1a000690 <server+0x230>)
1a0004d2:	7070      	strb	r0, [r6, #1]
    		message.operation=	atoi(*f);																				// Convert the flag to integer and assign to the operation entry of the message structure
1a0004d4:	f89d 000c 	ldrb.w	r0, [sp, #12]
1a0004d8:	f003 ffda 	bl	1a004490 <atoi>
1a0004dc:	b2c0      	uxtb	r0, r0
1a0004de:	4634      	mov	r4, r6
1a0004e0:	f804 0b04 	strb.w	r0, [r4], #4
    		strcpy(message.data,MsgFromDriver+3);																		// Copy the data portion only to the data entry of the message structure
1a0004e4:	f10d 010f 	add.w	r1, sp, #15
1a0004e8:	4620      	mov	r0, r4
1a0004ea:	f004 f834 	bl	1a004556 <strcpy>
    		printf("Server-> Report: Msg size %d\n",message.size);														// Server is reporting the data size
1a0004ee:	7871      	ldrb	r1, [r6, #1]
1a0004f0:	4868      	ldr	r0, [pc, #416]	; (1a000694 <server+0x234>)
1a0004f2:	f004 f809 	bl	1a004508 <iprintf>
    		printf("Server <-Driver:Received message is:\n %s\n",message.data);											// Server is reporting the data received
1a0004f6:	4621      	mov	r1, r4
1a0004f8:	4867      	ldr	r0, [pc, #412]	; (1a000698 <server+0x238>)
1a0004fa:	f004 f805 	bl	1a004508 <iprintf>
    		vTaskDelay(500);
1a0004fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000502:	f001 fcd5 	bl	1a001eb0 <vTaskDelay>
1a000506:	e09c      	b.n	1a000642 <server+0x1e2>
    	}

        switch(*f)
1a000508:	2932      	cmp	r1, #50	; 0x32
1a00050a:	d06e      	beq.n	1a0005ea <server+0x18a>
1a00050c:	2933      	cmp	r1, #51	; 0x33
1a00050e:	d17a      	bne.n	1a000606 <server+0x1a6>
    			printf("Server-> Report: Flag  %c\n",*f);
        		printf("Server -> Report: Total available stack size is %d\n",Report.DriverEndStack +Report.ServerEndStack+Report.Task1EndStack+Report.Task2EndStack);					// Report the total available stack

        	    break;
        	case '3':
            			printf("Server-> Report: Flag  %c\n",*f);																														//Report the operation flag
1a000510:	4862      	ldr	r0, [pc, #392]	; (1a00069c <server+0x23c>)
1a000512:	f003 fff9 	bl	1a004508 <iprintf>
                		printf("Server -> Report: Total available Heap size is %d\n",Report.DriverEndHeap +Report.ServerEndHeap+Report.Task1EndHeap+Report.Task2EndHeap);				//Report the total Heap size
1a000516:	4b5c      	ldr	r3, [pc, #368]	; (1a000688 <server+0x228>)
1a000518:	7b5a      	ldrb	r2, [r3, #13]
1a00051a:	7b19      	ldrb	r1, [r3, #12]
1a00051c:	4411      	add	r1, r2
1a00051e:	7b9a      	ldrb	r2, [r3, #14]
1a000520:	440a      	add	r2, r1
1a000522:	7bd9      	ldrb	r1, [r3, #15]
1a000524:	4411      	add	r1, r2
1a000526:	485e      	ldr	r0, [pc, #376]	; (1a0006a0 <server+0x240>)
1a000528:	f003 ffee 	bl	1a004508 <iprintf>

                	    break;
1a00052c:	e06b      	b.n	1a000606 <server+0x1a6>
        			vTaskDelay(1000);
1a00052e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000532:	f001 fcbd 	bl	1a001eb0 <vTaskDelay>
        			if(!(xQueueReceive(DataProcessed_handle,message.dataProcessed,1000))){                          	//Check if message is received back from task1
1a000536:	4b5b      	ldr	r3, [pc, #364]	; (1a0006a4 <server+0x244>)
1a000538:	6818      	ldr	r0, [r3, #0]
1a00053a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00053e:	495a      	ldr	r1, [pc, #360]	; (1a0006a8 <server+0x248>)
1a000540:	f000 fefc 	bl	1a00133c <xQueueReceive>
1a000544:	b920      	cbnz	r0, 1a000550 <server+0xf0>
        				uartWriteString(UART_USB,"Server <- Task1: No received\n");										// Report error if nothing is received
1a000546:	4959      	ldr	r1, [pc, #356]	; (1a0006ac <server+0x24c>)
1a000548:	2003      	movs	r0, #3
1a00054a:	f003 fc12 	bl	1a003d72 <uartWriteString>
1a00054e:	e05a      	b.n	1a000606 <server+0x1a6>
        				printf("Server <-Task1: Received- %s\n",message.dataProcessed);									// Report received after data processing is done
1a000550:	4955      	ldr	r1, [pc, #340]	; (1a0006a8 <server+0x248>)
1a000552:	4857      	ldr	r0, [pc, #348]	; (1a0006b0 <server+0x250>)
1a000554:	f003 ffd8 	bl	1a004508 <iprintf>
1a000558:	e055      	b.n	1a000606 <server+0x1a6>
    			printf("Server-> Report: Flag  %c\n",*f);																// Print the operation flag
1a00055a:	4850      	ldr	r0, [pc, #320]	; (1a00069c <server+0x23c>)
1a00055c:	f003 ffd4 	bl	1a004508 <iprintf>
				vTaskDelay(500);
1a000560:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000564:	f001 fca4 	bl	1a001eb0 <vTaskDelay>
        		if(!(xQueueSend(QeueMinusculizador,message.data,50))){													//Send data to QeueMinusculizador for task2 to read it
1a000568:	4b52      	ldr	r3, [pc, #328]	; (1a0006b4 <server+0x254>)
1a00056a:	6818      	ldr	r0, [r3, #0]
1a00056c:	2300      	movs	r3, #0
1a00056e:	2232      	movs	r2, #50	; 0x32
1a000570:	4951      	ldr	r1, [pc, #324]	; (1a0006b8 <server+0x258>)
1a000572:	f000 fda7 	bl	1a0010c4 <xQueueGenericSend>
1a000576:	b920      	cbnz	r0, 1a000582 <server+0x122>
        			uartWriteString(UART_USB,"Server-> Task2: No sent\n");												//Error report if not sent
1a000578:	4950      	ldr	r1, [pc, #320]	; (1a0006bc <server+0x25c>)
1a00057a:	2003      	movs	r0, #3
1a00057c:	f003 fbf9 	bl	1a003d72 <uartWriteString>
1a000580:	e041      	b.n	1a000606 <server+0x1a6>
		        	vTaskDelay(1000);
1a000582:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000586:	f001 fc93 	bl	1a001eb0 <vTaskDelay>
		        	if(!(xQueueReceive(DataProcessed_handle,message.dataProcessed,1000))){                          	//Receive processed data from task2 and save it in the message.DataProcessed entry
1a00058a:	4b46      	ldr	r3, [pc, #280]	; (1a0006a4 <server+0x244>)
1a00058c:	6818      	ldr	r0, [r3, #0]
1a00058e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000592:	4945      	ldr	r1, [pc, #276]	; (1a0006a8 <server+0x248>)
1a000594:	f000 fed2 	bl	1a00133c <xQueueReceive>
1a000598:	b920      	cbnz	r0, 1a0005a4 <server+0x144>
		        		uartWriteString(UART_USB,"Server <- Task2: No received\n");										// Error report of nothing  received
1a00059a:	4949      	ldr	r1, [pc, #292]	; (1a0006c0 <server+0x260>)
1a00059c:	2003      	movs	r0, #3
1a00059e:	f003 fbe8 	bl	1a003d72 <uartWriteString>
1a0005a2:	e030      	b.n	1a000606 <server+0x1a6>
		        		strcat(MsgToDriver,flag);																		//Add the flag to the beginning  of the buffer MsgToDrive
1a0005a4:	a902      	add	r1, sp, #8
1a0005a6:	4628      	mov	r0, r5
1a0005a8:	f003 ffc6 	bl	1a004538 <strcat>
		        		strcpy(MsgToDriver+1,SizeData);																	// Add the data size
1a0005ac:	a901      	add	r1, sp, #4
1a0005ae:	1c68      	adds	r0, r5, #1
1a0005b0:	f003 ffd1 	bl	1a004556 <strcpy>
		        		strcpy(MsgToDriver+3,message.dataProcessed);													//Finally add the message after processing to the same buffer
1a0005b4:	493c      	ldr	r1, [pc, #240]	; (1a0006a8 <server+0x248>)
1a0005b6:	1ce8      	adds	r0, r5, #3
1a0005b8:	f003 ffcd 	bl	1a004556 <strcpy>
		        		if(!(xQueueSend(MsgHandle_2,(const)MsgToDriver,1000))){											//Send the data to Driver
1a0005bc:	4b41      	ldr	r3, [pc, #260]	; (1a0006c4 <server+0x264>)
1a0005be:	6818      	ldr	r0, [r3, #0]
1a0005c0:	2300      	movs	r3, #0
1a0005c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0005c6:	4629      	mov	r1, r5
1a0005c8:	f000 fd7c 	bl	1a0010c4 <xQueueGenericSend>
1a0005cc:	b920      	cbnz	r0, 1a0005d8 <server+0x178>
		        			uartWriteString(UART_USB,"Server -> Driver: No sent\n");									//Error handle if not sent
1a0005ce:	493e      	ldr	r1, [pc, #248]	; (1a0006c8 <server+0x268>)
1a0005d0:	2003      	movs	r0, #3
1a0005d2:	f003 fbce 	bl	1a003d72 <uartWriteString>
1a0005d6:	e016      	b.n	1a000606 <server+0x1a6>
				        		printf("Server -> Driver: Sent msg:\n%s\n",MsgToDriver);								//If sent successfully, report  the message that was sent
1a0005d8:	4629      	mov	r1, r5
1a0005da:	483c      	ldr	r0, [pc, #240]	; (1a0006cc <server+0x26c>)
1a0005dc:	f003 ff94 	bl	1a004508 <iprintf>
		        				vTaskDelay(4000);
1a0005e0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
1a0005e4:	f001 fc64 	bl	1a001eb0 <vTaskDelay>
1a0005e8:	e00d      	b.n	1a000606 <server+0x1a6>
    			printf("Server-> Report: Flag  %c\n",*f);
1a0005ea:	482c      	ldr	r0, [pc, #176]	; (1a00069c <server+0x23c>)
1a0005ec:	f003 ff8c 	bl	1a004508 <iprintf>
        		printf("Server -> Report: Total available stack size is %d\n",Report.DriverEndStack +Report.ServerEndStack+Report.Task1EndStack+Report.Task2EndStack);					// Report the total available stack
1a0005f0:	4b25      	ldr	r3, [pc, #148]	; (1a000688 <server+0x228>)
1a0005f2:	7a5a      	ldrb	r2, [r3, #9]
1a0005f4:	7a19      	ldrb	r1, [r3, #8]
1a0005f6:	4411      	add	r1, r2
1a0005f8:	7a9a      	ldrb	r2, [r3, #10]
1a0005fa:	440a      	add	r2, r1
1a0005fc:	7ad9      	ldrb	r1, [r3, #11]
1a0005fe:	4411      	add	r1, r2
1a000600:	4833      	ldr	r0, [pc, #204]	; (1a0006d0 <server+0x270>)
1a000602:	f003 ff81 	bl	1a004508 <iprintf>
        		break;

        	default:
        		break;
        }
    	vTaskGetInfo(ServHandle,&xTaskDetails,pdTRUE,eInvalid);							   // Get available information about the stack
1a000606:	4b1f      	ldr	r3, [pc, #124]	; (1a000684 <server+0x224>)
1a000608:	6818      	ldr	r0, [r3, #0]
1a00060a:	2305      	movs	r3, #5
1a00060c:	2201      	movs	r2, #1
1a00060e:	a911      	add	r1, sp, #68	; 0x44
1a000610:	f001 fe1a 	bl	1a002248 <vTaskGetInfo>
    	Report.ServerEndStack=(const)xTaskDetails.usStackHighWaterMark;					   //Set  entry for Server start stack of Report state machine and cast type it to read only
1a000614:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
1a000618:	b2db      	uxtb	r3, r3
1a00061a:	4c1b      	ldr	r4, [pc, #108]	; (1a000688 <server+0x228>)
1a00061c:	7223      	strb	r3, [r4, #8]
    	Report.ServerEndHeap=(const)xPortGetFreeHeapSize();								   //Set entry for Server start heap of Report state machine and cast type it to read only
1a00061e:	f000 fbdf 	bl	1a000de0 <xPortGetFreeHeapSize>
1a000622:	b2c0      	uxtb	r0, r0
1a000624:	7320      	strb	r0, [r4, #12]
    	if(!(xQueueReceive(MsgHandle,MsgFromDriver,1000))){                          									// Check if any message was received and store it in MsgFromDriver buffer, important QueueReceive clears buffer  when called again
1a000626:	4b2b      	ldr	r3, [pc, #172]	; (1a0006d4 <server+0x274>)
1a000628:	6818      	ldr	r0, [r3, #0]
1a00062a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00062e:	a903      	add	r1, sp, #12
1a000630:	f000 fe84 	bl	1a00133c <xQueueReceive>
1a000634:	2800      	cmp	r0, #0
1a000636:	f47f af3b 	bne.w	1a0004b0 <server+0x50>
    		uartWriteString(UART_USB,"Server <-Driver: No received\n");													// Error capture if message was not received
1a00063a:	4927      	ldr	r1, [pc, #156]	; (1a0006d8 <server+0x278>)
1a00063c:	2003      	movs	r0, #3
1a00063e:	f003 fb98 	bl	1a003d72 <uartWriteString>
        switch(*f)
1a000642:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a000646:	2931      	cmp	r1, #49	; 0x31
1a000648:	d087      	beq.n	1a00055a <server+0xfa>
1a00064a:	f63f af5d 	bhi.w	1a000508 <server+0xa8>
1a00064e:	b199      	cbz	r1, 1a000678 <server+0x218>
1a000650:	2930      	cmp	r1, #48	; 0x30
1a000652:	d1d8      	bne.n	1a000606 <server+0x1a6>
        		printf("Server-> Flag- %c\n",*f);																		// Report the operation flag is 0
1a000654:	4821      	ldr	r0, [pc, #132]	; (1a0006dc <server+0x27c>)
1a000656:	f003 ff57 	bl	1a004508 <iprintf>
        		if(!(xQueueSend(QeueMayusculizador,message.data,50))){													// Sending data to QeueMayusculizador in order to change letters to upper case
1a00065a:	4b21      	ldr	r3, [pc, #132]	; (1a0006e0 <server+0x280>)
1a00065c:	6818      	ldr	r0, [r3, #0]
1a00065e:	2300      	movs	r3, #0
1a000660:	2232      	movs	r2, #50	; 0x32
1a000662:	4915      	ldr	r1, [pc, #84]	; (1a0006b8 <server+0x258>)
1a000664:	f000 fd2e 	bl	1a0010c4 <xQueueGenericSend>
1a000668:	2800      	cmp	r0, #0
1a00066a:	f47f af60 	bne.w	1a00052e <server+0xce>
        			uartWriteString(UART_USB,"Server-> Task1: No sent\n");												// Report error if not sent
1a00066e:	491d      	ldr	r1, [pc, #116]	; (1a0006e4 <server+0x284>)
1a000670:	2003      	movs	r0, #3
1a000672:	f003 fb7e 	bl	1a003d72 <uartWriteString>
1a000676:	e7c6      	b.n	1a000606 <server+0x1a6>
        		uartWriteString(UART_USB,"Server -> Report: No Flag \n");				   //Error handle if operation flag is not available
1a000678:	491b      	ldr	r1, [pc, #108]	; (1a0006e8 <server+0x288>)
1a00067a:	2003      	movs	r0, #3
1a00067c:	f003 fb79 	bl	1a003d72 <uartWriteString>
        		break;
1a000680:	e7c1      	b.n	1a000606 <server+0x1a6>
1a000682:	bf00      	nop
1a000684:	10000310 	.word	0x10000310
1a000688:	10003b70 	.word	0x10003b70
1a00068c:	1a005598 	.word	0x1a005598
1a000690:	10003b84 	.word	0x10003b84
1a000694:	1a0056f0 	.word	0x1a0056f0
1a000698:	1a005710 	.word	0x1a005710
1a00069c:	1a0057ac 	.word	0x1a0057ac
1a0006a0:	1a005874 	.word	0x1a005874
1a0006a4:	10003b80 	.word	0x10003b80
1a0006a8:	10003c64 	.word	0x10003c64
1a0006ac:	1a00576c 	.word	0x1a00576c
1a0006b0:	1a00578c 	.word	0x1a00578c
1a0006b4:	10003b68 	.word	0x10003b68
1a0006b8:	10003b88 	.word	0x10003b88
1a0006bc:	1a0057c8 	.word	0x1a0057c8
1a0006c0:	1a0057e4 	.word	0x1a0057e4
1a0006c4:	10003d44 	.word	0x10003d44
1a0006c8:	1a005804 	.word	0x1a005804
1a0006cc:	1a005820 	.word	0x1a005820
1a0006d0:	1a005840 	.word	0x1a005840
1a0006d4:	10003d40 	.word	0x10003d40
1a0006d8:	1a0056d0 	.word	0x1a0056d0
1a0006dc:	1a00573c 	.word	0x1a00573c
1a0006e0:	10003b6c 	.word	0x10003b6c
1a0006e4:	1a005750 	.word	0x1a005750
1a0006e8:	1a0058a8 	.word	0x1a0058a8

1a0006ec <driver>:
    	//vPortFree(MsgToDriver);                                                          //Since data gets removed by it self after receiving, no need for free here
    }

}

void driver(void){
1a0006ec:	b530      	push	{r4, r5, lr}
1a0006ee:	b0a7      	sub	sp, #156	; 0x9c
																						    /* Inspect our own high water mark on entering the Server. */
	volatile TaskStatus_t xTaskDetails;														//This variable stores the information about the stack and if of type volatile since  it changes and should not optimized
	vTaskGetInfo(ServHandle,&xTaskDetails,pdTRUE,eInvalid);									//Get current stack size and save it in the variable declared above
1a0006f0:	4b40      	ldr	r3, [pc, #256]	; (1a0007f4 <driver+0x108>)
1a0006f2:	6818      	ldr	r0, [r3, #0]
1a0006f4:	2305      	movs	r3, #5
1a0006f6:	2201      	movs	r2, #1
1a0006f8:	a91d      	add	r1, sp, #116	; 0x74
1a0006fa:	f001 fda5 	bl	1a002248 <vTaskGetInfo>
	Report.DriverStartStack=(const)xTaskDetails.usStackHighWaterMark;                       // Set  DriverStartStack value of Report machine state and cast type it to read only
1a0006fe:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
1a000702:	b2db      	uxtb	r3, r3
1a000704:	4c3c      	ldr	r4, [pc, #240]	; (1a0007f8 <driver+0x10c>)
1a000706:	7063      	strb	r3, [r4, #1]
	Report.DriverStartHeap=(const)xPortGetFreeHeapSize();								    //Set DriverStartHeap value of Report machine state
1a000708:	f000 fb6a 	bl	1a000de0 <xPortGetFreeHeapSize>
1a00070c:	b2c0      	uxtb	r0, r0
1a00070e:	7160      	strb	r0, [r4, #5]

	char data_2Server[sizeof(AsciFrame)]="\0";												//Buffer to store data to be sent to Server
1a000710:	4b3a      	ldr	r3, [pc, #232]	; (1a0007fc <driver+0x110>)
1a000712:	881d      	ldrh	r5, [r3, #0]
1a000714:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
1a000718:	2435      	movs	r4, #53	; 0x35
1a00071a:	4622      	mov	r2, r4
1a00071c:	2100      	movs	r1, #0
1a00071e:	f10d 003e 	add.w	r0, sp, #62	; 0x3e
1a000722:	f003 fee8 	bl	1a0044f6 <memset>
	char data_FromServer[sizeof(AsciFrame)]="\0";											//Buffer to store data received from Server
1a000726:	f8ad 5004 	strh.w	r5, [sp, #4]
1a00072a:	4622      	mov	r2, r4
1a00072c:	2100      	movs	r1, #0
1a00072e:	f10d 0006 	add.w	r0, sp, #6
1a000732:	f003 fee0 	bl	1a0044f6 <memset>
	char op[2]="\0";																		// String to store the operation flag
	char SOF='{';																			// This  variable holds the Start Of Frame (SOF) to validate the frame
	char EnOF='}';																			//This variable holds the End Of Frame (EOF) used to validate the frame as well
																							// Initialize local variables
	ASCI(HexFrame,sizeof(HexFrame),AsciFrame);												//This function converts the data to ASCII readable characters
1a000736:	4c32      	ldr	r4, [pc, #200]	; (1a000800 <driver+0x114>)
1a000738:	4622      	mov	r2, r4
1a00073a:	216e      	movs	r1, #110	; 0x6e
1a00073c:	4831      	ldr	r0, [pc, #196]	; (1a000804 <driver+0x118>)
1a00073e:	f7ff fded 	bl	1a00031c <ASCI>
	printf("Driver-> Report: Frame received - %s \n",AsciFrame);							//Show received message from Server
1a000742:	4621      	mov	r1, r4
1a000744:	4830      	ldr	r0, [pc, #192]	; (1a000808 <driver+0x11c>)
1a000746:	f003 fedf 	bl	1a004508 <iprintf>
																						    //validate the AsciFrame format
	if(!((AsciFrame[0]==SOF) && (AsciFrame[sizeof(AsciFrame)-1]==EnOF))){					// Verify if either start of frame or end of frame is not valid
1a00074a:	7823      	ldrb	r3, [r4, #0]
1a00074c:	2b7b      	cmp	r3, #123	; 0x7b
1a00074e:	d103      	bne.n	1a000758 <driver+0x6c>
1a000750:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
1a000754:	2b7d      	cmp	r3, #125	; 0x7d
1a000756:	d004      	beq.n	1a000762 <driver+0x76>
		uartWriteString(UART_USB,"Driver-> Report: Invalid Frame \n");						// Error handle if any of the two is not valid
1a000758:	492c      	ldr	r1, [pc, #176]	; (1a00080c <driver+0x120>)
1a00075a:	2003      	movs	r0, #3
1a00075c:	f003 fb09 	bl	1a003d72 <uartWriteString>
1a000760:	e02b      	b.n	1a0007ba <driver+0xce>
		}else{
			uartWriteString(UART_USB,"Driver-> Report: Valid Frame \n");				    //Report valid if all good
1a000762:	492b      	ldr	r1, [pc, #172]	; (1a000810 <driver+0x124>)
1a000764:	2003      	movs	r0, #3
1a000766:	f003 fb04 	bl	1a003d72 <uartWriteString>
			if(!GetData(data_2Server,AsciFrame,sizeof(AsciFrame))){						    //GetData function removes the start and ending keys from the frame before sending to Server
1a00076a:	2237      	movs	r2, #55	; 0x37
1a00076c:	4924      	ldr	r1, [pc, #144]	; (1a000800 <driver+0x114>)
1a00076e:	a80f      	add	r0, sp, #60	; 0x3c
1a000770:	f7ff fdc6 	bl	1a000300 <GetData>
1a000774:	bb08      	cbnz	r0, 1a0007ba <driver+0xce>
				uartWriteString(UART_USB,"Driver <- GetData: Failed\N");				    // Error handle if GetData function did not work
1a000776:	4927      	ldr	r1, [pc, #156]	; (1a000814 <driver+0x128>)
1a000778:	2003      	movs	r0, #3
1a00077a:	f003 fafa 	bl	1a003d72 <uartWriteString>
1a00077e:	e01c      	b.n	1a0007ba <driver+0xce>
	while(1){

			if(!(xQueueSend(MsgHandle,data_2Server,1000))){								   //Sending data to Server via MsgHandle queue
				uartWriteString(UART_USB,"Driver-> Server: No sent\n");					   // Error handle if message was not sent
			}else{
				vTaskDelay(4000);
1a000780:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
1a000784:	f001 fb94 	bl	1a001eb0 <vTaskDelay>
1a000788:	e025      	b.n	1a0007d6 <driver+0xea>
			}
			if(!(xQueueReceive(MsgHandle_2,data_FromServer,1000))){						  //Check if any message is received from the Server from MsgHandle_2 queue
				uartWriteString(UART_USB,"Driver <- Server: No Received\n");			  //Error handle if nothing  received
			}else{
				uartWriteString(UART_USB,"Driver <- Server: Received\n");				  //Report received if successful
1a00078a:	4923      	ldr	r1, [pc, #140]	; (1a000818 <driver+0x12c>)
1a00078c:	2003      	movs	r0, #3
1a00078e:	f003 faf0 	bl	1a003d72 <uartWriteString>
				vTaskDelay(500);
1a000792:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000796:	f001 fb8b 	bl	1a001eb0 <vTaskDelay>

				}
			vTaskGetInfo(ServHandle,&xTaskDetails,pdTRUE,eInvalid);						  //Get current stack size information
1a00079a:	4b16      	ldr	r3, [pc, #88]	; (1a0007f4 <driver+0x108>)
1a00079c:	6818      	ldr	r0, [r3, #0]
1a00079e:	2305      	movs	r3, #5
1a0007a0:	2201      	movs	r2, #1
1a0007a2:	a91d      	add	r1, sp, #116	; 0x74
1a0007a4:	f001 fd50 	bl	1a002248 <vTaskGetInfo>
		    Report.DriverEndStack=(const)xTaskDetails.usStackHighWaterMark;				  //Set Driver entry for end stack size  of Report state machine and cast type it to read only
1a0007a8:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
1a0007ac:	b2db      	uxtb	r3, r3
1a0007ae:	4c12      	ldr	r4, [pc, #72]	; (1a0007f8 <driver+0x10c>)
1a0007b0:	7263      	strb	r3, [r4, #9]
		    Report.DriverEndHeap=(const)xPortGetFreeHeapSize();							  // Get current heap size  and set  Driver entry for end heap size of Report state machine
1a0007b2:	f000 fb15 	bl	1a000de0 <xPortGetFreeHeapSize>
1a0007b6:	b2c0      	uxtb	r0, r0
1a0007b8:	7360      	strb	r0, [r4, #13]
			if(!(xQueueSend(MsgHandle,data_2Server,1000))){								   //Sending data to Server via MsgHandle queue
1a0007ba:	4b18      	ldr	r3, [pc, #96]	; (1a00081c <driver+0x130>)
1a0007bc:	6818      	ldr	r0, [r3, #0]
1a0007be:	2300      	movs	r3, #0
1a0007c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0007c4:	a90f      	add	r1, sp, #60	; 0x3c
1a0007c6:	f000 fc7d 	bl	1a0010c4 <xQueueGenericSend>
1a0007ca:	2800      	cmp	r0, #0
1a0007cc:	d1d8      	bne.n	1a000780 <driver+0x94>
				uartWriteString(UART_USB,"Driver-> Server: No sent\n");					   // Error handle if message was not sent
1a0007ce:	4914      	ldr	r1, [pc, #80]	; (1a000820 <driver+0x134>)
1a0007d0:	2003      	movs	r0, #3
1a0007d2:	f003 face 	bl	1a003d72 <uartWriteString>
			if(!(xQueueReceive(MsgHandle_2,data_FromServer,1000))){						  //Check if any message is received from the Server from MsgHandle_2 queue
1a0007d6:	4b13      	ldr	r3, [pc, #76]	; (1a000824 <driver+0x138>)
1a0007d8:	6818      	ldr	r0, [r3, #0]
1a0007da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0007de:	a901      	add	r1, sp, #4
1a0007e0:	f000 fdac 	bl	1a00133c <xQueueReceive>
1a0007e4:	2800      	cmp	r0, #0
1a0007e6:	d1d0      	bne.n	1a00078a <driver+0x9e>
				uartWriteString(UART_USB,"Driver <- Server: No Received\n");			  //Error handle if nothing  received
1a0007e8:	490f      	ldr	r1, [pc, #60]	; (1a000828 <driver+0x13c>)
1a0007ea:	2003      	movs	r0, #3
1a0007ec:	f003 fac1 	bl	1a003d72 <uartWriteString>
1a0007f0:	e7d3      	b.n	1a00079a <driver+0xae>
1a0007f2:	bf00      	nop
1a0007f4:	10000310 	.word	0x10000310
1a0007f8:	10003b70 	.word	0x10003b70
1a0007fc:	1a005598 	.word	0x1a005598
1a000800:	10000000 	.word	0x10000000
1a000804:	10000038 	.word	0x10000038
1a000808:	1a0055d0 	.word	0x1a0055d0
1a00080c:	1a0055f8 	.word	0x1a0055f8
1a000810:	1a00561c 	.word	0x1a00561c
1a000814:	1a00563c 	.word	0x1a00563c
1a000818:	1a005694 	.word	0x1a005694
1a00081c:	10003d40 	.word	0x10003d40
1a000820:	1a005658 	.word	0x1a005658
1a000824:	10003d44 	.word	0x10003d44
1a000828:	1a005674 	.word	0x1a005674

1a00082c <task1>:
	}
}

																						  //This task converts the message letters to upper case
void task1(void){
1a00082c:	b500      	push	{lr}
1a00082e:	b099      	sub	sp, #100	; 0x64
	
																						  /* Inspect our own high water mark on entering the Server. */
		volatile TaskStatus_t xTaskDetails;												  //Variable to store current stack information
		vTaskGetInfo(ServHandle,&xTaskDetails,pdTRUE,eInvalid);							  // Get current stack size and store the variable declared above
1a000830:	4b37      	ldr	r3, [pc, #220]	; (1a000910 <task1+0xe4>)
1a000832:	6818      	ldr	r0, [r3, #0]
1a000834:	2305      	movs	r3, #5
1a000836:	2201      	movs	r2, #1
1a000838:	a90f      	add	r1, sp, #60	; 0x3c
1a00083a:	f001 fd05 	bl	1a002248 <vTaskGetInfo>
		Report.Task1StartStack=(const)xTaskDetails.usStackHighWaterMark;				  //Set task1 entry for staring stack size of  Report state machine and cast type to read only
1a00083e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
1a000842:	b2db      	uxtb	r3, r3
1a000844:	4c33      	ldr	r4, [pc, #204]	; (1a000914 <task1+0xe8>)
1a000846:	70a3      	strb	r3, [r4, #2]
		Report.Task1StartHeap=(const)xPortGetFreeHeapSize();							  //Set task1 entry  for starting heap size of Report state machine and cast type to read only
1a000848:	f000 faca 	bl	1a000de0 <xPortGetFreeHeapSize>
1a00084c:	b2c0      	uxtb	r0, r0
1a00084e:	71a0      	strb	r0, [r4, #6]
		char Task1Buffer[sizeof(AsciFrame)]="\0";										  //Declaring local buffer to store data to be  sent and received
1a000850:	4b31      	ldr	r3, [pc, #196]	; (1a000918 <task1+0xec>)
1a000852:	881b      	ldrh	r3, [r3, #0]
1a000854:	f8ad 3004 	strh.w	r3, [sp, #4]
1a000858:	2235      	movs	r2, #53	; 0x35
1a00085a:	2100      	movs	r1, #0
1a00085c:	f10d 0006 	add.w	r0, sp, #6
1a000860:	f003 fe49 	bl	1a0044f6 <memset>
1a000864:	e041      	b.n	1a0008ea <task1+0xbe>
		while(1){
			if(QeueMayusculizador !=0){													  //Verify if QeueMayusculizador was created
				if(!(xQueueReceive(QeueMayusculizador,Task1Buffer,1000))){				  // Check if anything was received from the queue
					uartWriteString(UART_USB," Task1 <- Server : No received\n");		  //Error handle if not
				}else
					if(!UperCase(Task1Buffer)){											  //Send message to UpperCase function to set letters to capital
1a000866:	a801      	add	r0, sp, #4
1a000868:	f7ff fde6 	bl	1a000438 <UperCase>
1a00086c:	b920      	cbnz	r0, 1a000878 <task1+0x4c>
						uartWriteString(UART_USB,"Task1 -> Report: No lower case\n");	  //Error handle if message was not sent
1a00086e:	492b      	ldr	r1, [pc, #172]	; (1a00091c <task1+0xf0>)
1a000870:	2003      	movs	r0, #3
1a000872:	f003 fa7e 	bl	1a003d72 <uartWriteString>
1a000876:	e024      	b.n	1a0008c2 <task1+0x96>
					}else{
						if(xSemaphoreTake(DataProcessed_key,1000)){						  //Check if key is available to send processed data to Server
1a000878:	4b29      	ldr	r3, [pc, #164]	; (1a000920 <task1+0xf4>)
1a00087a:	6818      	ldr	r0, [r3, #0]
1a00087c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a000880:	f000 fe08 	bl	1a001494 <xQueueSemaphoreTake>
1a000884:	b120      	cbz	r0, 1a000890 <task1+0x64>
							uartWriteString(UART_USB,"Task1 -> Server: No key\n");		  //Report if key is not available
1a000886:	4927      	ldr	r1, [pc, #156]	; (1a000924 <task1+0xf8>)
1a000888:	2003      	movs	r0, #3
1a00088a:	f003 fa72 	bl	1a003d72 <uartWriteString>
1a00088e:	e018      	b.n	1a0008c2 <task1+0x96>
						}else{
							if(!(xQueueSend(DataProcessed_handle,Task1Buffer,50))){		  //Send processed data if all good
1a000890:	4b25      	ldr	r3, [pc, #148]	; (1a000928 <task1+0xfc>)
1a000892:	6818      	ldr	r0, [r3, #0]
1a000894:	2300      	movs	r3, #0
1a000896:	2232      	movs	r2, #50	; 0x32
1a000898:	a901      	add	r1, sp, #4
1a00089a:	f000 fc13 	bl	1a0010c4 <xQueueGenericSend>
1a00089e:	b138      	cbz	r0, 1a0008b0 <task1+0x84>
								uartWriteString(UART_USB,"Task1-> Server: No sent \n");	  // Error handle if data was not sent
							}
							xSemaphoreGive(DataProcessed_key);							  //Release key after  sending message processed to Server
1a0008a0:	4b1f      	ldr	r3, [pc, #124]	; (1a000920 <task1+0xf4>)
1a0008a2:	6818      	ldr	r0, [r3, #0]
1a0008a4:	2300      	movs	r3, #0
1a0008a6:	461a      	mov	r2, r3
1a0008a8:	4619      	mov	r1, r3
1a0008aa:	f000 fc0b 	bl	1a0010c4 <xQueueGenericSend>
1a0008ae:	e008      	b.n	1a0008c2 <task1+0x96>
								uartWriteString(UART_USB,"Task1-> Server: No sent \n");	  // Error handle if data was not sent
1a0008b0:	491e      	ldr	r1, [pc, #120]	; (1a00092c <task1+0x100>)
1a0008b2:	2003      	movs	r0, #3
1a0008b4:	f003 fa5d 	bl	1a003d72 <uartWriteString>
1a0008b8:	e7f2      	b.n	1a0008a0 <task1+0x74>
						}
					}

			}else{
				EndTask(&Task1Handle,1);												  //End task if no handle was never created
1a0008ba:	2101      	movs	r1, #1
1a0008bc:	481c      	ldr	r0, [pc, #112]	; (1a000930 <task1+0x104>)
1a0008be:	f7ff fd97 	bl	1a0003f0 <EndTask>
			}
			vTaskGetInfo(ServHandle,&xTaskDetails,pdTRUE,eInvalid);						  //Get current task stack size
1a0008c2:	4b13      	ldr	r3, [pc, #76]	; (1a000910 <task1+0xe4>)
1a0008c4:	6818      	ldr	r0, [r3, #0]
1a0008c6:	2305      	movs	r3, #5
1a0008c8:	2201      	movs	r2, #1
1a0008ca:	a90f      	add	r1, sp, #60	; 0x3c
1a0008cc:	f001 fcbc 	bl	1a002248 <vTaskGetInfo>
			Report.Task1EndStack=(const)xTaskDetails.usStackHighWaterMark;				  //Set Task1  entry for end stack size of Report state machine and cast type it to  read only
1a0008d0:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
1a0008d4:	b2db      	uxtb	r3, r3
1a0008d6:	4c0f      	ldr	r4, [pc, #60]	; (1a000914 <task1+0xe8>)
1a0008d8:	72a3      	strb	r3, [r4, #10]
			Report.Task1EndHeap=(const)xPortGetFreeHeapSize();							  //Set Task1  entry for end heap size of Report state machine and cast type it to  read only
1a0008da:	f000 fa81 	bl	1a000de0 <xPortGetFreeHeapSize>
1a0008de:	b2c0      	uxtb	r0, r0
1a0008e0:	73a0      	strb	r0, [r4, #14]
			vTaskDelay(3000);
1a0008e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
1a0008e6:	f001 fae3 	bl	1a001eb0 <vTaskDelay>
			if(QeueMayusculizador !=0){													  //Verify if QeueMayusculizador was created
1a0008ea:	4b12      	ldr	r3, [pc, #72]	; (1a000934 <task1+0x108>)
1a0008ec:	681b      	ldr	r3, [r3, #0]
1a0008ee:	2b00      	cmp	r3, #0
1a0008f0:	d0e3      	beq.n	1a0008ba <task1+0x8e>
				if(!(xQueueReceive(QeueMayusculizador,Task1Buffer,1000))){				  // Check if anything was received from the queue
1a0008f2:	4b10      	ldr	r3, [pc, #64]	; (1a000934 <task1+0x108>)
1a0008f4:	6818      	ldr	r0, [r3, #0]
1a0008f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0008fa:	a901      	add	r1, sp, #4
1a0008fc:	f000 fd1e 	bl	1a00133c <xQueueReceive>
1a000900:	2800      	cmp	r0, #0
1a000902:	d1b0      	bne.n	1a000866 <task1+0x3a>
					uartWriteString(UART_USB," Task1 <- Server : No received\n");		  //Error handle if not
1a000904:	490c      	ldr	r1, [pc, #48]	; (1a000938 <task1+0x10c>)
1a000906:	2003      	movs	r0, #3
1a000908:	f003 fa33 	bl	1a003d72 <uartWriteString>
1a00090c:	e7d9      	b.n	1a0008c2 <task1+0x96>
1a00090e:	bf00      	nop
1a000910:	10000310 	.word	0x10000310
1a000914:	10003b70 	.word	0x10003b70
1a000918:	1a005598 	.word	0x1a005598
1a00091c:	1a0058e4 	.word	0x1a0058e4
1a000920:	10000308 	.word	0x10000308
1a000924:	1a005904 	.word	0x1a005904
1a000928:	10003b80 	.word	0x10003b80
1a00092c:	1a005920 	.word	0x1a005920
1a000930:	10000314 	.word	0x10000314
1a000934:	10003b6c 	.word	0x10003b6c
1a000938:	1a0058c4 	.word	0x1a0058c4

1a00093c <task2>:
		}
}
																						  //This function converts the message to lower case
void task2(void){
1a00093c:	b500      	push	{lr}
1a00093e:	b099      	sub	sp, #100	; 0x64
																						  /* Inspect our own high water mark on entering the Server. */
	volatile TaskStatus_t xTaskDetails;													  //Variable to store current stack information
	vTaskGetInfo(ServHandle,&xTaskDetails,pdTRUE,eInvalid);								  //Get current stack size and store the variable declared above;																																//Set task1 entry  for starting heap size of Report state machine and cast type to read only
1a000940:	4b37      	ldr	r3, [pc, #220]	; (1a000a20 <task2+0xe4>)
1a000942:	6818      	ldr	r0, [r3, #0]
1a000944:	2305      	movs	r3, #5
1a000946:	2201      	movs	r2, #1
1a000948:	a90f      	add	r1, sp, #60	; 0x3c
1a00094a:	f001 fc7d 	bl	1a002248 <vTaskGetInfo>
	Report.Task2StartStack=(const)xTaskDetails.usStackHighWaterMark;					  //Set task2 entry for staring stack size of  Report state machine and cast type to read only
1a00094e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
1a000952:	b2db      	uxtb	r3, r3
1a000954:	4c33      	ldr	r4, [pc, #204]	; (1a000a24 <task2+0xe8>)
1a000956:	70e3      	strb	r3, [r4, #3]
	Report.Task2StartHeap=(const)xPortGetFreeHeapSize();								  //Set task2 entry for staring heap size of  Report state machine and cast type to read only
1a000958:	f000 fa42 	bl	1a000de0 <xPortGetFreeHeapSize>
1a00095c:	b2c0      	uxtb	r0, r0
1a00095e:	71e0      	strb	r0, [r4, #7]
	char Task2Buffer[sizeof(AsciFrame)]="\0";											  //Declaring local buffer to store data to be  sent and received
1a000960:	4b31      	ldr	r3, [pc, #196]	; (1a000a28 <task2+0xec>)
1a000962:	881b      	ldrh	r3, [r3, #0]
1a000964:	f8ad 3004 	strh.w	r3, [sp, #4]
1a000968:	2235      	movs	r2, #53	; 0x35
1a00096a:	2100      	movs	r1, #0
1a00096c:	f10d 0006 	add.w	r0, sp, #6
1a000970:	f003 fdc1 	bl	1a0044f6 <memset>
1a000974:	e041      	b.n	1a0009fa <task2+0xbe>
	while(1){
		if(QeueMinusculizador !=0){														 //Verify if QeueMinusculizador was created
			if(!(xQueueReceive(QeueMinusculizador,Task2Buffer,2000))){					 // Check if anything was received from the queue
				uartWriteString(UART_USB," Task2 <- Server : No received\n");			 //Error handle if not
			}else
				if(!LwrCase(Task2Buffer)){  											 //convert message letters to lower case and check if if it was successful
1a000976:	a801      	add	r0, sp, #4
1a000978:	f7ff fd68 	bl	1a00044c <LwrCase>
1a00097c:	b920      	cbnz	r0, 1a000988 <task2+0x4c>
					uartWriteString(UART_USB,"Task2 -> Report: No lower case\n");		 //Error handle if conversion did not happen
1a00097e:	492b      	ldr	r1, [pc, #172]	; (1a000a2c <task2+0xf0>)
1a000980:	2003      	movs	r0, #3
1a000982:	f003 f9f6 	bl	1a003d72 <uartWriteString>
1a000986:	e024      	b.n	1a0009d2 <task2+0x96>
				}else{
					if(xSemaphoreTake(DataProcessed_key,1000)){							 //Check if key is available to access queue
1a000988:	4b29      	ldr	r3, [pc, #164]	; (1a000a30 <task2+0xf4>)
1a00098a:	6818      	ldr	r0, [r3, #0]
1a00098c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a000990:	f000 fd80 	bl	1a001494 <xQueueSemaphoreTake>
1a000994:	b120      	cbz	r0, 1a0009a0 <task2+0x64>
						uartWriteString(UART_USB,"Task2 -> Server: No key\n");			 //Error handle if key was not available
1a000996:	4927      	ldr	r1, [pc, #156]	; (1a000a34 <task2+0xf8>)
1a000998:	2003      	movs	r0, #3
1a00099a:	f003 f9ea 	bl	1a003d72 <uartWriteString>
1a00099e:	e018      	b.n	1a0009d2 <task2+0x96>
					}else{
						if(!(xQueueSend(DataProcessed_handle,Task2Buffer,50))){			 //Check if message was sent
1a0009a0:	4b25      	ldr	r3, [pc, #148]	; (1a000a38 <task2+0xfc>)
1a0009a2:	6818      	ldr	r0, [r3, #0]
1a0009a4:	2300      	movs	r3, #0
1a0009a6:	2232      	movs	r2, #50	; 0x32
1a0009a8:	a901      	add	r1, sp, #4
1a0009aa:	f000 fb8b 	bl	1a0010c4 <xQueueGenericSend>
1a0009ae:	b138      	cbz	r0, 1a0009c0 <task2+0x84>
							uartWriteString(UART_USB,"Task2-> Server: No sent \n");		 //Error handle if message was not sent
						}
						xSemaphoreGive(DataProcessed_key);								 //Release semaphore  key
1a0009b0:	4b1f      	ldr	r3, [pc, #124]	; (1a000a30 <task2+0xf4>)
1a0009b2:	6818      	ldr	r0, [r3, #0]
1a0009b4:	2300      	movs	r3, #0
1a0009b6:	461a      	mov	r2, r3
1a0009b8:	4619      	mov	r1, r3
1a0009ba:	f000 fb83 	bl	1a0010c4 <xQueueGenericSend>
1a0009be:	e008      	b.n	1a0009d2 <task2+0x96>
							uartWriteString(UART_USB,"Task2-> Server: No sent \n");		 //Error handle if message was not sent
1a0009c0:	491e      	ldr	r1, [pc, #120]	; (1a000a3c <task2+0x100>)
1a0009c2:	2003      	movs	r0, #3
1a0009c4:	f003 f9d5 	bl	1a003d72 <uartWriteString>
1a0009c8:	e7f2      	b.n	1a0009b0 <task2+0x74>
					}
				}

		}else{
			EndTask(&Task2Handle,2);													 //End task if handler was never created
1a0009ca:	2102      	movs	r1, #2
1a0009cc:	481c      	ldr	r0, [pc, #112]	; (1a000a40 <task2+0x104>)
1a0009ce:	f7ff fd0f 	bl	1a0003f0 <EndTask>
		}
		vTaskGetInfo(ServHandle,&xTaskDetails,pdTRUE,eInvalid);							 //Get current task stack size
1a0009d2:	4b13      	ldr	r3, [pc, #76]	; (1a000a20 <task2+0xe4>)
1a0009d4:	6818      	ldr	r0, [r3, #0]
1a0009d6:	2305      	movs	r3, #5
1a0009d8:	2201      	movs	r2, #1
1a0009da:	a90f      	add	r1, sp, #60	; 0x3c
1a0009dc:	f001 fc34 	bl	1a002248 <vTaskGetInfo>
		Report.Task2EndStack=(const)xTaskDetails.usStackHighWaterMark;					 //Set task2 entry for End stack size of  Report state machine and cast type to read only
1a0009e0:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
1a0009e4:	b2db      	uxtb	r3, r3
1a0009e6:	4c0f      	ldr	r4, [pc, #60]	; (1a000a24 <task2+0xe8>)
1a0009e8:	72e3      	strb	r3, [r4, #11]
		Report.Task2EndHeap=(const)xPortGetFreeHeapSize();							     //Set task2 entry for End stack size of  Report state machine and cast type to read only
1a0009ea:	f000 f9f9 	bl	1a000de0 <xPortGetFreeHeapSize>
1a0009ee:	b2c0      	uxtb	r0, r0
1a0009f0:	73e0      	strb	r0, [r4, #15]
		vTaskDelay(3000);
1a0009f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
1a0009f6:	f001 fa5b 	bl	1a001eb0 <vTaskDelay>
		if(QeueMinusculizador !=0){														 //Verify if QeueMinusculizador was created
1a0009fa:	4b12      	ldr	r3, [pc, #72]	; (1a000a44 <task2+0x108>)
1a0009fc:	681b      	ldr	r3, [r3, #0]
1a0009fe:	2b00      	cmp	r3, #0
1a000a00:	d0e3      	beq.n	1a0009ca <task2+0x8e>
			if(!(xQueueReceive(QeueMinusculizador,Task2Buffer,2000))){					 // Check if anything was received from the queue
1a000a02:	4b10      	ldr	r3, [pc, #64]	; (1a000a44 <task2+0x108>)
1a000a04:	6818      	ldr	r0, [r3, #0]
1a000a06:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
1a000a0a:	a901      	add	r1, sp, #4
1a000a0c:	f000 fc96 	bl	1a00133c <xQueueReceive>
1a000a10:	2800      	cmp	r0, #0
1a000a12:	d1b0      	bne.n	1a000976 <task2+0x3a>
				uartWriteString(UART_USB," Task2 <- Server : No received\n");			 //Error handle if not
1a000a14:	490c      	ldr	r1, [pc, #48]	; (1a000a48 <task2+0x10c>)
1a000a16:	2003      	movs	r0, #3
1a000a18:	f003 f9ab 	bl	1a003d72 <uartWriteString>
1a000a1c:	e7d9      	b.n	1a0009d2 <task2+0x96>
1a000a1e:	bf00      	nop
1a000a20:	10000310 	.word	0x10000310
1a000a24:	10003b70 	.word	0x10003b70
1a000a28:	1a005598 	.word	0x1a005598
1a000a2c:	1a00595c 	.word	0x1a00595c
1a000a30:	10000308 	.word	0x10000308
1a000a34:	1a00597c 	.word	0x1a00597c
1a000a38:	10003b80 	.word	0x10003b80
1a000a3c:	1a005998 	.word	0x1a005998
1a000a40:	10000318 	.word	0x10000318
1a000a44:	10003b68 	.word	0x10003b68
1a000a48:	1a00593c 	.word	0x1a00593c

1a000a4c <main>:
/*==================[External function declaration ]====================*/

/*==================[Principal function ]======================================*/
																					      // Principal function that runs after reseting or starting up
int main(void)
{
1a000a4c:	b530      	push	{r4, r5, lr}
1a000a4e:	b083      	sub	sp, #12

   boardConfig();																		  //Configure the board
1a000a50:	f003 fade 	bl	1a004010 <boardInit>
   uart_config(9600,0);           														  //This function sets the baud rate and turns on uart interruption
1a000a54:	2100      	movs	r1, #0
1a000a56:	f44f 5016 	mov.w	r0, #9600	; 0x2580
1a000a5a:	f7ff fc58 	bl	1a00030e <uart_config>
   QeueMayusculizador =xQueueCreate(1, sizeof(AsciFrame));								  //Create a queue and assign to QeueMayusculizador handler
1a000a5e:	2200      	movs	r2, #0
1a000a60:	2137      	movs	r1, #55	; 0x37
1a000a62:	2001      	movs	r0, #1
1a000a64:	f000 fb07 	bl	1a001076 <xQueueGenericCreate>
1a000a68:	4b2d      	ldr	r3, [pc, #180]	; (1a000b20 <main+0xd4>)
1a000a6a:	6018      	str	r0, [r3, #0]
   QeueMinusculizador =xQueueCreate(1, sizeof(AsciFrame));								  //Create a queue and assign to QeueMinusculizador handler
1a000a6c:	2200      	movs	r2, #0
1a000a6e:	2137      	movs	r1, #55	; 0x37
1a000a70:	2001      	movs	r0, #1
1a000a72:	f000 fb00 	bl	1a001076 <xQueueGenericCreate>
1a000a76:	4b2b      	ldr	r3, [pc, #172]	; (1a000b24 <main+0xd8>)
1a000a78:	6018      	str	r0, [r3, #0]
   MsgHandle =xQueueCreate(1, sizeof(AsciFrame));										  // Create a queue and assign to MsgHandle to it
1a000a7a:	2200      	movs	r2, #0
1a000a7c:	2137      	movs	r1, #55	; 0x37
1a000a7e:	2001      	movs	r0, #1
1a000a80:	f000 faf9 	bl	1a001076 <xQueueGenericCreate>
1a000a84:	4b28      	ldr	r3, [pc, #160]	; (1a000b28 <main+0xdc>)
1a000a86:	6018      	str	r0, [r3, #0]
   MsgHandle_2=xQueueCreate(1, sizeof(AsciFrame));
1a000a88:	2200      	movs	r2, #0
1a000a8a:	2137      	movs	r1, #55	; 0x37
1a000a8c:	2001      	movs	r0, #1
1a000a8e:	f000 faf2 	bl	1a001076 <xQueueGenericCreate>
1a000a92:	4b26      	ldr	r3, [pc, #152]	; (1a000b2c <main+0xe0>)
1a000a94:	6018      	str	r0, [r3, #0]
   DataProcessed_handle =xQueueCreate(1, sizeof(AsciFrame));							  // Create a queue and assign DataProcessed_handle to it
1a000a96:	2200      	movs	r2, #0
1a000a98:	2137      	movs	r1, #55	; 0x37
1a000a9a:	2001      	movs	r0, #1
1a000a9c:	f000 faeb 	bl	1a001076 <xQueueGenericCreate>
1a000aa0:	4b23      	ldr	r3, [pc, #140]	; (1a000b30 <main+0xe4>)
1a000aa2:	6018      	str	r0, [r3, #0]
   DataProcessed_key=xSemaphoreCreateMutex();											  // Create a mutex and assign  DataProcessed_key to it
1a000aa4:	2001      	movs	r0, #1
1a000aa6:	f000 fbd7 	bl	1a001258 <xQueueCreateMutex>
1a000aaa:	4b22      	ldr	r3, [pc, #136]	; (1a000b34 <main+0xe8>)
1a000aac:	6018      	str	r0, [r3, #0]
   uartInterrupt(UART_USB, true);														  //Enable USB interrupt
1a000aae:	2101      	movs	r1, #1
1a000ab0:	2003      	movs	r0, #3
1a000ab2:	f003 f86f 	bl	1a003b94 <uartInterrupt>
   uartCallbackSet(UART_USB, UART_RECEIVE, driver, NULL);                                 //Specify the task and when interrupt happens and the interrupt type
1a000ab6:	4c20      	ldr	r4, [pc, #128]	; (1a000b38 <main+0xec>)
1a000ab8:	2300      	movs	r3, #0
1a000aba:	4622      	mov	r2, r4
1a000abc:	4619      	mov	r1, r3
1a000abe:	2003      	movs	r0, #3
1a000ac0:	f003 f8b0 	bl	1a003c24 <uartCallbackSet>
#ifdef DRIVER_1
   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	  // Create Driver task
   xTaskCreate(
1a000ac4:	4b1d      	ldr	r3, [pc, #116]	; (1a000b3c <main+0xf0>)
1a000ac6:	681b      	ldr	r3, [r3, #0]
1a000ac8:	9301      	str	r3, [sp, #4]
1a000aca:	2302      	movs	r3, #2
1a000acc:	9300      	str	r3, [sp, #0]
1a000ace:	2300      	movs	r3, #0
1a000ad0:	22b4      	movs	r2, #180	; 0xb4
1a000ad2:	491b      	ldr	r1, [pc, #108]	; (1a000b40 <main+0xf4>)
1a000ad4:	4620      	mov	r0, r4
1a000ad6:	f001 f81a 	bl	1a001b0e <xTaskCreate>
#endif DRIVER_1


#ifdef SERVER_1
   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	 // Create the Server task
   xTaskCreate(
1a000ada:	2400      	movs	r4, #0
1a000adc:	9401      	str	r4, [sp, #4]
1a000ade:	2501      	movs	r5, #1
1a000ae0:	9500      	str	r5, [sp, #0]
1a000ae2:	4623      	mov	r3, r4
1a000ae4:	22b4      	movs	r2, #180	; 0xb4
1a000ae6:	4917      	ldr	r1, [pc, #92]	; (1a000b44 <main+0xf8>)
1a000ae8:	4817      	ldr	r0, [pc, #92]	; (1a000b48 <main+0xfc>)
1a000aea:	f001 f810 	bl	1a001b0e <xTaskCreate>

#endif SERVER_1

#ifdef TASK1_1
   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	 // Create Task1
   xTaskCreate(
1a000aee:	4b17      	ldr	r3, [pc, #92]	; (1a000b4c <main+0x100>)
1a000af0:	681b      	ldr	r3, [r3, #0]
1a000af2:	9301      	str	r3, [sp, #4]
1a000af4:	9500      	str	r5, [sp, #0]
1a000af6:	4623      	mov	r3, r4
1a000af8:	22b4      	movs	r2, #180	; 0xb4
1a000afa:	4915      	ldr	r1, [pc, #84]	; (1a000b50 <main+0x104>)
1a000afc:	4815      	ldr	r0, [pc, #84]	; (1a000b54 <main+0x108>)
1a000afe:	f001 f806 	bl	1a001b0e <xTaskCreate>
   );
#endif

#ifdef TASK2_1
   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	   	  // Create Task2
   xTaskCreate(
1a000b02:	4b15      	ldr	r3, [pc, #84]	; (1a000b58 <main+0x10c>)
1a000b04:	681b      	ldr	r3, [r3, #0]
1a000b06:	9301      	str	r3, [sp, #4]
1a000b08:	9500      	str	r5, [sp, #0]
1a000b0a:	4623      	mov	r3, r4
1a000b0c:	22b4      	movs	r2, #180	; 0xb4
1a000b0e:	4913      	ldr	r1, [pc, #76]	; (1a000b5c <main+0x110>)
1a000b10:	4813      	ldr	r0, [pc, #76]	; (1a000b60 <main+0x114>)
1a000b12:	f000 fffc 	bl	1a001b0e <xTaskCreate>
      0,                          													     // Task parameters
      tskIDLE_PRIORITY+1,         														 // Task priority
      Task2Handle                  														 // Pointer to the task handler
   );
 #endif
   vTaskStartScheduler();
1a000b16:	f001 f86d 	bl	1a001bf4 <vTaskStartScheduler>

}
1a000b1a:	4620      	mov	r0, r4
1a000b1c:	b003      	add	sp, #12
1a000b1e:	bd30      	pop	{r4, r5, pc}
1a000b20:	10003b6c 	.word	0x10003b6c
1a000b24:	10003b68 	.word	0x10003b68
1a000b28:	10003d40 	.word	0x10003d40
1a000b2c:	10003d44 	.word	0x10003d44
1a000b30:	10003b80 	.word	0x10003b80
1a000b34:	10000308 	.word	0x10000308
1a000b38:	1a0006ed 	.word	0x1a0006ed
1a000b3c:	1000030c 	.word	0x1000030c
1a000b40:	1a0056b0 	.word	0x1a0056b0
1a000b44:	1a0056b8 	.word	0x1a0056b8
1a000b48:	1a000461 	.word	0x1a000461
1a000b4c:	10000314 	.word	0x10000314
1a000b50:	1a0056c0 	.word	0x1a0056c0
1a000b54:	1a00082d 	.word	0x1a00082d
1a000b58:	10000318 	.word	0x10000318
1a000b5c:	1a0056c8 	.word	0x1a0056c8
1a000b60:	1a00093d 	.word	0x1a00093d

1a000b64 <initialise_monitor_handles>:
}
1a000b64:	4770      	bx	lr
1a000b66:	Address 0x000000001a000b66 is out of bounds.


1a000b68 <Reset_Handler>:
void Reset_Handler(void) {
1a000b68:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000b6a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000b6c:	4b19      	ldr	r3, [pc, #100]	; (1a000bd4 <Reset_Handler+0x6c>)
1a000b6e:	4a1a      	ldr	r2, [pc, #104]	; (1a000bd8 <Reset_Handler+0x70>)
1a000b70:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000b72:	3304      	adds	r3, #4
1a000b74:	4a19      	ldr	r2, [pc, #100]	; (1a000bdc <Reset_Handler+0x74>)
1a000b76:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000b78:	2300      	movs	r3, #0
1a000b7a:	e005      	b.n	1a000b88 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000b7c:	4a18      	ldr	r2, [pc, #96]	; (1a000be0 <Reset_Handler+0x78>)
1a000b7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000b82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000b86:	3301      	adds	r3, #1
1a000b88:	2b07      	cmp	r3, #7
1a000b8a:	d9f7      	bls.n	1a000b7c <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000b8c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000b8e:	4b15      	ldr	r3, [pc, #84]	; (1a000be4 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000b90:	e007      	b.n	1a000ba2 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000b92:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000b96:	689a      	ldr	r2, [r3, #8]
1a000b98:	6859      	ldr	r1, [r3, #4]
1a000b9a:	6818      	ldr	r0, [r3, #0]
1a000b9c:	f7ff faf5 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000ba0:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000ba2:	4a11      	ldr	r2, [pc, #68]	; (1a000be8 <Reset_Handler+0x80>)
1a000ba4:	4293      	cmp	r3, r2
1a000ba6:	d3f4      	bcc.n	1a000b92 <Reset_Handler+0x2a>
1a000ba8:	e006      	b.n	1a000bb8 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000baa:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000bac:	6859      	ldr	r1, [r3, #4]
1a000bae:	f854 0b08 	ldr.w	r0, [r4], #8
1a000bb2:	f7ff faf9 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000bb6:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000bb8:	4a0c      	ldr	r2, [pc, #48]	; (1a000bec <Reset_Handler+0x84>)
1a000bba:	4293      	cmp	r3, r2
1a000bbc:	d3f5      	bcc.n	1a000baa <Reset_Handler+0x42>
    SystemInit();
1a000bbe:	f002 ff6d 	bl	1a003a9c <SystemInit>
    __libc_init_array();
1a000bc2:	f003 fc69 	bl	1a004498 <__libc_init_array>
    initialise_monitor_handles();
1a000bc6:	f7ff ffcd 	bl	1a000b64 <initialise_monitor_handles>
    main();
1a000bca:	f7ff ff3f 	bl	1a000a4c <main>
        __asm__ volatile("wfi");
1a000bce:	bf30      	wfi
1a000bd0:	e7fd      	b.n	1a000bce <Reset_Handler+0x66>
1a000bd2:	bf00      	nop
1a000bd4:	40053100 	.word	0x40053100
1a000bd8:	10df1000 	.word	0x10df1000
1a000bdc:	01dff7ff 	.word	0x01dff7ff
1a000be0:	e000e280 	.word	0xe000e280
1a000be4:	1a000114 	.word	0x1a000114
1a000be8:	1a000150 	.word	0x1a000150
1a000bec:	1a000178 	.word	0x1a000178

1a000bf0 <_fini>:
void _fini(void) {}
1a000bf0:	4770      	bx	lr

1a000bf2 <_init>:
void _init(void) {}
1a000bf2:	4770      	bx	lr

1a000bf4 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000bf4:	2309      	movs	r3, #9
1a000bf6:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000bfc:	4770      	bx	lr

1a000bfe <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000bfe:	2358      	movs	r3, #88	; 0x58
1a000c00:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c06:	4770      	bx	lr

1a000c08 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000c08:	2902      	cmp	r1, #2
1a000c0a:	d801      	bhi.n	1a000c10 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000c0c:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000c0e:	4770      	bx	lr
       SET_ERR(EBADF);
1a000c10:	2309      	movs	r3, #9
1a000c12:	6003      	str	r3, [r0, #0]
       return -1;
1a000c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c18:	4770      	bx	lr

1a000c1a <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000c1a:	2358      	movs	r3, #88	; 0x58
1a000c1c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c22:	4770      	bx	lr

1a000c24 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000c24:	2902      	cmp	r1, #2
1a000c26:	d81f      	bhi.n	1a000c68 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000c2c:	461d      	mov	r5, r3
1a000c2e:	4617      	mov	r7, r2
1a000c30:	4606      	mov	r6, r0
  size_t i = 0;
1a000c32:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000c34:	42ac      	cmp	r4, r5
1a000c36:	d211      	bcs.n	1a000c5c <_read_r+0x38>
         int c = __stdio_getchar();
1a000c38:	f002 f981 	bl	1a002f3e <__stdio_getchar>
         if( c != -1 ){
1a000c3c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000c40:	d0f8      	beq.n	1a000c34 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000c42:	f104 0801 	add.w	r8, r4, #1
1a000c46:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000c48:	280d      	cmp	r0, #13
1a000c4a:	d003      	beq.n	1a000c54 <_read_r+0x30>
1a000c4c:	280a      	cmp	r0, #10
1a000c4e:	d001      	beq.n	1a000c54 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000c50:	4644      	mov	r4, r8
1a000c52:	e7ef      	b.n	1a000c34 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000c54:	f002 f973 	bl	1a002f3e <__stdio_getchar>
               return i;
1a000c58:	4640      	mov	r0, r8
1a000c5a:	e003      	b.n	1a000c64 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000c5c:	2313      	movs	r3, #19
1a000c5e:	6033      	str	r3, [r6, #0]
      return -1;
1a000c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000c68:	2313      	movs	r3, #19
1a000c6a:	6003      	str	r3, [r0, #0]
      return -1;
1a000c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000c70:	4770      	bx	lr

1a000c72 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000c72:	2902      	cmp	r1, #2
1a000c74:	d80c      	bhi.n	1a000c90 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000c76:	b570      	push	{r4, r5, r6, lr}
1a000c78:	461d      	mov	r5, r3
1a000c7a:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000c7c:	2400      	movs	r4, #0
1a000c7e:	e003      	b.n	1a000c88 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a000c80:	5d30      	ldrb	r0, [r6, r4]
1a000c82:	f002 f957 	bl	1a002f34 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000c86:	3401      	adds	r4, #1
1a000c88:	42ac      	cmp	r4, r5
1a000c8a:	d3f9      	bcc.n	1a000c80 <_write_r+0xe>
       return n;
1a000c8c:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000c8e:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000c90:	2313      	movs	r3, #19
1a000c92:	6003      	str	r3, [r0, #0]
       return -1;
1a000c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000c98:	4770      	bx	lr
1a000c9a:	Address 0x000000001a000c9a is out of bounds.


1a000c9c <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000c9c:	4b05      	ldr	r3, [pc, #20]	; (1a000cb4 <_sbrk_r+0x18>)
1a000c9e:	681b      	ldr	r3, [r3, #0]
1a000ca0:	b123      	cbz	r3, 1a000cac <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000ca2:	4b04      	ldr	r3, [pc, #16]	; (1a000cb4 <_sbrk_r+0x18>)
1a000ca4:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000ca6:	4401      	add	r1, r0
1a000ca8:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000caa:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000cac:	4b01      	ldr	r3, [pc, #4]	; (1a000cb4 <_sbrk_r+0x18>)
1a000cae:	4a02      	ldr	r2, [pc, #8]	; (1a000cb8 <_sbrk_r+0x1c>)
1a000cb0:	601a      	str	r2, [r3, #0]
1a000cb2:	e7f6      	b.n	1a000ca2 <_sbrk_r+0x6>
1a000cb4:	1000031c 	.word	0x1000031c
1a000cb8:	10003d90 	.word	0x10003d90

1a000cbc <prvHeapInit>:
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a000cbc:	4b07      	ldr	r3, [pc, #28]	; (1a000cdc <prvHeapInit+0x20>)
1a000cbe:	f023 0307 	bic.w	r3, r3, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a000cc2:	4a07      	ldr	r2, [pc, #28]	; (1a000ce0 <prvHeapInit+0x24>)
1a000cc4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a000cc6:	2000      	movs	r0, #0
1a000cc8:	6050      	str	r0, [r2, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
1a000cca:	4a06      	ldr	r2, [pc, #24]	; (1a000ce4 <prvHeapInit+0x28>)
1a000ccc:	f242 71f8 	movw	r1, #10232	; 0x27f8
1a000cd0:	6051      	str	r1, [r2, #4]
	xEnd.pxNextFreeBlock = NULL;
1a000cd2:	6010      	str	r0, [r2, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
1a000cd4:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
1a000cd6:	601a      	str	r2, [r3, #0]
}
1a000cd8:	4770      	bx	lr
1a000cda:	bf00      	nop
1a000cdc:	10000328 	.word	0x10000328
1a000ce0:	10002b2c 	.word	0x10002b2c
1a000ce4:	10002b20 	.word	0x10002b20

1a000ce8 <pvPortMalloc>:
{
1a000ce8:	b570      	push	{r4, r5, r6, lr}
1a000cea:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a000cec:	f000 ffcc 	bl	1a001c88 <vTaskSuspendAll>
		if( xHeapHasBeenInitialised == pdFALSE )
1a000cf0:	4b26      	ldr	r3, [pc, #152]	; (1a000d8c <pvPortMalloc+0xa4>)
1a000cf2:	681b      	ldr	r3, [r3, #0]
1a000cf4:	b17b      	cbz	r3, 1a000d16 <pvPortMalloc+0x2e>
		if( xWantedSize > 0 )
1a000cf6:	b134      	cbz	r4, 1a000d06 <pvPortMalloc+0x1e>
			xWantedSize += heapSTRUCT_SIZE;
1a000cf8:	3408      	adds	r4, #8
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
1a000cfa:	f014 0f07 	tst.w	r4, #7
1a000cfe:	d002      	beq.n	1a000d06 <pvPortMalloc+0x1e>
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000d00:	f024 0407 	bic.w	r4, r4, #7
1a000d04:	3408      	adds	r4, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
1a000d06:	1e62      	subs	r2, r4, #1
1a000d08:	f242 73f6 	movw	r3, #10230	; 0x27f6
1a000d0c:	429a      	cmp	r2, r3
1a000d0e:	d808      	bhi.n	1a000d22 <pvPortMalloc+0x3a>
			pxBlock = xStart.pxNextFreeBlock;
1a000d10:	491f      	ldr	r1, [pc, #124]	; (1a000d90 <pvPortMalloc+0xa8>)
1a000d12:	680b      	ldr	r3, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000d14:	e00e      	b.n	1a000d34 <pvPortMalloc+0x4c>
			prvHeapInit();
1a000d16:	f7ff ffd1 	bl	1a000cbc <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
1a000d1a:	4b1c      	ldr	r3, [pc, #112]	; (1a000d8c <pvPortMalloc+0xa4>)
1a000d1c:	2201      	movs	r2, #1
1a000d1e:	601a      	str	r2, [r3, #0]
1a000d20:	e7e9      	b.n	1a000cf6 <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
1a000d22:	f001 f84b 	bl	1a001dbc <xTaskResumeAll>
void *pvReturn = NULL;
1a000d26:	2500      	movs	r5, #0
			vApplicationMallocFailedHook();
1a000d28:	f000 fd21 	bl	1a00176e <vApplicationMallocFailedHook>
}
1a000d2c:	4628      	mov	r0, r5
1a000d2e:	bd70      	pop	{r4, r5, r6, pc}
				pxPreviousBlock = pxBlock;
1a000d30:	4619      	mov	r1, r3
				pxBlock = pxBlock->pxNextFreeBlock;
1a000d32:	4613      	mov	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000d34:	685a      	ldr	r2, [r3, #4]
1a000d36:	42a2      	cmp	r2, r4
1a000d38:	d202      	bcs.n	1a000d40 <pvPortMalloc+0x58>
1a000d3a:	681a      	ldr	r2, [r3, #0]
1a000d3c:	2a00      	cmp	r2, #0
1a000d3e:	d1f7      	bne.n	1a000d30 <pvPortMalloc+0x48>
			if( pxBlock != &xEnd )
1a000d40:	4a14      	ldr	r2, [pc, #80]	; (1a000d94 <pvPortMalloc+0xac>)
1a000d42:	4293      	cmp	r3, r2
1a000d44:	d00d      	beq.n	1a000d62 <pvPortMalloc+0x7a>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
1a000d46:	680d      	ldr	r5, [r1, #0]
1a000d48:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a000d4a:	681a      	ldr	r2, [r3, #0]
1a000d4c:	600a      	str	r2, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a000d4e:	685a      	ldr	r2, [r3, #4]
1a000d50:	1b12      	subs	r2, r2, r4
1a000d52:	2a10      	cmp	r2, #16
1a000d54:	d910      	bls.n	1a000d78 <pvPortMalloc+0x90>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a000d56:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a000d58:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
1a000d5a:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
1a000d5c:	6874      	ldr	r4, [r6, #4]
1a000d5e:	490c      	ldr	r1, [pc, #48]	; (1a000d90 <pvPortMalloc+0xa8>)
1a000d60:	e004      	b.n	1a000d6c <pvPortMalloc+0x84>
	( void ) xTaskResumeAll();
1a000d62:	f001 f82b 	bl	1a001dbc <xTaskResumeAll>
void *pvReturn = NULL;
1a000d66:	2500      	movs	r5, #0
1a000d68:	e7de      	b.n	1a000d28 <pvPortMalloc+0x40>
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
1a000d6a:	4611      	mov	r1, r2
1a000d6c:	680a      	ldr	r2, [r1, #0]
1a000d6e:	6850      	ldr	r0, [r2, #4]
1a000d70:	42a0      	cmp	r0, r4
1a000d72:	d3fa      	bcc.n	1a000d6a <pvPortMalloc+0x82>
1a000d74:	6032      	str	r2, [r6, #0]
1a000d76:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
1a000d78:	6859      	ldr	r1, [r3, #4]
1a000d7a:	4a07      	ldr	r2, [pc, #28]	; (1a000d98 <pvPortMalloc+0xb0>)
1a000d7c:	6813      	ldr	r3, [r2, #0]
1a000d7e:	1a5b      	subs	r3, r3, r1
1a000d80:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
1a000d82:	f001 f81b 	bl	1a001dbc <xTaskResumeAll>
		if( pvReturn == NULL )
1a000d86:	2d00      	cmp	r5, #0
1a000d88:	d1d0      	bne.n	1a000d2c <pvPortMalloc+0x44>
1a000d8a:	e7cd      	b.n	1a000d28 <pvPortMalloc+0x40>
1a000d8c:	10002b28 	.word	0x10002b28
1a000d90:	10002b2c 	.word	0x10002b2c
1a000d94:	10002b20 	.word	0x10002b20
1a000d98:	100000a8 	.word	0x100000a8

1a000d9c <vPortFree>:
	if( pv != NULL )
1a000d9c:	b1d0      	cbz	r0, 1a000dd4 <vPortFree+0x38>
{
1a000d9e:	b538      	push	{r3, r4, r5, lr}
1a000da0:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;
1a000da2:	f1a0 0508 	sub.w	r5, r0, #8
		vTaskSuspendAll();
1a000da6:	f000 ff6f 	bl	1a001c88 <vTaskSuspendAll>
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000daa:	f854 0c04 	ldr.w	r0, [r4, #-4]
1a000dae:	4a0a      	ldr	r2, [pc, #40]	; (1a000dd8 <vPortFree+0x3c>)
1a000db0:	e000      	b.n	1a000db4 <vPortFree+0x18>
1a000db2:	461a      	mov	r2, r3
1a000db4:	6813      	ldr	r3, [r2, #0]
1a000db6:	6859      	ldr	r1, [r3, #4]
1a000db8:	4281      	cmp	r1, r0
1a000dba:	d3fa      	bcc.n	1a000db2 <vPortFree+0x16>
1a000dbc:	f844 3c08 	str.w	r3, [r4, #-8]
1a000dc0:	6015      	str	r5, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
1a000dc2:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000dc6:	4a05      	ldr	r2, [pc, #20]	; (1a000ddc <vPortFree+0x40>)
1a000dc8:	6813      	ldr	r3, [r2, #0]
1a000dca:	440b      	add	r3, r1
1a000dcc:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
1a000dce:	f000 fff5 	bl	1a001dbc <xTaskResumeAll>
}
1a000dd2:	bd38      	pop	{r3, r4, r5, pc}
1a000dd4:	4770      	bx	lr
1a000dd6:	bf00      	nop
1a000dd8:	10002b2c 	.word	0x10002b2c
1a000ddc:	100000a8 	.word	0x100000a8

1a000de0 <xPortGetFreeHeapSize>:
}
1a000de0:	4b01      	ldr	r3, [pc, #4]	; (1a000de8 <xPortGetFreeHeapSize+0x8>)
1a000de2:	6818      	ldr	r0, [r3, #0]
1a000de4:	4770      	bx	lr
1a000de6:	bf00      	nop
1a000de8:	100000a8 	.word	0x100000a8

1a000dec <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a000dec:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000dee:	b123      	cbz	r3, 1a000dfa <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a000df0:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000df2:	6818      	ldr	r0, [r3, #0]
1a000df4:	f1c0 0007 	rsb	r0, r0, #7
1a000df8:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a000dfa:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a000dfc:	4770      	bx	lr

1a000dfe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000dfe:	b510      	push	{r4, lr}
1a000e00:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000e02:	f001 fe57 	bl	1a002ab4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000e06:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000e08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000e0a:	429a      	cmp	r2, r3
1a000e0c:	d004      	beq.n	1a000e18 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000e0e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000e10:	f001 fe72 	bl	1a002af8 <vPortExitCritical>

	return xReturn;
}
1a000e14:	4620      	mov	r0, r4
1a000e16:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000e18:	2401      	movs	r4, #1
1a000e1a:	e7f9      	b.n	1a000e10 <prvIsQueueFull+0x12>

1a000e1c <prvIsQueueEmpty>:
{
1a000e1c:	b510      	push	{r4, lr}
1a000e1e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000e20:	f001 fe48 	bl	1a002ab4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000e24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000e26:	b123      	cbz	r3, 1a000e32 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a000e28:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a000e2a:	f001 fe65 	bl	1a002af8 <vPortExitCritical>
}
1a000e2e:	4620      	mov	r0, r4
1a000e30:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000e32:	2401      	movs	r4, #1
1a000e34:	e7f9      	b.n	1a000e2a <prvIsQueueEmpty+0xe>

1a000e36 <prvCopyDataToQueue>:
{
1a000e36:	b570      	push	{r4, r5, r6, lr}
1a000e38:	4604      	mov	r4, r0
1a000e3a:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000e3c:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000e3e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000e40:	b95a      	cbnz	r2, 1a000e5a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000e42:	6803      	ldr	r3, [r0, #0]
1a000e44:	b11b      	cbz	r3, 1a000e4e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000e46:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000e48:	3501      	adds	r5, #1
1a000e4a:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000e4c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000e4e:	6840      	ldr	r0, [r0, #4]
1a000e50:	f001 faa2 	bl	1a002398 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000e54:	2300      	movs	r3, #0
1a000e56:	6063      	str	r3, [r4, #4]
1a000e58:	e7f6      	b.n	1a000e48 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000e5a:	b96e      	cbnz	r6, 1a000e78 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000e5c:	6880      	ldr	r0, [r0, #8]
1a000e5e:	f003 fb3f 	bl	1a0044e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000e62:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000e64:	68a3      	ldr	r3, [r4, #8]
1a000e66:	4413      	add	r3, r2
1a000e68:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000e6a:	6862      	ldr	r2, [r4, #4]
1a000e6c:	4293      	cmp	r3, r2
1a000e6e:	d319      	bcc.n	1a000ea4 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000e70:	6823      	ldr	r3, [r4, #0]
1a000e72:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000e74:	2000      	movs	r0, #0
1a000e76:	e7e7      	b.n	1a000e48 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000e78:	68c0      	ldr	r0, [r0, #12]
1a000e7a:	f003 fb31 	bl	1a0044e0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000e7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000e80:	4252      	negs	r2, r2
1a000e82:	68e3      	ldr	r3, [r4, #12]
1a000e84:	4413      	add	r3, r2
1a000e86:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000e88:	6821      	ldr	r1, [r4, #0]
1a000e8a:	428b      	cmp	r3, r1
1a000e8c:	d202      	bcs.n	1a000e94 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000e8e:	6863      	ldr	r3, [r4, #4]
1a000e90:	441a      	add	r2, r3
1a000e92:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000e94:	2e02      	cmp	r6, #2
1a000e96:	d001      	beq.n	1a000e9c <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a000e98:	2000      	movs	r0, #0
1a000e9a:	e7d5      	b.n	1a000e48 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000e9c:	b125      	cbz	r5, 1a000ea8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000e9e:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000ea0:	2000      	movs	r0, #0
1a000ea2:	e7d1      	b.n	1a000e48 <prvCopyDataToQueue+0x12>
1a000ea4:	2000      	movs	r0, #0
1a000ea6:	e7cf      	b.n	1a000e48 <prvCopyDataToQueue+0x12>
1a000ea8:	2000      	movs	r0, #0
1a000eaa:	e7cd      	b.n	1a000e48 <prvCopyDataToQueue+0x12>

1a000eac <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000eac:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000eae:	b172      	cbz	r2, 1a000ece <prvCopyDataFromQueue+0x22>
{
1a000eb0:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000eb2:	68c3      	ldr	r3, [r0, #12]
1a000eb4:	4413      	add	r3, r2
1a000eb6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000eb8:	6844      	ldr	r4, [r0, #4]
1a000eba:	42a3      	cmp	r3, r4
1a000ebc:	d301      	bcc.n	1a000ec2 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000ebe:	6803      	ldr	r3, [r0, #0]
1a000ec0:	60c3      	str	r3, [r0, #12]
1a000ec2:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000ec4:	68c1      	ldr	r1, [r0, #12]
1a000ec6:	4620      	mov	r0, r4
1a000ec8:	f003 fb0a 	bl	1a0044e0 <memcpy>
}
1a000ecc:	bd10      	pop	{r4, pc}
1a000ece:	4770      	bx	lr

1a000ed0 <prvUnlockQueue>:
{
1a000ed0:	b538      	push	{r3, r4, r5, lr}
1a000ed2:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000ed4:	f001 fdee 	bl	1a002ab4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000ed8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000edc:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000ede:	e003      	b.n	1a000ee8 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000ee0:	f001 f9ac 	bl	1a00223c <vTaskMissedYield>
			--cTxLock;
1a000ee4:	3c01      	subs	r4, #1
1a000ee6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000ee8:	2c00      	cmp	r4, #0
1a000eea:	dd08      	ble.n	1a000efe <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000eec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000eee:	b133      	cbz	r3, 1a000efe <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000ef0:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000ef4:	f001 f910 	bl	1a002118 <xTaskRemoveFromEventList>
1a000ef8:	2800      	cmp	r0, #0
1a000efa:	d0f3      	beq.n	1a000ee4 <prvUnlockQueue+0x14>
1a000efc:	e7f0      	b.n	1a000ee0 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000efe:	23ff      	movs	r3, #255	; 0xff
1a000f00:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a000f04:	f001 fdf8 	bl	1a002af8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000f08:	f001 fdd4 	bl	1a002ab4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000f0c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000f10:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000f12:	e003      	b.n	1a000f1c <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a000f14:	f001 f992 	bl	1a00223c <vTaskMissedYield>
				--cRxLock;
1a000f18:	3c01      	subs	r4, #1
1a000f1a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000f1c:	2c00      	cmp	r4, #0
1a000f1e:	dd08      	ble.n	1a000f32 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000f20:	692b      	ldr	r3, [r5, #16]
1a000f22:	b133      	cbz	r3, 1a000f32 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000f24:	f105 0010 	add.w	r0, r5, #16
1a000f28:	f001 f8f6 	bl	1a002118 <xTaskRemoveFromEventList>
1a000f2c:	2800      	cmp	r0, #0
1a000f2e:	d0f3      	beq.n	1a000f18 <prvUnlockQueue+0x48>
1a000f30:	e7f0      	b.n	1a000f14 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000f32:	23ff      	movs	r3, #255	; 0xff
1a000f34:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000f38:	f001 fdde 	bl	1a002af8 <vPortExitCritical>
}
1a000f3c:	bd38      	pop	{r3, r4, r5, pc}
1a000f3e:	Address 0x000000001a000f3e is out of bounds.


1a000f40 <xQueueGenericReset>:
{
1a000f40:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000f42:	b940      	cbnz	r0, 1a000f56 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000f44:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f48:	f383 8811 	msr	BASEPRI, r3
1a000f4c:	f3bf 8f6f 	isb	sy
1a000f50:	f3bf 8f4f 	dsb	sy
1a000f54:	e7fe      	b.n	1a000f54 <xQueueGenericReset+0x14>
1a000f56:	4604      	mov	r4, r0
1a000f58:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000f5a:	f001 fdab 	bl	1a002ab4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000f5e:	6821      	ldr	r1, [r4, #0]
1a000f60:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000f64:	fb03 1002 	mla	r0, r3, r2, r1
1a000f68:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000f6a:	2000      	movs	r0, #0
1a000f6c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000f6e:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000f70:	3a01      	subs	r2, #1
1a000f72:	fb02 1303 	mla	r3, r2, r3, r1
1a000f76:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000f78:	23ff      	movs	r3, #255	; 0xff
1a000f7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000f7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000f82:	b9a5      	cbnz	r5, 1a000fae <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000f84:	6923      	ldr	r3, [r4, #16]
1a000f86:	b91b      	cbnz	r3, 1a000f90 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a000f88:	f001 fdb6 	bl	1a002af8 <vPortExitCritical>
}
1a000f8c:	2001      	movs	r0, #1
1a000f8e:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000f90:	f104 0010 	add.w	r0, r4, #16
1a000f94:	f001 f8c0 	bl	1a002118 <xTaskRemoveFromEventList>
1a000f98:	2800      	cmp	r0, #0
1a000f9a:	d0f5      	beq.n	1a000f88 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a000f9c:	4b08      	ldr	r3, [pc, #32]	; (1a000fc0 <xQueueGenericReset+0x80>)
1a000f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000fa2:	601a      	str	r2, [r3, #0]
1a000fa4:	f3bf 8f4f 	dsb	sy
1a000fa8:	f3bf 8f6f 	isb	sy
1a000fac:	e7ec      	b.n	1a000f88 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000fae:	f104 0010 	add.w	r0, r4, #16
1a000fb2:	f000 fb7a 	bl	1a0016aa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000fb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000fba:	f000 fb76 	bl	1a0016aa <vListInitialise>
1a000fbe:	e7e3      	b.n	1a000f88 <xQueueGenericReset+0x48>
1a000fc0:	e000ed04 	.word	0xe000ed04

1a000fc4 <prvInitialiseNewQueue>:
{
1a000fc4:	b538      	push	{r3, r4, r5, lr}
1a000fc6:	461d      	mov	r5, r3
1a000fc8:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a000fca:	460b      	mov	r3, r1
1a000fcc:	b149      	cbz	r1, 1a000fe2 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000fce:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000fd0:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000fd2:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000fd4:	2101      	movs	r1, #1
1a000fd6:	4620      	mov	r0, r4
1a000fd8:	f7ff ffb2 	bl	1a000f40 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000fdc:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000fe0:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000fe2:	6024      	str	r4, [r4, #0]
1a000fe4:	e7f4      	b.n	1a000fd0 <prvInitialiseNewQueue+0xc>

1a000fe6 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000fe6:	b940      	cbnz	r0, 1a000ffa <xQueueGenericCreateStatic+0x14>
1a000fe8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fec:	f383 8811 	msr	BASEPRI, r3
1a000ff0:	f3bf 8f6f 	isb	sy
1a000ff4:	f3bf 8f4f 	dsb	sy
1a000ff8:	e7fe      	b.n	1a000ff8 <xQueueGenericCreateStatic+0x12>
	{
1a000ffa:	b510      	push	{r4, lr}
1a000ffc:	b084      	sub	sp, #16
1a000ffe:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a001000:	b153      	cbz	r3, 1a001018 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a001002:	b192      	cbz	r2, 1a00102a <xQueueGenericCreateStatic+0x44>
1a001004:	b989      	cbnz	r1, 1a00102a <xQueueGenericCreateStatic+0x44>
1a001006:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00100a:	f383 8811 	msr	BASEPRI, r3
1a00100e:	f3bf 8f6f 	isb	sy
1a001012:	f3bf 8f4f 	dsb	sy
1a001016:	e7fe      	b.n	1a001016 <xQueueGenericCreateStatic+0x30>
1a001018:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00101c:	f383 8811 	msr	BASEPRI, r3
1a001020:	f3bf 8f6f 	isb	sy
1a001024:	f3bf 8f4f 	dsb	sy
1a001028:	e7fe      	b.n	1a001028 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a00102a:	b94a      	cbnz	r2, 1a001040 <xQueueGenericCreateStatic+0x5a>
1a00102c:	b141      	cbz	r1, 1a001040 <xQueueGenericCreateStatic+0x5a>
1a00102e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001032:	f383 8811 	msr	BASEPRI, r3
1a001036:	f3bf 8f6f 	isb	sy
1a00103a:	f3bf 8f4f 	dsb	sy
1a00103e:	e7fe      	b.n	1a00103e <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a001040:	2050      	movs	r0, #80	; 0x50
1a001042:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a001044:	9803      	ldr	r0, [sp, #12]
1a001046:	2850      	cmp	r0, #80	; 0x50
1a001048:	d008      	beq.n	1a00105c <xQueueGenericCreateStatic+0x76>
1a00104a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00104e:	f383 8811 	msr	BASEPRI, r3
1a001052:	f3bf 8f6f 	isb	sy
1a001056:	f3bf 8f4f 	dsb	sy
1a00105a:	e7fe      	b.n	1a00105a <xQueueGenericCreateStatic+0x74>
1a00105c:	4620      	mov	r0, r4
1a00105e:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a001060:	2301      	movs	r3, #1
1a001062:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a001066:	9400      	str	r4, [sp, #0]
1a001068:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a00106c:	f7ff ffaa 	bl	1a000fc4 <prvInitialiseNewQueue>
	}
1a001070:	4620      	mov	r0, r4
1a001072:	b004      	add	sp, #16
1a001074:	bd10      	pop	{r4, pc}

1a001076 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a001076:	b940      	cbnz	r0, 1a00108a <xQueueGenericCreate+0x14>
1a001078:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00107c:	f383 8811 	msr	BASEPRI, r3
1a001080:	f3bf 8f6f 	isb	sy
1a001084:	f3bf 8f4f 	dsb	sy
1a001088:	e7fe      	b.n	1a001088 <xQueueGenericCreate+0x12>
	{
1a00108a:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00108c:	b083      	sub	sp, #12
1a00108e:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a001090:	b111      	cbz	r1, 1a001098 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001092:	fb01 f000 	mul.w	r0, r1, r0
1a001096:	e000      	b.n	1a00109a <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a001098:	2000      	movs	r0, #0
1a00109a:	4617      	mov	r7, r2
1a00109c:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a00109e:	3050      	adds	r0, #80	; 0x50
1a0010a0:	f7ff fe22 	bl	1a000ce8 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a0010a4:	4605      	mov	r5, r0
1a0010a6:	b150      	cbz	r0, 1a0010be <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a0010a8:	2300      	movs	r3, #0
1a0010aa:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0010ae:	9000      	str	r0, [sp, #0]
1a0010b0:	463b      	mov	r3, r7
1a0010b2:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a0010b6:	4621      	mov	r1, r4
1a0010b8:	4630      	mov	r0, r6
1a0010ba:	f7ff ff83 	bl	1a000fc4 <prvInitialiseNewQueue>
	}
1a0010be:	4628      	mov	r0, r5
1a0010c0:	b003      	add	sp, #12
1a0010c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a0010c4 <xQueueGenericSend>:
{
1a0010c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0010c6:	b085      	sub	sp, #20
1a0010c8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a0010ca:	b160      	cbz	r0, 1a0010e6 <xQueueGenericSend+0x22>
1a0010cc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0010ce:	b999      	cbnz	r1, 1a0010f8 <xQueueGenericSend+0x34>
1a0010d0:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0010d2:	b18a      	cbz	r2, 1a0010f8 <xQueueGenericSend+0x34>
1a0010d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010d8:	f383 8811 	msr	BASEPRI, r3
1a0010dc:	f3bf 8f6f 	isb	sy
1a0010e0:	f3bf 8f4f 	dsb	sy
1a0010e4:	e7fe      	b.n	1a0010e4 <xQueueGenericSend+0x20>
1a0010e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010ea:	f383 8811 	msr	BASEPRI, r3
1a0010ee:	f3bf 8f6f 	isb	sy
1a0010f2:	f3bf 8f4f 	dsb	sy
1a0010f6:	e7fe      	b.n	1a0010f6 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0010f8:	2b02      	cmp	r3, #2
1a0010fa:	d10b      	bne.n	1a001114 <xQueueGenericSend+0x50>
1a0010fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0010fe:	2a01      	cmp	r2, #1
1a001100:	d008      	beq.n	1a001114 <xQueueGenericSend+0x50>
1a001102:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001106:	f383 8811 	msr	BASEPRI, r3
1a00110a:	f3bf 8f6f 	isb	sy
1a00110e:	f3bf 8f4f 	dsb	sy
1a001112:	e7fe      	b.n	1a001112 <xQueueGenericSend+0x4e>
1a001114:	461e      	mov	r6, r3
1a001116:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001118:	f001 f8d2 	bl	1a0022c0 <xTaskGetSchedulerState>
1a00111c:	b950      	cbnz	r0, 1a001134 <xQueueGenericSend+0x70>
1a00111e:	9b01      	ldr	r3, [sp, #4]
1a001120:	b153      	cbz	r3, 1a001138 <xQueueGenericSend+0x74>
1a001122:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001126:	f383 8811 	msr	BASEPRI, r3
1a00112a:	f3bf 8f6f 	isb	sy
1a00112e:	f3bf 8f4f 	dsb	sy
1a001132:	e7fe      	b.n	1a001132 <xQueueGenericSend+0x6e>
1a001134:	2500      	movs	r5, #0
1a001136:	e03a      	b.n	1a0011ae <xQueueGenericSend+0xea>
1a001138:	2500      	movs	r5, #0
1a00113a:	e038      	b.n	1a0011ae <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a00113c:	4632      	mov	r2, r6
1a00113e:	4639      	mov	r1, r7
1a001140:	4620      	mov	r0, r4
1a001142:	f7ff fe78 	bl	1a000e36 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001146:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001148:	b94b      	cbnz	r3, 1a00115e <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a00114a:	b1a8      	cbz	r0, 1a001178 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a00114c:	4b3b      	ldr	r3, [pc, #236]	; (1a00123c <xQueueGenericSend+0x178>)
1a00114e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001152:	601a      	str	r2, [r3, #0]
1a001154:	f3bf 8f4f 	dsb	sy
1a001158:	f3bf 8f6f 	isb	sy
1a00115c:	e00c      	b.n	1a001178 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00115e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001162:	f000 ffd9 	bl	1a002118 <xTaskRemoveFromEventList>
1a001166:	b138      	cbz	r0, 1a001178 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a001168:	4b34      	ldr	r3, [pc, #208]	; (1a00123c <xQueueGenericSend+0x178>)
1a00116a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00116e:	601a      	str	r2, [r3, #0]
1a001170:	f3bf 8f4f 	dsb	sy
1a001174:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a001178:	f001 fcbe 	bl	1a002af8 <vPortExitCritical>
				return pdPASS;
1a00117c:	2001      	movs	r0, #1
}
1a00117e:	b005      	add	sp, #20
1a001180:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a001182:	f001 fcb9 	bl	1a002af8 <vPortExitCritical>
					return errQUEUE_FULL;
1a001186:	2000      	movs	r0, #0
1a001188:	e7f9      	b.n	1a00117e <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00118a:	a802      	add	r0, sp, #8
1a00118c:	f001 f80a 	bl	1a0021a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001190:	2501      	movs	r5, #1
1a001192:	e019      	b.n	1a0011c8 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a001194:	2300      	movs	r3, #0
1a001196:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00119a:	e021      	b.n	1a0011e0 <xQueueGenericSend+0x11c>
1a00119c:	2300      	movs	r3, #0
1a00119e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0011a2:	e023      	b.n	1a0011ec <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a0011a4:	4620      	mov	r0, r4
1a0011a6:	f7ff fe93 	bl	1a000ed0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0011aa:	f000 fe07 	bl	1a001dbc <xTaskResumeAll>
		taskENTER_CRITICAL();
1a0011ae:	f001 fc81 	bl	1a002ab4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a0011b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0011b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0011b6:	429a      	cmp	r2, r3
1a0011b8:	d3c0      	bcc.n	1a00113c <xQueueGenericSend+0x78>
1a0011ba:	2e02      	cmp	r6, #2
1a0011bc:	d0be      	beq.n	1a00113c <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0011be:	9b01      	ldr	r3, [sp, #4]
1a0011c0:	2b00      	cmp	r3, #0
1a0011c2:	d0de      	beq.n	1a001182 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a0011c4:	2d00      	cmp	r5, #0
1a0011c6:	d0e0      	beq.n	1a00118a <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a0011c8:	f001 fc96 	bl	1a002af8 <vPortExitCritical>
		vTaskSuspendAll();
1a0011cc:	f000 fd5c 	bl	1a001c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0011d0:	f001 fc70 	bl	1a002ab4 <vPortEnterCritical>
1a0011d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0011d8:	b25b      	sxtb	r3, r3
1a0011da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0011de:	d0d9      	beq.n	1a001194 <xQueueGenericSend+0xd0>
1a0011e0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0011e4:	b25b      	sxtb	r3, r3
1a0011e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0011ea:	d0d7      	beq.n	1a00119c <xQueueGenericSend+0xd8>
1a0011ec:	f001 fc84 	bl	1a002af8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0011f0:	a901      	add	r1, sp, #4
1a0011f2:	a802      	add	r0, sp, #8
1a0011f4:	f000 ffe2 	bl	1a0021bc <xTaskCheckForTimeOut>
1a0011f8:	b9c8      	cbnz	r0, 1a00122e <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a0011fa:	4620      	mov	r0, r4
1a0011fc:	f7ff fdff 	bl	1a000dfe <prvIsQueueFull>
1a001200:	2800      	cmp	r0, #0
1a001202:	d0cf      	beq.n	1a0011a4 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001204:	9901      	ldr	r1, [sp, #4]
1a001206:	f104 0010 	add.w	r0, r4, #16
1a00120a:	f000 ff51 	bl	1a0020b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00120e:	4620      	mov	r0, r4
1a001210:	f7ff fe5e 	bl	1a000ed0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001214:	f000 fdd2 	bl	1a001dbc <xTaskResumeAll>
1a001218:	2800      	cmp	r0, #0
1a00121a:	d1c8      	bne.n	1a0011ae <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a00121c:	4b07      	ldr	r3, [pc, #28]	; (1a00123c <xQueueGenericSend+0x178>)
1a00121e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001222:	601a      	str	r2, [r3, #0]
1a001224:	f3bf 8f4f 	dsb	sy
1a001228:	f3bf 8f6f 	isb	sy
1a00122c:	e7bf      	b.n	1a0011ae <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a00122e:	4620      	mov	r0, r4
1a001230:	f7ff fe4e 	bl	1a000ed0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001234:	f000 fdc2 	bl	1a001dbc <xTaskResumeAll>
			return errQUEUE_FULL;
1a001238:	2000      	movs	r0, #0
1a00123a:	e7a0      	b.n	1a00117e <xQueueGenericSend+0xba>
1a00123c:	e000ed04 	.word	0xe000ed04

1a001240 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
1a001240:	b148      	cbz	r0, 1a001256 <prvInitialiseMutex+0x16>
	{
1a001242:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
1a001244:	2100      	movs	r1, #0
1a001246:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
1a001248:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
1a00124a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
1a00124c:	460b      	mov	r3, r1
1a00124e:	460a      	mov	r2, r1
1a001250:	f7ff ff38 	bl	1a0010c4 <xQueueGenericSend>
	}
1a001254:	bd08      	pop	{r3, pc}
1a001256:	4770      	bx	lr

1a001258 <xQueueCreateMutex>:
	{
1a001258:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
1a00125a:	4602      	mov	r2, r0
1a00125c:	2100      	movs	r1, #0
1a00125e:	2001      	movs	r0, #1
1a001260:	f7ff ff09 	bl	1a001076 <xQueueGenericCreate>
1a001264:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
1a001266:	f7ff ffeb 	bl	1a001240 <prvInitialiseMutex>
	}
1a00126a:	4620      	mov	r0, r4
1a00126c:	bd10      	pop	{r4, pc}

1a00126e <xQueueGenericSendFromISR>:
{
1a00126e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a001272:	b160      	cbz	r0, 1a00128e <xQueueGenericSendFromISR+0x20>
1a001274:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001276:	b999      	cbnz	r1, 1a0012a0 <xQueueGenericSendFromISR+0x32>
1a001278:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a00127a:	b188      	cbz	r0, 1a0012a0 <xQueueGenericSendFromISR+0x32>
1a00127c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001280:	f383 8811 	msr	BASEPRI, r3
1a001284:	f3bf 8f6f 	isb	sy
1a001288:	f3bf 8f4f 	dsb	sy
1a00128c:	e7fe      	b.n	1a00128c <xQueueGenericSendFromISR+0x1e>
1a00128e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001292:	f383 8811 	msr	BASEPRI, r3
1a001296:	f3bf 8f6f 	isb	sy
1a00129a:	f3bf 8f4f 	dsb	sy
1a00129e:	e7fe      	b.n	1a00129e <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0012a0:	2b02      	cmp	r3, #2
1a0012a2:	d10b      	bne.n	1a0012bc <xQueueGenericSendFromISR+0x4e>
1a0012a4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a0012a6:	2801      	cmp	r0, #1
1a0012a8:	d008      	beq.n	1a0012bc <xQueueGenericSendFromISR+0x4e>
1a0012aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012ae:	f383 8811 	msr	BASEPRI, r3
1a0012b2:	f3bf 8f6f 	isb	sy
1a0012b6:	f3bf 8f4f 	dsb	sy
1a0012ba:	e7fe      	b.n	1a0012ba <xQueueGenericSendFromISR+0x4c>
1a0012bc:	461f      	mov	r7, r3
1a0012be:	4690      	mov	r8, r2
1a0012c0:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0012c2:	f001 fd21 	bl	1a002d08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a0012c6:	f3ef 8611 	mrs	r6, BASEPRI
1a0012ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012ce:	f383 8811 	msr	BASEPRI, r3
1a0012d2:	f3bf 8f6f 	isb	sy
1a0012d6:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a0012da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0012dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0012de:	429a      	cmp	r2, r3
1a0012e0:	d303      	bcc.n	1a0012ea <xQueueGenericSendFromISR+0x7c>
1a0012e2:	2f02      	cmp	r7, #2
1a0012e4:	d001      	beq.n	1a0012ea <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a0012e6:	2000      	movs	r0, #0
1a0012e8:	e00f      	b.n	1a00130a <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a0012ea:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a0012ee:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0012f0:	463a      	mov	r2, r7
1a0012f2:	4649      	mov	r1, r9
1a0012f4:	4620      	mov	r0, r4
1a0012f6:	f7ff fd9e 	bl	1a000e36 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a0012fa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0012fe:	d008      	beq.n	1a001312 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001300:	1c6b      	adds	r3, r5, #1
1a001302:	b25b      	sxtb	r3, r3
1a001304:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001308:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a00130a:	f386 8811 	msr	BASEPRI, r6
}
1a00130e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001312:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001314:	b15b      	cbz	r3, 1a00132e <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001316:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00131a:	f000 fefd 	bl	1a002118 <xTaskRemoveFromEventList>
1a00131e:	b140      	cbz	r0, 1a001332 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a001320:	f1b8 0f00 	cmp.w	r8, #0
1a001324:	d007      	beq.n	1a001336 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001326:	2001      	movs	r0, #1
1a001328:	f8c8 0000 	str.w	r0, [r8]
1a00132c:	e7ed      	b.n	1a00130a <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a00132e:	2001      	movs	r0, #1
1a001330:	e7eb      	b.n	1a00130a <xQueueGenericSendFromISR+0x9c>
1a001332:	2001      	movs	r0, #1
1a001334:	e7e9      	b.n	1a00130a <xQueueGenericSendFromISR+0x9c>
1a001336:	2001      	movs	r0, #1
1a001338:	e7e7      	b.n	1a00130a <xQueueGenericSendFromISR+0x9c>
1a00133a:	Address 0x000000001a00133a is out of bounds.


1a00133c <xQueueReceive>:
{
1a00133c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00133e:	b085      	sub	sp, #20
1a001340:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001342:	b160      	cbz	r0, 1a00135e <xQueueReceive+0x22>
1a001344:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001346:	b999      	cbnz	r1, 1a001370 <xQueueReceive+0x34>
1a001348:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a00134a:	b18b      	cbz	r3, 1a001370 <xQueueReceive+0x34>
	__asm volatile
1a00134c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001350:	f383 8811 	msr	BASEPRI, r3
1a001354:	f3bf 8f6f 	isb	sy
1a001358:	f3bf 8f4f 	dsb	sy
1a00135c:	e7fe      	b.n	1a00135c <xQueueReceive+0x20>
1a00135e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001362:	f383 8811 	msr	BASEPRI, r3
1a001366:	f3bf 8f6f 	isb	sy
1a00136a:	f3bf 8f4f 	dsb	sy
1a00136e:	e7fe      	b.n	1a00136e <xQueueReceive+0x32>
1a001370:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001372:	f000 ffa5 	bl	1a0022c0 <xTaskGetSchedulerState>
1a001376:	b950      	cbnz	r0, 1a00138e <xQueueReceive+0x52>
1a001378:	9b01      	ldr	r3, [sp, #4]
1a00137a:	b153      	cbz	r3, 1a001392 <xQueueReceive+0x56>
1a00137c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001380:	f383 8811 	msr	BASEPRI, r3
1a001384:	f3bf 8f6f 	isb	sy
1a001388:	f3bf 8f4f 	dsb	sy
1a00138c:	e7fe      	b.n	1a00138c <xQueueReceive+0x50>
1a00138e:	2600      	movs	r6, #0
1a001390:	e03e      	b.n	1a001410 <xQueueReceive+0xd4>
1a001392:	2600      	movs	r6, #0
1a001394:	e03c      	b.n	1a001410 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001396:	4639      	mov	r1, r7
1a001398:	4620      	mov	r0, r4
1a00139a:	f7ff fd87 	bl	1a000eac <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a00139e:	3d01      	subs	r5, #1
1a0013a0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0013a2:	6923      	ldr	r3, [r4, #16]
1a0013a4:	b923      	cbnz	r3, 1a0013b0 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a0013a6:	f001 fba7 	bl	1a002af8 <vPortExitCritical>
				return pdPASS;
1a0013aa:	2001      	movs	r0, #1
}
1a0013ac:	b005      	add	sp, #20
1a0013ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0013b0:	f104 0010 	add.w	r0, r4, #16
1a0013b4:	f000 feb0 	bl	1a002118 <xTaskRemoveFromEventList>
1a0013b8:	2800      	cmp	r0, #0
1a0013ba:	d0f4      	beq.n	1a0013a6 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a0013bc:	4b34      	ldr	r3, [pc, #208]	; (1a001490 <xQueueReceive+0x154>)
1a0013be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0013c2:	601a      	str	r2, [r3, #0]
1a0013c4:	f3bf 8f4f 	dsb	sy
1a0013c8:	f3bf 8f6f 	isb	sy
1a0013cc:	e7eb      	b.n	1a0013a6 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a0013ce:	f001 fb93 	bl	1a002af8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a0013d2:	2000      	movs	r0, #0
1a0013d4:	e7ea      	b.n	1a0013ac <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0013d6:	a802      	add	r0, sp, #8
1a0013d8:	f000 fee4 	bl	1a0021a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0013dc:	2601      	movs	r6, #1
1a0013de:	e021      	b.n	1a001424 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a0013e0:	2300      	movs	r3, #0
1a0013e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0013e6:	e029      	b.n	1a00143c <xQueueReceive+0x100>
1a0013e8:	2300      	movs	r3, #0
1a0013ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0013ee:	e02b      	b.n	1a001448 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a0013f0:	4620      	mov	r0, r4
1a0013f2:	f7ff fd6d 	bl	1a000ed0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0013f6:	f000 fce1 	bl	1a001dbc <xTaskResumeAll>
1a0013fa:	e009      	b.n	1a001410 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a0013fc:	4620      	mov	r0, r4
1a0013fe:	f7ff fd67 	bl	1a000ed0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001402:	f000 fcdb 	bl	1a001dbc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001406:	4620      	mov	r0, r4
1a001408:	f7ff fd08 	bl	1a000e1c <prvIsQueueEmpty>
1a00140c:	2800      	cmp	r0, #0
1a00140e:	d13d      	bne.n	1a00148c <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a001410:	f001 fb50 	bl	1a002ab4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001414:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001416:	2d00      	cmp	r5, #0
1a001418:	d1bd      	bne.n	1a001396 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00141a:	9b01      	ldr	r3, [sp, #4]
1a00141c:	2b00      	cmp	r3, #0
1a00141e:	d0d6      	beq.n	1a0013ce <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a001420:	2e00      	cmp	r6, #0
1a001422:	d0d8      	beq.n	1a0013d6 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a001424:	f001 fb68 	bl	1a002af8 <vPortExitCritical>
		vTaskSuspendAll();
1a001428:	f000 fc2e 	bl	1a001c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a00142c:	f001 fb42 	bl	1a002ab4 <vPortEnterCritical>
1a001430:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001434:	b25b      	sxtb	r3, r3
1a001436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00143a:	d0d1      	beq.n	1a0013e0 <xQueueReceive+0xa4>
1a00143c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001440:	b25b      	sxtb	r3, r3
1a001442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001446:	d0cf      	beq.n	1a0013e8 <xQueueReceive+0xac>
1a001448:	f001 fb56 	bl	1a002af8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a00144c:	a901      	add	r1, sp, #4
1a00144e:	a802      	add	r0, sp, #8
1a001450:	f000 feb4 	bl	1a0021bc <xTaskCheckForTimeOut>
1a001454:	2800      	cmp	r0, #0
1a001456:	d1d1      	bne.n	1a0013fc <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001458:	4620      	mov	r0, r4
1a00145a:	f7ff fcdf 	bl	1a000e1c <prvIsQueueEmpty>
1a00145e:	2800      	cmp	r0, #0
1a001460:	d0c6      	beq.n	1a0013f0 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001462:	9901      	ldr	r1, [sp, #4]
1a001464:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001468:	f000 fe22 	bl	1a0020b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00146c:	4620      	mov	r0, r4
1a00146e:	f7ff fd2f 	bl	1a000ed0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001472:	f000 fca3 	bl	1a001dbc <xTaskResumeAll>
1a001476:	2800      	cmp	r0, #0
1a001478:	d1ca      	bne.n	1a001410 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a00147a:	4b05      	ldr	r3, [pc, #20]	; (1a001490 <xQueueReceive+0x154>)
1a00147c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001480:	601a      	str	r2, [r3, #0]
1a001482:	f3bf 8f4f 	dsb	sy
1a001486:	f3bf 8f6f 	isb	sy
1a00148a:	e7c1      	b.n	1a001410 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a00148c:	2000      	movs	r0, #0
1a00148e:	e78d      	b.n	1a0013ac <xQueueReceive+0x70>
1a001490:	e000ed04 	.word	0xe000ed04

1a001494 <xQueueSemaphoreTake>:
{
1a001494:	b570      	push	{r4, r5, r6, lr}
1a001496:	b084      	sub	sp, #16
1a001498:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a00149a:	b940      	cbnz	r0, 1a0014ae <xQueueSemaphoreTake+0x1a>
1a00149c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014a0:	f383 8811 	msr	BASEPRI, r3
1a0014a4:	f3bf 8f6f 	isb	sy
1a0014a8:	f3bf 8f4f 	dsb	sy
1a0014ac:	e7fe      	b.n	1a0014ac <xQueueSemaphoreTake+0x18>
1a0014ae:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a0014b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0014b2:	b143      	cbz	r3, 1a0014c6 <xQueueSemaphoreTake+0x32>
1a0014b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014b8:	f383 8811 	msr	BASEPRI, r3
1a0014bc:	f3bf 8f6f 	isb	sy
1a0014c0:	f3bf 8f4f 	dsb	sy
1a0014c4:	e7fe      	b.n	1a0014c4 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0014c6:	f000 fefb 	bl	1a0022c0 <xTaskGetSchedulerState>
1a0014ca:	b950      	cbnz	r0, 1a0014e2 <xQueueSemaphoreTake+0x4e>
1a0014cc:	9b01      	ldr	r3, [sp, #4]
1a0014ce:	b15b      	cbz	r3, 1a0014e8 <xQueueSemaphoreTake+0x54>
1a0014d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014d4:	f383 8811 	msr	BASEPRI, r3
1a0014d8:	f3bf 8f6f 	isb	sy
1a0014dc:	f3bf 8f4f 	dsb	sy
1a0014e0:	e7fe      	b.n	1a0014e0 <xQueueSemaphoreTake+0x4c>
1a0014e2:	2500      	movs	r5, #0
1a0014e4:	462e      	mov	r6, r5
1a0014e6:	e051      	b.n	1a00158c <xQueueSemaphoreTake+0xf8>
1a0014e8:	2500      	movs	r5, #0
1a0014ea:	462e      	mov	r6, r5
1a0014ec:	e04e      	b.n	1a00158c <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a0014ee:	3b01      	subs	r3, #1
1a0014f0:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0014f2:	6823      	ldr	r3, [r4, #0]
1a0014f4:	b913      	cbnz	r3, 1a0014fc <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a0014f6:	f001 f807 	bl	1a002508 <pvTaskIncrementMutexHeldCount>
1a0014fa:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0014fc:	6923      	ldr	r3, [r4, #16]
1a0014fe:	b163      	cbz	r3, 1a00151a <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001500:	f104 0010 	add.w	r0, r4, #16
1a001504:	f000 fe08 	bl	1a002118 <xTaskRemoveFromEventList>
1a001508:	b138      	cbz	r0, 1a00151a <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
1a00150a:	4b48      	ldr	r3, [pc, #288]	; (1a00162c <xQueueSemaphoreTake+0x198>)
1a00150c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001510:	601a      	str	r2, [r3, #0]
1a001512:	f3bf 8f4f 	dsb	sy
1a001516:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a00151a:	f001 faed 	bl	1a002af8 <vPortExitCritical>
				return pdPASS;
1a00151e:	2501      	movs	r5, #1
}
1a001520:	4628      	mov	r0, r5
1a001522:	b004      	add	sp, #16
1a001524:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
1a001526:	b145      	cbz	r5, 1a00153a <xQueueSemaphoreTake+0xa6>
1a001528:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00152c:	f383 8811 	msr	BASEPRI, r3
1a001530:	f3bf 8f6f 	isb	sy
1a001534:	f3bf 8f4f 	dsb	sy
1a001538:	e7fe      	b.n	1a001538 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
1a00153a:	f001 fadd 	bl	1a002af8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a00153e:	e7ef      	b.n	1a001520 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001540:	a802      	add	r0, sp, #8
1a001542:	f000 fe2f 	bl	1a0021a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001546:	2601      	movs	r6, #1
1a001548:	e02a      	b.n	1a0015a0 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
1a00154a:	2300      	movs	r3, #0
1a00154c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001550:	e032      	b.n	1a0015b8 <xQueueSemaphoreTake+0x124>
1a001552:	2300      	movs	r3, #0
1a001554:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001558:	e034      	b.n	1a0015c4 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
1a00155a:	f001 faab 	bl	1a002ab4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a00155e:	6860      	ldr	r0, [r4, #4]
1a001560:	f000 febe 	bl	1a0022e0 <xTaskPriorityInherit>
1a001564:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a001566:	f001 fac7 	bl	1a002af8 <vPortExitCritical>
1a00156a:	e03b      	b.n	1a0015e4 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
1a00156c:	4620      	mov	r0, r4
1a00156e:	f7ff fcaf 	bl	1a000ed0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001572:	f000 fc23 	bl	1a001dbc <xTaskResumeAll>
1a001576:	e009      	b.n	1a00158c <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
1a001578:	4620      	mov	r0, r4
1a00157a:	f7ff fca9 	bl	1a000ed0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a00157e:	f000 fc1d 	bl	1a001dbc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001582:	4620      	mov	r0, r4
1a001584:	f7ff fc4a 	bl	1a000e1c <prvIsQueueEmpty>
1a001588:	2800      	cmp	r0, #0
1a00158a:	d140      	bne.n	1a00160e <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
1a00158c:	f001 fa92 	bl	1a002ab4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a001590:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a001592:	2b00      	cmp	r3, #0
1a001594:	d1ab      	bne.n	1a0014ee <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001596:	9b01      	ldr	r3, [sp, #4]
1a001598:	2b00      	cmp	r3, #0
1a00159a:	d0c4      	beq.n	1a001526 <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a00159c:	2e00      	cmp	r6, #0
1a00159e:	d0cf      	beq.n	1a001540 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
1a0015a0:	f001 faaa 	bl	1a002af8 <vPortExitCritical>
		vTaskSuspendAll();
1a0015a4:	f000 fb70 	bl	1a001c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0015a8:	f001 fa84 	bl	1a002ab4 <vPortEnterCritical>
1a0015ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0015b0:	b25b      	sxtb	r3, r3
1a0015b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0015b6:	d0c8      	beq.n	1a00154a <xQueueSemaphoreTake+0xb6>
1a0015b8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0015bc:	b25b      	sxtb	r3, r3
1a0015be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0015c2:	d0c6      	beq.n	1a001552 <xQueueSemaphoreTake+0xbe>
1a0015c4:	f001 fa98 	bl	1a002af8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0015c8:	a901      	add	r1, sp, #4
1a0015ca:	a802      	add	r0, sp, #8
1a0015cc:	f000 fdf6 	bl	1a0021bc <xTaskCheckForTimeOut>
1a0015d0:	2800      	cmp	r0, #0
1a0015d2:	d1d1      	bne.n	1a001578 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0015d4:	4620      	mov	r0, r4
1a0015d6:	f7ff fc21 	bl	1a000e1c <prvIsQueueEmpty>
1a0015da:	2800      	cmp	r0, #0
1a0015dc:	d0c6      	beq.n	1a00156c <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0015de:	6823      	ldr	r3, [r4, #0]
1a0015e0:	2b00      	cmp	r3, #0
1a0015e2:	d0ba      	beq.n	1a00155a <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0015e4:	9901      	ldr	r1, [sp, #4]
1a0015e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0015ea:	f000 fd61 	bl	1a0020b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0015ee:	4620      	mov	r0, r4
1a0015f0:	f7ff fc6e 	bl	1a000ed0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0015f4:	f000 fbe2 	bl	1a001dbc <xTaskResumeAll>
1a0015f8:	2800      	cmp	r0, #0
1a0015fa:	d1c7      	bne.n	1a00158c <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
1a0015fc:	4b0b      	ldr	r3, [pc, #44]	; (1a00162c <xQueueSemaphoreTake+0x198>)
1a0015fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001602:	601a      	str	r2, [r3, #0]
1a001604:	f3bf 8f4f 	dsb	sy
1a001608:	f3bf 8f6f 	isb	sy
1a00160c:	e7be      	b.n	1a00158c <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
1a00160e:	2d00      	cmp	r5, #0
1a001610:	d086      	beq.n	1a001520 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
1a001612:	f001 fa4f 	bl	1a002ab4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a001616:	4620      	mov	r0, r4
1a001618:	f7ff fbe8 	bl	1a000dec <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a00161c:	4601      	mov	r1, r0
1a00161e:	6860      	ldr	r0, [r4, #4]
1a001620:	f000 ff12 	bl	1a002448 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a001624:	f001 fa68 	bl	1a002af8 <vPortExitCritical>
				return errQUEUE_EMPTY;
1a001628:	2500      	movs	r5, #0
1a00162a:	e779      	b.n	1a001520 <xQueueSemaphoreTake+0x8c>
1a00162c:	e000ed04 	.word	0xe000ed04

1a001630 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001630:	2300      	movs	r3, #0
1a001632:	2b07      	cmp	r3, #7
1a001634:	d80c      	bhi.n	1a001650 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001636:	4a07      	ldr	r2, [pc, #28]	; (1a001654 <vQueueAddToRegistry+0x24>)
1a001638:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a00163c:	b10a      	cbz	r2, 1a001642 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00163e:	3301      	adds	r3, #1
1a001640:	e7f7      	b.n	1a001632 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001642:	4a04      	ldr	r2, [pc, #16]	; (1a001654 <vQueueAddToRegistry+0x24>)
1a001644:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001648:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a00164c:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a00164e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001650:	4770      	bx	lr
1a001652:	bf00      	nop
1a001654:	10003d48 	.word	0x10003d48

1a001658 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001658:	b570      	push	{r4, r5, r6, lr}
1a00165a:	4604      	mov	r4, r0
1a00165c:	460d      	mov	r5, r1
1a00165e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001660:	f001 fa28 	bl	1a002ab4 <vPortEnterCritical>
1a001664:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001668:	b25b      	sxtb	r3, r3
1a00166a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00166e:	d00d      	beq.n	1a00168c <vQueueWaitForMessageRestricted+0x34>
1a001670:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001674:	b25b      	sxtb	r3, r3
1a001676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00167a:	d00b      	beq.n	1a001694 <vQueueWaitForMessageRestricted+0x3c>
1a00167c:	f001 fa3c 	bl	1a002af8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001680:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001682:	b15b      	cbz	r3, 1a00169c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001684:	4620      	mov	r0, r4
1a001686:	f7ff fc23 	bl	1a000ed0 <prvUnlockQueue>
	}
1a00168a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a00168c:	2300      	movs	r3, #0
1a00168e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001692:	e7ed      	b.n	1a001670 <vQueueWaitForMessageRestricted+0x18>
1a001694:	2300      	movs	r3, #0
1a001696:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00169a:	e7ef      	b.n	1a00167c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a00169c:	4632      	mov	r2, r6
1a00169e:	4629      	mov	r1, r5
1a0016a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0016a4:	f000 fd1c 	bl	1a0020e0 <vTaskPlaceOnEventListRestricted>
1a0016a8:	e7ec      	b.n	1a001684 <vQueueWaitForMessageRestricted+0x2c>

1a0016aa <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0016aa:	f100 0308 	add.w	r3, r0, #8
1a0016ae:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a0016b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0016b4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0016b6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0016b8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a0016ba:	2300      	movs	r3, #0
1a0016bc:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a0016be:	4770      	bx	lr

1a0016c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a0016c0:	2300      	movs	r3, #0
1a0016c2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a0016c4:	4770      	bx	lr

1a0016c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a0016c6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a0016c8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a0016ca:	689a      	ldr	r2, [r3, #8]
1a0016cc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a0016ce:	689a      	ldr	r2, [r3, #8]
1a0016d0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a0016d2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0016d4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0016d6:	6803      	ldr	r3, [r0, #0]
1a0016d8:	3301      	adds	r3, #1
1a0016da:	6003      	str	r3, [r0, #0]
}
1a0016dc:	4770      	bx	lr

1a0016de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a0016de:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a0016e0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a0016e2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0016e6:	d002      	beq.n	1a0016ee <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0016e8:	f100 0208 	add.w	r2, r0, #8
1a0016ec:	e002      	b.n	1a0016f4 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a0016ee:	6902      	ldr	r2, [r0, #16]
1a0016f0:	e004      	b.n	1a0016fc <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0016f2:	461a      	mov	r2, r3
1a0016f4:	6853      	ldr	r3, [r2, #4]
1a0016f6:	681c      	ldr	r4, [r3, #0]
1a0016f8:	42ac      	cmp	r4, r5
1a0016fa:	d9fa      	bls.n	1a0016f2 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a0016fc:	6853      	ldr	r3, [r2, #4]
1a0016fe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001700:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001702:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001704:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001706:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001708:	6803      	ldr	r3, [r0, #0]
1a00170a:	3301      	adds	r3, #1
1a00170c:	6003      	str	r3, [r0, #0]
}
1a00170e:	bc30      	pop	{r4, r5}
1a001710:	4770      	bx	lr

1a001712 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001712:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001714:	6842      	ldr	r2, [r0, #4]
1a001716:	6881      	ldr	r1, [r0, #8]
1a001718:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a00171a:	6882      	ldr	r2, [r0, #8]
1a00171c:	6841      	ldr	r1, [r0, #4]
1a00171e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001720:	685a      	ldr	r2, [r3, #4]
1a001722:	4282      	cmp	r2, r0
1a001724:	d006      	beq.n	1a001734 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001726:	2200      	movs	r2, #0
1a001728:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a00172a:	681a      	ldr	r2, [r3, #0]
1a00172c:	3a01      	subs	r2, #1
1a00172e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001730:	6818      	ldr	r0, [r3, #0]
}
1a001732:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001734:	6882      	ldr	r2, [r0, #8]
1a001736:	605a      	str	r2, [r3, #4]
1a001738:	e7f5      	b.n	1a001726 <uxListRemove+0x14>
1a00173a:	Address 0x000000001a00173a is out of bounds.


1a00173c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a00173c:	4b03      	ldr	r3, [pc, #12]	; (1a00174c <vApplicationGetIdleTaskMemory+0x10>)
1a00173e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001740:	4b03      	ldr	r3, [pc, #12]	; (1a001750 <vApplicationGetIdleTaskMemory+0x14>)
1a001742:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001744:	235a      	movs	r3, #90	; 0x5a
1a001746:	6013      	str	r3, [r2, #0]
}
1a001748:	4770      	bx	lr
1a00174a:	bf00      	nop
1a00174c:	100037dc 	.word	0x100037dc
1a001750:	10002b34 	.word	0x10002b34

1a001754 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001754:	4b03      	ldr	r3, [pc, #12]	; (1a001764 <vApplicationGetTimerTaskMemory+0x10>)
1a001756:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001758:	4b03      	ldr	r3, [pc, #12]	; (1a001768 <vApplicationGetTimerTaskMemory+0x14>)
1a00175a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a00175c:	f44f 7334 	mov.w	r3, #720	; 0x2d0
1a001760:	6013      	str	r3, [r2, #0]
1a001762:	4770      	bx	lr
1a001764:	1000383c 	.word	0x1000383c
1a001768:	10002c9c 	.word	0x10002c9c

1a00176c <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a00176c:	e7fe      	b.n	1a00176c <vApplicationStackOverflowHook>

1a00176e <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a00176e:	e7fe      	b.n	1a00176e <vApplicationMallocFailedHook>

1a001770 <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
1a001770:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
1a001772:	e001      	b.n	1a001778 <prvTaskCheckFreeStackSpace+0x8>
		{
			pucStackByte -= portSTACK_GROWTH;
1a001774:	3001      	adds	r0, #1
			ulCount++;
1a001776:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
1a001778:	7802      	ldrb	r2, [r0, #0]
1a00177a:	2aa5      	cmp	r2, #165	; 0xa5
1a00177c:	d0fa      	beq.n	1a001774 <prvTaskCheckFreeStackSpace+0x4>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */

		return ( uint16_t ) ulCount;
	}
1a00177e:	f3c3 008f 	ubfx	r0, r3, #2, #16
1a001782:	4770      	bx	lr

1a001784 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001784:	4b08      	ldr	r3, [pc, #32]	; (1a0017a8 <prvResetNextTaskUnblockTime+0x24>)
1a001786:	681b      	ldr	r3, [r3, #0]
1a001788:	681b      	ldr	r3, [r3, #0]
1a00178a:	b13b      	cbz	r3, 1a00179c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00178c:	4b06      	ldr	r3, [pc, #24]	; (1a0017a8 <prvResetNextTaskUnblockTime+0x24>)
1a00178e:	681b      	ldr	r3, [r3, #0]
1a001790:	68db      	ldr	r3, [r3, #12]
1a001792:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001794:	685a      	ldr	r2, [r3, #4]
1a001796:	4b05      	ldr	r3, [pc, #20]	; (1a0017ac <prvResetNextTaskUnblockTime+0x28>)
1a001798:	601a      	str	r2, [r3, #0]
	}
}
1a00179a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a00179c:	4b03      	ldr	r3, [pc, #12]	; (1a0017ac <prvResetNextTaskUnblockTime+0x28>)
1a00179e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0017a2:	601a      	str	r2, [r3, #0]
1a0017a4:	4770      	bx	lr
1a0017a6:	bf00      	nop
1a0017a8:	100038a0 	.word	0x100038a0
1a0017ac:	10003974 	.word	0x10003974

1a0017b0 <prvInitialiseNewTask>:
{
1a0017b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0017b4:	4681      	mov	r9, r0
1a0017b6:	460d      	mov	r5, r1
1a0017b8:	4617      	mov	r7, r2
1a0017ba:	469a      	mov	sl, r3
1a0017bc:	9e08      	ldr	r6, [sp, #32]
1a0017be:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0017c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a0017c4:	0092      	lsls	r2, r2, #2
1a0017c6:	21a5      	movs	r1, #165	; 0xa5
1a0017c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a0017ca:	f002 fe94 	bl	1a0044f6 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a0017ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0017d0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a0017d4:	3a01      	subs	r2, #1
1a0017d6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a0017da:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a0017de:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0017e0:	2300      	movs	r3, #0
1a0017e2:	2b0f      	cmp	r3, #15
1a0017e4:	d807      	bhi.n	1a0017f6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a0017e6:	5ce9      	ldrb	r1, [r5, r3]
1a0017e8:	18e2      	adds	r2, r4, r3
1a0017ea:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a0017ee:	5cea      	ldrb	r2, [r5, r3]
1a0017f0:	b10a      	cbz	r2, 1a0017f6 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0017f2:	3301      	adds	r3, #1
1a0017f4:	e7f5      	b.n	1a0017e2 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a0017f6:	2300      	movs	r3, #0
1a0017f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a0017fc:	2e06      	cmp	r6, #6
1a0017fe:	d900      	bls.n	1a001802 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001800:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001802:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001804:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001806:	2500      	movs	r5, #0
1a001808:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a00180a:	1d20      	adds	r0, r4, #4
1a00180c:	f7ff ff58 	bl	1a0016c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001810:	f104 0018 	add.w	r0, r4, #24
1a001814:	f7ff ff54 	bl	1a0016c0 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001818:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00181a:	f1c6 0607 	rsb	r6, r6, #7
1a00181e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001820:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001822:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001824:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001828:	4652      	mov	r2, sl
1a00182a:	4649      	mov	r1, r9
1a00182c:	4638      	mov	r0, r7
1a00182e:	f001 f917 	bl	1a002a60 <pxPortInitialiseStack>
1a001832:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001834:	f1b8 0f00 	cmp.w	r8, #0
1a001838:	d001      	beq.n	1a00183e <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a00183a:	f8c8 4000 	str.w	r4, [r8]
}
1a00183e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001842:	Address 0x000000001a001842 is out of bounds.


1a001844 <prvInitialiseTaskLists>:
{
1a001844:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001846:	2400      	movs	r4, #0
1a001848:	e007      	b.n	1a00185a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a00184a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a00184e:	0093      	lsls	r3, r2, #2
1a001850:	480e      	ldr	r0, [pc, #56]	; (1a00188c <prvInitialiseTaskLists+0x48>)
1a001852:	4418      	add	r0, r3
1a001854:	f7ff ff29 	bl	1a0016aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001858:	3401      	adds	r4, #1
1a00185a:	2c06      	cmp	r4, #6
1a00185c:	d9f5      	bls.n	1a00184a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a00185e:	4d0c      	ldr	r5, [pc, #48]	; (1a001890 <prvInitialiseTaskLists+0x4c>)
1a001860:	4628      	mov	r0, r5
1a001862:	f7ff ff22 	bl	1a0016aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001866:	4c0b      	ldr	r4, [pc, #44]	; (1a001894 <prvInitialiseTaskLists+0x50>)
1a001868:	4620      	mov	r0, r4
1a00186a:	f7ff ff1e 	bl	1a0016aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a00186e:	480a      	ldr	r0, [pc, #40]	; (1a001898 <prvInitialiseTaskLists+0x54>)
1a001870:	f7ff ff1b 	bl	1a0016aa <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001874:	4809      	ldr	r0, [pc, #36]	; (1a00189c <prvInitialiseTaskLists+0x58>)
1a001876:	f7ff ff18 	bl	1a0016aa <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a00187a:	4809      	ldr	r0, [pc, #36]	; (1a0018a0 <prvInitialiseTaskLists+0x5c>)
1a00187c:	f7ff ff15 	bl	1a0016aa <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001880:	4b08      	ldr	r3, [pc, #32]	; (1a0018a4 <prvInitialiseTaskLists+0x60>)
1a001882:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001884:	4b08      	ldr	r3, [pc, #32]	; (1a0018a8 <prvInitialiseTaskLists+0x64>)
1a001886:	601c      	str	r4, [r3, #0]
}
1a001888:	bd38      	pop	{r3, r4, r5, pc}
1a00188a:	bf00      	nop
1a00188c:	100038a8 	.word	0x100038a8
1a001890:	1000394c 	.word	0x1000394c
1a001894:	10003960 	.word	0x10003960
1a001898:	1000397c 	.word	0x1000397c
1a00189c:	100039a8 	.word	0x100039a8
1a0018a0:	10003994 	.word	0x10003994
1a0018a4:	100038a0 	.word	0x100038a0
1a0018a8:	100038a4 	.word	0x100038a4

1a0018ac <prvAddNewTaskToReadyList>:
{
1a0018ac:	b510      	push	{r4, lr}
1a0018ae:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0018b0:	f001 f900 	bl	1a002ab4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a0018b4:	4a21      	ldr	r2, [pc, #132]	; (1a00193c <prvAddNewTaskToReadyList+0x90>)
1a0018b6:	6813      	ldr	r3, [r2, #0]
1a0018b8:	3301      	adds	r3, #1
1a0018ba:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a0018bc:	4b20      	ldr	r3, [pc, #128]	; (1a001940 <prvAddNewTaskToReadyList+0x94>)
1a0018be:	681b      	ldr	r3, [r3, #0]
1a0018c0:	b15b      	cbz	r3, 1a0018da <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a0018c2:	4b20      	ldr	r3, [pc, #128]	; (1a001944 <prvAddNewTaskToReadyList+0x98>)
1a0018c4:	681b      	ldr	r3, [r3, #0]
1a0018c6:	b96b      	cbnz	r3, 1a0018e4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0018c8:	4b1d      	ldr	r3, [pc, #116]	; (1a001940 <prvAddNewTaskToReadyList+0x94>)
1a0018ca:	681b      	ldr	r3, [r3, #0]
1a0018cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0018ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0018d0:	429a      	cmp	r2, r3
1a0018d2:	d807      	bhi.n	1a0018e4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a0018d4:	4b1a      	ldr	r3, [pc, #104]	; (1a001940 <prvAddNewTaskToReadyList+0x94>)
1a0018d6:	601c      	str	r4, [r3, #0]
1a0018d8:	e004      	b.n	1a0018e4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a0018da:	4b19      	ldr	r3, [pc, #100]	; (1a001940 <prvAddNewTaskToReadyList+0x94>)
1a0018dc:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a0018de:	6813      	ldr	r3, [r2, #0]
1a0018e0:	2b01      	cmp	r3, #1
1a0018e2:	d027      	beq.n	1a001934 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a0018e4:	4a18      	ldr	r2, [pc, #96]	; (1a001948 <prvAddNewTaskToReadyList+0x9c>)
1a0018e6:	6813      	ldr	r3, [r2, #0]
1a0018e8:	3301      	adds	r3, #1
1a0018ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a0018ec:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a0018ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0018f0:	2201      	movs	r2, #1
1a0018f2:	409a      	lsls	r2, r3
1a0018f4:	4915      	ldr	r1, [pc, #84]	; (1a00194c <prvAddNewTaskToReadyList+0xa0>)
1a0018f6:	6808      	ldr	r0, [r1, #0]
1a0018f8:	4302      	orrs	r2, r0
1a0018fa:	600a      	str	r2, [r1, #0]
1a0018fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001900:	009a      	lsls	r2, r3, #2
1a001902:	1d21      	adds	r1, r4, #4
1a001904:	4812      	ldr	r0, [pc, #72]	; (1a001950 <prvAddNewTaskToReadyList+0xa4>)
1a001906:	4410      	add	r0, r2
1a001908:	f7ff fedd 	bl	1a0016c6 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a00190c:	f001 f8f4 	bl	1a002af8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001910:	4b0c      	ldr	r3, [pc, #48]	; (1a001944 <prvAddNewTaskToReadyList+0x98>)
1a001912:	681b      	ldr	r3, [r3, #0]
1a001914:	b16b      	cbz	r3, 1a001932 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001916:	4b0a      	ldr	r3, [pc, #40]	; (1a001940 <prvAddNewTaskToReadyList+0x94>)
1a001918:	681b      	ldr	r3, [r3, #0]
1a00191a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00191c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00191e:	429a      	cmp	r2, r3
1a001920:	d207      	bcs.n	1a001932 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001922:	4b0c      	ldr	r3, [pc, #48]	; (1a001954 <prvAddNewTaskToReadyList+0xa8>)
1a001924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001928:	601a      	str	r2, [r3, #0]
1a00192a:	f3bf 8f4f 	dsb	sy
1a00192e:	f3bf 8f6f 	isb	sy
}
1a001932:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001934:	f7ff ff86 	bl	1a001844 <prvInitialiseTaskLists>
1a001938:	e7d4      	b.n	1a0018e4 <prvAddNewTaskToReadyList+0x38>
1a00193a:	bf00      	nop
1a00193c:	10003934 	.word	0x10003934
1a001940:	1000389c 	.word	0x1000389c
1a001944:	10003990 	.word	0x10003990
1a001948:	10003944 	.word	0x10003944
1a00194c:	10003948 	.word	0x10003948
1a001950:	100038a8 	.word	0x100038a8
1a001954:	e000ed04 	.word	0xe000ed04

1a001958 <prvDeleteTCB>:
	{
1a001958:	b510      	push	{r4, lr}
1a00195a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a00195c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001960:	b933      	cbnz	r3, 1a001970 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a001962:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001964:	f7ff fa1a 	bl	1a000d9c <vPortFree>
				vPortFree( pxTCB );
1a001968:	4620      	mov	r0, r4
1a00196a:	f7ff fa17 	bl	1a000d9c <vPortFree>
	}
1a00196e:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001970:	2b01      	cmp	r3, #1
1a001972:	d00a      	beq.n	1a00198a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001974:	2b02      	cmp	r3, #2
1a001976:	d0fa      	beq.n	1a00196e <prvDeleteTCB+0x16>
1a001978:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00197c:	f383 8811 	msr	BASEPRI, r3
1a001980:	f3bf 8f6f 	isb	sy
1a001984:	f3bf 8f4f 	dsb	sy
1a001988:	e7fe      	b.n	1a001988 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a00198a:	f7ff fa07 	bl	1a000d9c <vPortFree>
1a00198e:	e7ee      	b.n	1a00196e <prvDeleteTCB+0x16>

1a001990 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001990:	4b0f      	ldr	r3, [pc, #60]	; (1a0019d0 <prvCheckTasksWaitingTermination+0x40>)
1a001992:	681b      	ldr	r3, [r3, #0]
1a001994:	b1d3      	cbz	r3, 1a0019cc <prvCheckTasksWaitingTermination+0x3c>
{
1a001996:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001998:	f001 f88c 	bl	1a002ab4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a00199c:	4b0d      	ldr	r3, [pc, #52]	; (1a0019d4 <prvCheckTasksWaitingTermination+0x44>)
1a00199e:	68db      	ldr	r3, [r3, #12]
1a0019a0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0019a2:	1d20      	adds	r0, r4, #4
1a0019a4:	f7ff feb5 	bl	1a001712 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0019a8:	4a0b      	ldr	r2, [pc, #44]	; (1a0019d8 <prvCheckTasksWaitingTermination+0x48>)
1a0019aa:	6813      	ldr	r3, [r2, #0]
1a0019ac:	3b01      	subs	r3, #1
1a0019ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a0019b0:	4a07      	ldr	r2, [pc, #28]	; (1a0019d0 <prvCheckTasksWaitingTermination+0x40>)
1a0019b2:	6813      	ldr	r3, [r2, #0]
1a0019b4:	3b01      	subs	r3, #1
1a0019b6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a0019b8:	f001 f89e 	bl	1a002af8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a0019bc:	4620      	mov	r0, r4
1a0019be:	f7ff ffcb 	bl	1a001958 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0019c2:	4b03      	ldr	r3, [pc, #12]	; (1a0019d0 <prvCheckTasksWaitingTermination+0x40>)
1a0019c4:	681b      	ldr	r3, [r3, #0]
1a0019c6:	2b00      	cmp	r3, #0
1a0019c8:	d1e6      	bne.n	1a001998 <prvCheckTasksWaitingTermination+0x8>
}
1a0019ca:	bd10      	pop	{r4, pc}
1a0019cc:	4770      	bx	lr
1a0019ce:	bf00      	nop
1a0019d0:	10003938 	.word	0x10003938
1a0019d4:	100039a8 	.word	0x100039a8
1a0019d8:	10003934 	.word	0x10003934

1a0019dc <prvIdleTask>:
{
1a0019dc:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a0019de:	f7ff ffd7 	bl	1a001990 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0019e2:	4b06      	ldr	r3, [pc, #24]	; (1a0019fc <prvIdleTask+0x20>)
1a0019e4:	681b      	ldr	r3, [r3, #0]
1a0019e6:	2b01      	cmp	r3, #1
1a0019e8:	d9f9      	bls.n	1a0019de <prvIdleTask+0x2>
				taskYIELD();
1a0019ea:	4b05      	ldr	r3, [pc, #20]	; (1a001a00 <prvIdleTask+0x24>)
1a0019ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019f0:	601a      	str	r2, [r3, #0]
1a0019f2:	f3bf 8f4f 	dsb	sy
1a0019f6:	f3bf 8f6f 	isb	sy
1a0019fa:	e7f0      	b.n	1a0019de <prvIdleTask+0x2>
1a0019fc:	100038a8 	.word	0x100038a8
1a001a00:	e000ed04 	.word	0xe000ed04

1a001a04 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001a04:	b570      	push	{r4, r5, r6, lr}
1a001a06:	4604      	mov	r4, r0
1a001a08:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001a0a:	4b1d      	ldr	r3, [pc, #116]	; (1a001a80 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001a0c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001a0e:	4b1d      	ldr	r3, [pc, #116]	; (1a001a84 <prvAddCurrentTaskToDelayedList+0x80>)
1a001a10:	6818      	ldr	r0, [r3, #0]
1a001a12:	3004      	adds	r0, #4
1a001a14:	f7ff fe7d 	bl	1a001712 <uxListRemove>
1a001a18:	b950      	cbnz	r0, 1a001a30 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001a1a:	4b1a      	ldr	r3, [pc, #104]	; (1a001a84 <prvAddCurrentTaskToDelayedList+0x80>)
1a001a1c:	681b      	ldr	r3, [r3, #0]
1a001a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001a20:	2301      	movs	r3, #1
1a001a22:	fa03 f202 	lsl.w	r2, r3, r2
1a001a26:	4918      	ldr	r1, [pc, #96]	; (1a001a88 <prvAddCurrentTaskToDelayedList+0x84>)
1a001a28:	680b      	ldr	r3, [r1, #0]
1a001a2a:	ea23 0302 	bic.w	r3, r3, r2
1a001a2e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001a30:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001a34:	d013      	beq.n	1a001a5e <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001a36:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001a38:	4b12      	ldr	r3, [pc, #72]	; (1a001a84 <prvAddCurrentTaskToDelayedList+0x80>)
1a001a3a:	681b      	ldr	r3, [r3, #0]
1a001a3c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001a3e:	42a5      	cmp	r5, r4
1a001a40:	d816      	bhi.n	1a001a70 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001a42:	4b12      	ldr	r3, [pc, #72]	; (1a001a8c <prvAddCurrentTaskToDelayedList+0x88>)
1a001a44:	6818      	ldr	r0, [r3, #0]
1a001a46:	4b0f      	ldr	r3, [pc, #60]	; (1a001a84 <prvAddCurrentTaskToDelayedList+0x80>)
1a001a48:	6819      	ldr	r1, [r3, #0]
1a001a4a:	3104      	adds	r1, #4
1a001a4c:	f7ff fe47 	bl	1a0016de <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001a50:	4b0f      	ldr	r3, [pc, #60]	; (1a001a90 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001a52:	681b      	ldr	r3, [r3, #0]
1a001a54:	42a3      	cmp	r3, r4
1a001a56:	d912      	bls.n	1a001a7e <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001a58:	4b0d      	ldr	r3, [pc, #52]	; (1a001a90 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001a5a:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001a5c:	e00f      	b.n	1a001a7e <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001a5e:	2e00      	cmp	r6, #0
1a001a60:	d0e9      	beq.n	1a001a36 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001a62:	4b08      	ldr	r3, [pc, #32]	; (1a001a84 <prvAddCurrentTaskToDelayedList+0x80>)
1a001a64:	6819      	ldr	r1, [r3, #0]
1a001a66:	3104      	adds	r1, #4
1a001a68:	480a      	ldr	r0, [pc, #40]	; (1a001a94 <prvAddCurrentTaskToDelayedList+0x90>)
1a001a6a:	f7ff fe2c 	bl	1a0016c6 <vListInsertEnd>
1a001a6e:	e006      	b.n	1a001a7e <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001a70:	4b09      	ldr	r3, [pc, #36]	; (1a001a98 <prvAddCurrentTaskToDelayedList+0x94>)
1a001a72:	6818      	ldr	r0, [r3, #0]
1a001a74:	4b03      	ldr	r3, [pc, #12]	; (1a001a84 <prvAddCurrentTaskToDelayedList+0x80>)
1a001a76:	6819      	ldr	r1, [r3, #0]
1a001a78:	3104      	adds	r1, #4
1a001a7a:	f7ff fe30 	bl	1a0016de <vListInsert>
}
1a001a7e:	bd70      	pop	{r4, r5, r6, pc}
1a001a80:	100039bc 	.word	0x100039bc
1a001a84:	1000389c 	.word	0x1000389c
1a001a88:	10003948 	.word	0x10003948
1a001a8c:	100038a0 	.word	0x100038a0
1a001a90:	10003974 	.word	0x10003974
1a001a94:	10003994 	.word	0x10003994
1a001a98:	100038a4 	.word	0x100038a4

1a001a9c <xTaskCreateStatic>:
	{
1a001a9c:	b570      	push	{r4, r5, r6, lr}
1a001a9e:	b086      	sub	sp, #24
1a001aa0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001aa2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001aa4:	b945      	cbnz	r5, 1a001ab8 <xTaskCreateStatic+0x1c>
1a001aa6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001aaa:	f383 8811 	msr	BASEPRI, r3
1a001aae:	f3bf 8f6f 	isb	sy
1a001ab2:	f3bf 8f4f 	dsb	sy
1a001ab6:	e7fe      	b.n	1a001ab6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001ab8:	b944      	cbnz	r4, 1a001acc <xTaskCreateStatic+0x30>
1a001aba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001abe:	f383 8811 	msr	BASEPRI, r3
1a001ac2:	f3bf 8f6f 	isb	sy
1a001ac6:	f3bf 8f4f 	dsb	sy
1a001aca:	e7fe      	b.n	1a001aca <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001acc:	2660      	movs	r6, #96	; 0x60
1a001ace:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001ad0:	9e04      	ldr	r6, [sp, #16]
1a001ad2:	2e60      	cmp	r6, #96	; 0x60
1a001ad4:	d008      	beq.n	1a001ae8 <xTaskCreateStatic+0x4c>
1a001ad6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ada:	f383 8811 	msr	BASEPRI, r3
1a001ade:	f3bf 8f6f 	isb	sy
1a001ae2:	f3bf 8f4f 	dsb	sy
1a001ae6:	e7fe      	b.n	1a001ae6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001ae8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001aea:	2502      	movs	r5, #2
1a001aec:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001af0:	2500      	movs	r5, #0
1a001af2:	9503      	str	r5, [sp, #12]
1a001af4:	9402      	str	r4, [sp, #8]
1a001af6:	ad05      	add	r5, sp, #20
1a001af8:	9501      	str	r5, [sp, #4]
1a001afa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001afc:	9500      	str	r5, [sp, #0]
1a001afe:	f7ff fe57 	bl	1a0017b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001b02:	4620      	mov	r0, r4
1a001b04:	f7ff fed2 	bl	1a0018ac <prvAddNewTaskToReadyList>
	}
1a001b08:	9805      	ldr	r0, [sp, #20]
1a001b0a:	b006      	add	sp, #24
1a001b0c:	bd70      	pop	{r4, r5, r6, pc}

1a001b0e <xTaskCreate>:
	{
1a001b0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001b12:	b085      	sub	sp, #20
1a001b14:	4607      	mov	r7, r0
1a001b16:	4688      	mov	r8, r1
1a001b18:	4615      	mov	r5, r2
1a001b1a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001b1c:	0090      	lsls	r0, r2, #2
1a001b1e:	f7ff f8e3 	bl	1a000ce8 <pvPortMalloc>
			if( pxStack != NULL )
1a001b22:	b308      	cbz	r0, 1a001b68 <xTaskCreate+0x5a>
1a001b24:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001b26:	2060      	movs	r0, #96	; 0x60
1a001b28:	f7ff f8de 	bl	1a000ce8 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001b2c:	4604      	mov	r4, r0
1a001b2e:	b1b8      	cbz	r0, 1a001b60 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a001b30:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001b32:	b1e4      	cbz	r4, 1a001b6e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001b34:	2300      	movs	r3, #0
1a001b36:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001b3a:	9303      	str	r3, [sp, #12]
1a001b3c:	9402      	str	r4, [sp, #8]
1a001b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001b40:	9301      	str	r3, [sp, #4]
1a001b42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001b44:	9300      	str	r3, [sp, #0]
1a001b46:	464b      	mov	r3, r9
1a001b48:	462a      	mov	r2, r5
1a001b4a:	4641      	mov	r1, r8
1a001b4c:	4638      	mov	r0, r7
1a001b4e:	f7ff fe2f 	bl	1a0017b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001b52:	4620      	mov	r0, r4
1a001b54:	f7ff feaa 	bl	1a0018ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001b58:	2001      	movs	r0, #1
	}
1a001b5a:	b005      	add	sp, #20
1a001b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a001b60:	4630      	mov	r0, r6
1a001b62:	f7ff f91b 	bl	1a000d9c <vPortFree>
1a001b66:	e7e4      	b.n	1a001b32 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b6c:	e7f5      	b.n	1a001b5a <xTaskCreate+0x4c>
1a001b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001b72:	e7f2      	b.n	1a001b5a <xTaskCreate+0x4c>

1a001b74 <eTaskGetState>:
	{
1a001b74:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxTCB );
1a001b76:	b1d0      	cbz	r0, 1a001bae <eTaskGetState+0x3a>
1a001b78:	4605      	mov	r5, r0
		if( pxTCB == pxCurrentTCB )
1a001b7a:	4b19      	ldr	r3, [pc, #100]	; (1a001be0 <eTaskGetState+0x6c>)
1a001b7c:	681b      	ldr	r3, [r3, #0]
1a001b7e:	4283      	cmp	r3, r0
1a001b80:	d024      	beq.n	1a001bcc <eTaskGetState+0x58>
			taskENTER_CRITICAL();
1a001b82:	f000 ff97 	bl	1a002ab4 <vPortEnterCritical>
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1a001b86:	696c      	ldr	r4, [r5, #20]
			taskEXIT_CRITICAL();
1a001b88:	f000 ffb6 	bl	1a002af8 <vPortExitCritical>
			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1a001b8c:	4b15      	ldr	r3, [pc, #84]	; (1a001be4 <eTaskGetState+0x70>)
1a001b8e:	681b      	ldr	r3, [r3, #0]
1a001b90:	42a3      	cmp	r3, r4
1a001b92:	d01d      	beq.n	1a001bd0 <eTaskGetState+0x5c>
1a001b94:	4b14      	ldr	r3, [pc, #80]	; (1a001be8 <eTaskGetState+0x74>)
1a001b96:	681b      	ldr	r3, [r3, #0]
1a001b98:	42a3      	cmp	r3, r4
1a001b9a:	d01b      	beq.n	1a001bd4 <eTaskGetState+0x60>
				else if( pxStateList == &xSuspendedTaskList )
1a001b9c:	4b13      	ldr	r3, [pc, #76]	; (1a001bec <eTaskGetState+0x78>)
1a001b9e:	429c      	cmp	r4, r3
1a001ba0:	d00e      	beq.n	1a001bc0 <eTaskGetState+0x4c>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1a001ba2:	4b13      	ldr	r3, [pc, #76]	; (1a001bf0 <eTaskGetState+0x7c>)
1a001ba4:	429c      	cmp	r4, r3
1a001ba6:	d019      	beq.n	1a001bdc <eTaskGetState+0x68>
1a001ba8:	b174      	cbz	r4, 1a001bc8 <eTaskGetState+0x54>
				eReturn = eReady;
1a001baa:	2001      	movs	r0, #1
1a001bac:	e00f      	b.n	1a001bce <eTaskGetState+0x5a>
1a001bae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bb2:	f383 8811 	msr	BASEPRI, r3
1a001bb6:	f3bf 8f6f 	isb	sy
1a001bba:	f3bf 8f4f 	dsb	sy
1a001bbe:	e7fe      	b.n	1a001bbe <eTaskGetState+0x4a>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1a001bc0:	6aab      	ldr	r3, [r5, #40]	; 0x28
1a001bc2:	b94b      	cbnz	r3, 1a001bd8 <eTaskGetState+0x64>
						eReturn = eSuspended;
1a001bc4:	2003      	movs	r0, #3
1a001bc6:	e002      	b.n	1a001bce <eTaskGetState+0x5a>
					eReturn = eDeleted;
1a001bc8:	2004      	movs	r0, #4
1a001bca:	e000      	b.n	1a001bce <eTaskGetState+0x5a>
			eReturn = eRunning;
1a001bcc:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1a001bce:	bd38      	pop	{r3, r4, r5, pc}
				eReturn = eBlocked;
1a001bd0:	2002      	movs	r0, #2
1a001bd2:	e7fc      	b.n	1a001bce <eTaskGetState+0x5a>
1a001bd4:	2002      	movs	r0, #2
1a001bd6:	e7fa      	b.n	1a001bce <eTaskGetState+0x5a>
						eReturn = eBlocked;
1a001bd8:	2002      	movs	r0, #2
1a001bda:	e7f8      	b.n	1a001bce <eTaskGetState+0x5a>
					eReturn = eDeleted;
1a001bdc:	2004      	movs	r0, #4
1a001bde:	e7f6      	b.n	1a001bce <eTaskGetState+0x5a>
1a001be0:	1000389c 	.word	0x1000389c
1a001be4:	100038a0 	.word	0x100038a0
1a001be8:	100038a4 	.word	0x100038a4
1a001bec:	10003994 	.word	0x10003994
1a001bf0:	100039a8 	.word	0x100039a8

1a001bf4 <vTaskStartScheduler>:
{
1a001bf4:	b510      	push	{r4, lr}
1a001bf6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001bf8:	2400      	movs	r4, #0
1a001bfa:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001bfc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001bfe:	aa07      	add	r2, sp, #28
1a001c00:	a906      	add	r1, sp, #24
1a001c02:	a805      	add	r0, sp, #20
1a001c04:	f7ff fd9a 	bl	1a00173c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001c08:	9b05      	ldr	r3, [sp, #20]
1a001c0a:	9302      	str	r3, [sp, #8]
1a001c0c:	9b06      	ldr	r3, [sp, #24]
1a001c0e:	9301      	str	r3, [sp, #4]
1a001c10:	9400      	str	r4, [sp, #0]
1a001c12:	4623      	mov	r3, r4
1a001c14:	9a07      	ldr	r2, [sp, #28]
1a001c16:	4917      	ldr	r1, [pc, #92]	; (1a001c74 <vTaskStartScheduler+0x80>)
1a001c18:	4817      	ldr	r0, [pc, #92]	; (1a001c78 <vTaskStartScheduler+0x84>)
1a001c1a:	f7ff ff3f 	bl	1a001a9c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001c1e:	b140      	cbz	r0, 1a001c32 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001c20:	f000 fd0c 	bl	1a00263c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001c24:	2801      	cmp	r0, #1
1a001c26:	d006      	beq.n	1a001c36 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001c28:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001c2c:	d018      	beq.n	1a001c60 <vTaskStartScheduler+0x6c>
}
1a001c2e:	b008      	add	sp, #32
1a001c30:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001c32:	2000      	movs	r0, #0
1a001c34:	e7f6      	b.n	1a001c24 <vTaskStartScheduler+0x30>
1a001c36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c3a:	f383 8811 	msr	BASEPRI, r3
1a001c3e:	f3bf 8f6f 	isb	sy
1a001c42:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001c46:	4b0d      	ldr	r3, [pc, #52]	; (1a001c7c <vTaskStartScheduler+0x88>)
1a001c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001c4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001c4e:	4b0c      	ldr	r3, [pc, #48]	; (1a001c80 <vTaskStartScheduler+0x8c>)
1a001c50:	2201      	movs	r2, #1
1a001c52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001c54:	4b0b      	ldr	r3, [pc, #44]	; (1a001c84 <vTaskStartScheduler+0x90>)
1a001c56:	2200      	movs	r2, #0
1a001c58:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001c5a:	f000 ffcd 	bl	1a002bf8 <xPortStartScheduler>
1a001c5e:	e7e6      	b.n	1a001c2e <vTaskStartScheduler+0x3a>
1a001c60:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c64:	f383 8811 	msr	BASEPRI, r3
1a001c68:	f3bf 8f6f 	isb	sy
1a001c6c:	f3bf 8f4f 	dsb	sy
1a001c70:	e7fe      	b.n	1a001c70 <vTaskStartScheduler+0x7c>
1a001c72:	bf00      	nop
1a001c74:	1a0059b4 	.word	0x1a0059b4
1a001c78:	1a0019dd 	.word	0x1a0019dd
1a001c7c:	10003974 	.word	0x10003974
1a001c80:	10003990 	.word	0x10003990
1a001c84:	100039bc 	.word	0x100039bc

1a001c88 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001c88:	4a02      	ldr	r2, [pc, #8]	; (1a001c94 <vTaskSuspendAll+0xc>)
1a001c8a:	6813      	ldr	r3, [r2, #0]
1a001c8c:	3301      	adds	r3, #1
1a001c8e:	6013      	str	r3, [r2, #0]
}
1a001c90:	4770      	bx	lr
1a001c92:	bf00      	nop
1a001c94:	10003940 	.word	0x10003940

1a001c98 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001c98:	4b01      	ldr	r3, [pc, #4]	; (1a001ca0 <xTaskGetTickCount+0x8>)
1a001c9a:	6818      	ldr	r0, [r3, #0]
}
1a001c9c:	4770      	bx	lr
1a001c9e:	bf00      	nop
1a001ca0:	100039bc 	.word	0x100039bc

1a001ca4 <xTaskIncrementTick>:
{
1a001ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001ca6:	4b3a      	ldr	r3, [pc, #232]	; (1a001d90 <xTaskIncrementTick+0xec>)
1a001ca8:	681b      	ldr	r3, [r3, #0]
1a001caa:	2b00      	cmp	r3, #0
1a001cac:	d164      	bne.n	1a001d78 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001cae:	4b39      	ldr	r3, [pc, #228]	; (1a001d94 <xTaskIncrementTick+0xf0>)
1a001cb0:	681d      	ldr	r5, [r3, #0]
1a001cb2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001cb4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001cb6:	b9c5      	cbnz	r5, 1a001cea <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001cb8:	4b37      	ldr	r3, [pc, #220]	; (1a001d98 <xTaskIncrementTick+0xf4>)
1a001cba:	681b      	ldr	r3, [r3, #0]
1a001cbc:	681b      	ldr	r3, [r3, #0]
1a001cbe:	b143      	cbz	r3, 1a001cd2 <xTaskIncrementTick+0x2e>
1a001cc0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cc4:	f383 8811 	msr	BASEPRI, r3
1a001cc8:	f3bf 8f6f 	isb	sy
1a001ccc:	f3bf 8f4f 	dsb	sy
1a001cd0:	e7fe      	b.n	1a001cd0 <xTaskIncrementTick+0x2c>
1a001cd2:	4a31      	ldr	r2, [pc, #196]	; (1a001d98 <xTaskIncrementTick+0xf4>)
1a001cd4:	6811      	ldr	r1, [r2, #0]
1a001cd6:	4b31      	ldr	r3, [pc, #196]	; (1a001d9c <xTaskIncrementTick+0xf8>)
1a001cd8:	6818      	ldr	r0, [r3, #0]
1a001cda:	6010      	str	r0, [r2, #0]
1a001cdc:	6019      	str	r1, [r3, #0]
1a001cde:	4a30      	ldr	r2, [pc, #192]	; (1a001da0 <xTaskIncrementTick+0xfc>)
1a001ce0:	6813      	ldr	r3, [r2, #0]
1a001ce2:	3301      	adds	r3, #1
1a001ce4:	6013      	str	r3, [r2, #0]
1a001ce6:	f7ff fd4d 	bl	1a001784 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001cea:	4b2e      	ldr	r3, [pc, #184]	; (1a001da4 <xTaskIncrementTick+0x100>)
1a001cec:	681b      	ldr	r3, [r3, #0]
1a001cee:	42ab      	cmp	r3, r5
1a001cf0:	d938      	bls.n	1a001d64 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001cf2:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001cf4:	4b2c      	ldr	r3, [pc, #176]	; (1a001da8 <xTaskIncrementTick+0x104>)
1a001cf6:	681b      	ldr	r3, [r3, #0]
1a001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001cfa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001cfe:	009a      	lsls	r2, r3, #2
1a001d00:	4b2a      	ldr	r3, [pc, #168]	; (1a001dac <xTaskIncrementTick+0x108>)
1a001d02:	589b      	ldr	r3, [r3, r2]
1a001d04:	2b01      	cmp	r3, #1
1a001d06:	d93c      	bls.n	1a001d82 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001d08:	2401      	movs	r4, #1
1a001d0a:	e03a      	b.n	1a001d82 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001d0c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001d0e:	4b22      	ldr	r3, [pc, #136]	; (1a001d98 <xTaskIncrementTick+0xf4>)
1a001d10:	681b      	ldr	r3, [r3, #0]
1a001d12:	681b      	ldr	r3, [r3, #0]
1a001d14:	b343      	cbz	r3, 1a001d68 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001d16:	4b20      	ldr	r3, [pc, #128]	; (1a001d98 <xTaskIncrementTick+0xf4>)
1a001d18:	681b      	ldr	r3, [r3, #0]
1a001d1a:	68db      	ldr	r3, [r3, #12]
1a001d1c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001d1e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001d20:	429d      	cmp	r5, r3
1a001d22:	d326      	bcc.n	1a001d72 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001d24:	1d37      	adds	r7, r6, #4
1a001d26:	4638      	mov	r0, r7
1a001d28:	f7ff fcf3 	bl	1a001712 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001d2c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001d2e:	b11b      	cbz	r3, 1a001d38 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001d30:	f106 0018 	add.w	r0, r6, #24
1a001d34:	f7ff fced 	bl	1a001712 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001d38:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001d3a:	2201      	movs	r2, #1
1a001d3c:	409a      	lsls	r2, r3
1a001d3e:	491c      	ldr	r1, [pc, #112]	; (1a001db0 <xTaskIncrementTick+0x10c>)
1a001d40:	6808      	ldr	r0, [r1, #0]
1a001d42:	4302      	orrs	r2, r0
1a001d44:	600a      	str	r2, [r1, #0]
1a001d46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001d4a:	009a      	lsls	r2, r3, #2
1a001d4c:	4639      	mov	r1, r7
1a001d4e:	4817      	ldr	r0, [pc, #92]	; (1a001dac <xTaskIncrementTick+0x108>)
1a001d50:	4410      	add	r0, r2
1a001d52:	f7ff fcb8 	bl	1a0016c6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001d56:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001d58:	4b13      	ldr	r3, [pc, #76]	; (1a001da8 <xTaskIncrementTick+0x104>)
1a001d5a:	681b      	ldr	r3, [r3, #0]
1a001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001d5e:	429a      	cmp	r2, r3
1a001d60:	d2d4      	bcs.n	1a001d0c <xTaskIncrementTick+0x68>
1a001d62:	e7d4      	b.n	1a001d0e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001d64:	2400      	movs	r4, #0
1a001d66:	e7d2      	b.n	1a001d0e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001d68:	4b0e      	ldr	r3, [pc, #56]	; (1a001da4 <xTaskIncrementTick+0x100>)
1a001d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001d6e:	601a      	str	r2, [r3, #0]
					break;
1a001d70:	e7c0      	b.n	1a001cf4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001d72:	4a0c      	ldr	r2, [pc, #48]	; (1a001da4 <xTaskIncrementTick+0x100>)
1a001d74:	6013      	str	r3, [r2, #0]
						break;
1a001d76:	e7bd      	b.n	1a001cf4 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001d78:	4a0e      	ldr	r2, [pc, #56]	; (1a001db4 <xTaskIncrementTick+0x110>)
1a001d7a:	6813      	ldr	r3, [r2, #0]
1a001d7c:	3301      	adds	r3, #1
1a001d7e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001d80:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001d82:	4b0d      	ldr	r3, [pc, #52]	; (1a001db8 <xTaskIncrementTick+0x114>)
1a001d84:	681b      	ldr	r3, [r3, #0]
1a001d86:	b103      	cbz	r3, 1a001d8a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001d88:	2401      	movs	r4, #1
}
1a001d8a:	4620      	mov	r0, r4
1a001d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001d8e:	bf00      	nop
1a001d90:	10003940 	.word	0x10003940
1a001d94:	100039bc 	.word	0x100039bc
1a001d98:	100038a0 	.word	0x100038a0
1a001d9c:	100038a4 	.word	0x100038a4
1a001da0:	10003978 	.word	0x10003978
1a001da4:	10003974 	.word	0x10003974
1a001da8:	1000389c 	.word	0x1000389c
1a001dac:	100038a8 	.word	0x100038a8
1a001db0:	10003948 	.word	0x10003948
1a001db4:	1000393c 	.word	0x1000393c
1a001db8:	100039c0 	.word	0x100039c0

1a001dbc <xTaskResumeAll>:
{
1a001dbc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001dbe:	4b33      	ldr	r3, [pc, #204]	; (1a001e8c <xTaskResumeAll+0xd0>)
1a001dc0:	681b      	ldr	r3, [r3, #0]
1a001dc2:	b943      	cbnz	r3, 1a001dd6 <xTaskResumeAll+0x1a>
1a001dc4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dc8:	f383 8811 	msr	BASEPRI, r3
1a001dcc:	f3bf 8f6f 	isb	sy
1a001dd0:	f3bf 8f4f 	dsb	sy
1a001dd4:	e7fe      	b.n	1a001dd4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001dd6:	f000 fe6d 	bl	1a002ab4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001dda:	4b2c      	ldr	r3, [pc, #176]	; (1a001e8c <xTaskResumeAll+0xd0>)
1a001ddc:	681a      	ldr	r2, [r3, #0]
1a001dde:	3a01      	subs	r2, #1
1a001de0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001de2:	681b      	ldr	r3, [r3, #0]
1a001de4:	2b00      	cmp	r3, #0
1a001de6:	d14d      	bne.n	1a001e84 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001de8:	4b29      	ldr	r3, [pc, #164]	; (1a001e90 <xTaskResumeAll+0xd4>)
1a001dea:	681b      	ldr	r3, [r3, #0]
1a001dec:	b923      	cbnz	r3, 1a001df8 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a001dee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001df0:	f000 fe82 	bl	1a002af8 <vPortExitCritical>
}
1a001df4:	4620      	mov	r0, r4
1a001df6:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a001df8:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001dfa:	4b26      	ldr	r3, [pc, #152]	; (1a001e94 <xTaskResumeAll+0xd8>)
1a001dfc:	681b      	ldr	r3, [r3, #0]
1a001dfe:	b31b      	cbz	r3, 1a001e48 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001e00:	4b24      	ldr	r3, [pc, #144]	; (1a001e94 <xTaskResumeAll+0xd8>)
1a001e02:	68db      	ldr	r3, [r3, #12]
1a001e04:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001e06:	f104 0018 	add.w	r0, r4, #24
1a001e0a:	f7ff fc82 	bl	1a001712 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001e0e:	1d25      	adds	r5, r4, #4
1a001e10:	4628      	mov	r0, r5
1a001e12:	f7ff fc7e 	bl	1a001712 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001e16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001e18:	2201      	movs	r2, #1
1a001e1a:	409a      	lsls	r2, r3
1a001e1c:	491e      	ldr	r1, [pc, #120]	; (1a001e98 <xTaskResumeAll+0xdc>)
1a001e1e:	6808      	ldr	r0, [r1, #0]
1a001e20:	4302      	orrs	r2, r0
1a001e22:	600a      	str	r2, [r1, #0]
1a001e24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001e28:	009a      	lsls	r2, r3, #2
1a001e2a:	4629      	mov	r1, r5
1a001e2c:	481b      	ldr	r0, [pc, #108]	; (1a001e9c <xTaskResumeAll+0xe0>)
1a001e2e:	4410      	add	r0, r2
1a001e30:	f7ff fc49 	bl	1a0016c6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001e34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001e36:	4b1a      	ldr	r3, [pc, #104]	; (1a001ea0 <xTaskResumeAll+0xe4>)
1a001e38:	681b      	ldr	r3, [r3, #0]
1a001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001e3c:	429a      	cmp	r2, r3
1a001e3e:	d3dc      	bcc.n	1a001dfa <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a001e40:	4b18      	ldr	r3, [pc, #96]	; (1a001ea4 <xTaskResumeAll+0xe8>)
1a001e42:	2201      	movs	r2, #1
1a001e44:	601a      	str	r2, [r3, #0]
1a001e46:	e7d8      	b.n	1a001dfa <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a001e48:	b10c      	cbz	r4, 1a001e4e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a001e4a:	f7ff fc9b 	bl	1a001784 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001e4e:	4b16      	ldr	r3, [pc, #88]	; (1a001ea8 <xTaskResumeAll+0xec>)
1a001e50:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001e52:	b154      	cbz	r4, 1a001e6a <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a001e54:	f7ff ff26 	bl	1a001ca4 <xTaskIncrementTick>
1a001e58:	b110      	cbz	r0, 1a001e60 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a001e5a:	4b12      	ldr	r3, [pc, #72]	; (1a001ea4 <xTaskResumeAll+0xe8>)
1a001e5c:	2201      	movs	r2, #1
1a001e5e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001e60:	3c01      	subs	r4, #1
1a001e62:	d1f7      	bne.n	1a001e54 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a001e64:	4b10      	ldr	r3, [pc, #64]	; (1a001ea8 <xTaskResumeAll+0xec>)
1a001e66:	2200      	movs	r2, #0
1a001e68:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a001e6a:	4b0e      	ldr	r3, [pc, #56]	; (1a001ea4 <xTaskResumeAll+0xe8>)
1a001e6c:	681b      	ldr	r3, [r3, #0]
1a001e6e:	b15b      	cbz	r3, 1a001e88 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a001e70:	4b0e      	ldr	r3, [pc, #56]	; (1a001eac <xTaskResumeAll+0xf0>)
1a001e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001e76:	601a      	str	r2, [r3, #0]
1a001e78:	f3bf 8f4f 	dsb	sy
1a001e7c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001e80:	2401      	movs	r4, #1
1a001e82:	e7b5      	b.n	1a001df0 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001e84:	2400      	movs	r4, #0
1a001e86:	e7b3      	b.n	1a001df0 <xTaskResumeAll+0x34>
1a001e88:	2400      	movs	r4, #0
1a001e8a:	e7b1      	b.n	1a001df0 <xTaskResumeAll+0x34>
1a001e8c:	10003940 	.word	0x10003940
1a001e90:	10003934 	.word	0x10003934
1a001e94:	1000397c 	.word	0x1000397c
1a001e98:	10003948 	.word	0x10003948
1a001e9c:	100038a8 	.word	0x100038a8
1a001ea0:	1000389c 	.word	0x1000389c
1a001ea4:	100039c0 	.word	0x100039c0
1a001ea8:	1000393c 	.word	0x1000393c
1a001eac:	e000ed04 	.word	0xe000ed04

1a001eb0 <vTaskDelay>:
	{
1a001eb0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a001eb2:	b1a8      	cbz	r0, 1a001ee0 <vTaskDelay+0x30>
1a001eb4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a001eb6:	4b0f      	ldr	r3, [pc, #60]	; (1a001ef4 <vTaskDelay+0x44>)
1a001eb8:	681b      	ldr	r3, [r3, #0]
1a001eba:	b143      	cbz	r3, 1a001ece <vTaskDelay+0x1e>
1a001ebc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ec0:	f383 8811 	msr	BASEPRI, r3
1a001ec4:	f3bf 8f6f 	isb	sy
1a001ec8:	f3bf 8f4f 	dsb	sy
1a001ecc:	e7fe      	b.n	1a001ecc <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a001ece:	f7ff fedb 	bl	1a001c88 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a001ed2:	2100      	movs	r1, #0
1a001ed4:	4620      	mov	r0, r4
1a001ed6:	f7ff fd95 	bl	1a001a04 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a001eda:	f7ff ff6f 	bl	1a001dbc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001ede:	b938      	cbnz	r0, 1a001ef0 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a001ee0:	4b05      	ldr	r3, [pc, #20]	; (1a001ef8 <vTaskDelay+0x48>)
1a001ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ee6:	601a      	str	r2, [r3, #0]
1a001ee8:	f3bf 8f4f 	dsb	sy
1a001eec:	f3bf 8f6f 	isb	sy
	}
1a001ef0:	bd10      	pop	{r4, pc}
1a001ef2:	bf00      	nop
1a001ef4:	10003940 	.word	0x10003940
1a001ef8:	e000ed04 	.word	0xe000ed04

1a001efc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001efc:	4b2c      	ldr	r3, [pc, #176]	; (1a001fb0 <vTaskSwitchContext+0xb4>)
1a001efe:	681b      	ldr	r3, [r3, #0]
1a001f00:	b11b      	cbz	r3, 1a001f0a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001f02:	4b2c      	ldr	r3, [pc, #176]	; (1a001fb4 <vTaskSwitchContext+0xb8>)
1a001f04:	2201      	movs	r2, #1
1a001f06:	601a      	str	r2, [r3, #0]
1a001f08:	4770      	bx	lr
{
1a001f0a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001f0c:	4b29      	ldr	r3, [pc, #164]	; (1a001fb4 <vTaskSwitchContext+0xb8>)
1a001f0e:	2200      	movs	r2, #0
1a001f10:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001f12:	4b29      	ldr	r3, [pc, #164]	; (1a001fb8 <vTaskSwitchContext+0xbc>)
1a001f14:	681b      	ldr	r3, [r3, #0]
1a001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001f18:	681a      	ldr	r2, [r3, #0]
1a001f1a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001f1e:	d103      	bne.n	1a001f28 <vTaskSwitchContext+0x2c>
1a001f20:	685a      	ldr	r2, [r3, #4]
1a001f22:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001f26:	d01b      	beq.n	1a001f60 <vTaskSwitchContext+0x64>
1a001f28:	4b23      	ldr	r3, [pc, #140]	; (1a001fb8 <vTaskSwitchContext+0xbc>)
1a001f2a:	6818      	ldr	r0, [r3, #0]
1a001f2c:	6819      	ldr	r1, [r3, #0]
1a001f2e:	3134      	adds	r1, #52	; 0x34
1a001f30:	f7ff fc1c 	bl	1a00176c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001f34:	4b21      	ldr	r3, [pc, #132]	; (1a001fbc <vTaskSwitchContext+0xc0>)
1a001f36:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001f38:	fab3 f383 	clz	r3, r3
1a001f3c:	b2db      	uxtb	r3, r3
1a001f3e:	f1c3 031f 	rsb	r3, r3, #31
1a001f42:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001f46:	008a      	lsls	r2, r1, #2
1a001f48:	491d      	ldr	r1, [pc, #116]	; (1a001fc0 <vTaskSwitchContext+0xc4>)
1a001f4a:	588a      	ldr	r2, [r1, r2]
1a001f4c:	b98a      	cbnz	r2, 1a001f72 <vTaskSwitchContext+0x76>
	__asm volatile
1a001f4e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f52:	f383 8811 	msr	BASEPRI, r3
1a001f56:	f3bf 8f6f 	isb	sy
1a001f5a:	f3bf 8f4f 	dsb	sy
1a001f5e:	e7fe      	b.n	1a001f5e <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001f60:	689a      	ldr	r2, [r3, #8]
1a001f62:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001f66:	d1df      	bne.n	1a001f28 <vTaskSwitchContext+0x2c>
1a001f68:	68db      	ldr	r3, [r3, #12]
1a001f6a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001f6e:	d1db      	bne.n	1a001f28 <vTaskSwitchContext+0x2c>
1a001f70:	e7e0      	b.n	1a001f34 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001f72:	4813      	ldr	r0, [pc, #76]	; (1a001fc0 <vTaskSwitchContext+0xc4>)
1a001f74:	009a      	lsls	r2, r3, #2
1a001f76:	18d4      	adds	r4, r2, r3
1a001f78:	00a1      	lsls	r1, r4, #2
1a001f7a:	4401      	add	r1, r0
1a001f7c:	684c      	ldr	r4, [r1, #4]
1a001f7e:	6864      	ldr	r4, [r4, #4]
1a001f80:	604c      	str	r4, [r1, #4]
1a001f82:	441a      	add	r2, r3
1a001f84:	0091      	lsls	r1, r2, #2
1a001f86:	3108      	adds	r1, #8
1a001f88:	4408      	add	r0, r1
1a001f8a:	4284      	cmp	r4, r0
1a001f8c:	d009      	beq.n	1a001fa2 <vTaskSwitchContext+0xa6>
1a001f8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001f92:	009a      	lsls	r2, r3, #2
1a001f94:	4b0a      	ldr	r3, [pc, #40]	; (1a001fc0 <vTaskSwitchContext+0xc4>)
1a001f96:	4413      	add	r3, r2
1a001f98:	685b      	ldr	r3, [r3, #4]
1a001f9a:	68da      	ldr	r2, [r3, #12]
1a001f9c:	4b06      	ldr	r3, [pc, #24]	; (1a001fb8 <vTaskSwitchContext+0xbc>)
1a001f9e:	601a      	str	r2, [r3, #0]
}
1a001fa0:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001fa2:	6861      	ldr	r1, [r4, #4]
1a001fa4:	4806      	ldr	r0, [pc, #24]	; (1a001fc0 <vTaskSwitchContext+0xc4>)
1a001fa6:	2214      	movs	r2, #20
1a001fa8:	fb02 0203 	mla	r2, r2, r3, r0
1a001fac:	6051      	str	r1, [r2, #4]
1a001fae:	e7ee      	b.n	1a001f8e <vTaskSwitchContext+0x92>
1a001fb0:	10003940 	.word	0x10003940
1a001fb4:	100039c0 	.word	0x100039c0
1a001fb8:	1000389c 	.word	0x1000389c
1a001fbc:	10003948 	.word	0x10003948
1a001fc0:	100038a8 	.word	0x100038a8

1a001fc4 <vTaskSuspend>:
	{
1a001fc4:	b538      	push	{r3, r4, r5, lr}
1a001fc6:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
1a001fc8:	f000 fd74 	bl	1a002ab4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1a001fcc:	b364      	cbz	r4, 1a002028 <vTaskSuspend+0x64>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001fce:	1d25      	adds	r5, r4, #4
1a001fd0:	4628      	mov	r0, r5
1a001fd2:	f7ff fb9e 	bl	1a001712 <uxListRemove>
1a001fd6:	b970      	cbnz	r0, 1a001ff6 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001fd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001fda:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a001fde:	008b      	lsls	r3, r1, #2
1a001fe0:	492b      	ldr	r1, [pc, #172]	; (1a002090 <vTaskSuspend+0xcc>)
1a001fe2:	58cb      	ldr	r3, [r1, r3]
1a001fe4:	b93b      	cbnz	r3, 1a001ff6 <vTaskSuspend+0x32>
1a001fe6:	2301      	movs	r3, #1
1a001fe8:	fa03 f202 	lsl.w	r2, r3, r2
1a001fec:	4929      	ldr	r1, [pc, #164]	; (1a002094 <vTaskSuspend+0xd0>)
1a001fee:	680b      	ldr	r3, [r1, #0]
1a001ff0:	ea23 0302 	bic.w	r3, r3, r2
1a001ff4:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a001ff8:	b11b      	cbz	r3, 1a002002 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001ffa:	f104 0018 	add.w	r0, r4, #24
1a001ffe:	f7ff fb88 	bl	1a001712 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1a002002:	4629      	mov	r1, r5
1a002004:	4824      	ldr	r0, [pc, #144]	; (1a002098 <vTaskSuspend+0xd4>)
1a002006:	f7ff fb5e 	bl	1a0016c6 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1a00200a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
1a00200e:	b2db      	uxtb	r3, r3
1a002010:	2b01      	cmp	r3, #1
1a002012:	d00c      	beq.n	1a00202e <vTaskSuspend+0x6a>
		taskEXIT_CRITICAL();
1a002014:	f000 fd70 	bl	1a002af8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
1a002018:	4b20      	ldr	r3, [pc, #128]	; (1a00209c <vTaskSuspend+0xd8>)
1a00201a:	681b      	ldr	r3, [r3, #0]
1a00201c:	b95b      	cbnz	r3, 1a002036 <vTaskSuspend+0x72>
		if( pxTCB == pxCurrentTCB )
1a00201e:	4b20      	ldr	r3, [pc, #128]	; (1a0020a0 <vTaskSuspend+0xdc>)
1a002020:	681b      	ldr	r3, [r3, #0]
1a002022:	42a3      	cmp	r3, r4
1a002024:	d00e      	beq.n	1a002044 <vTaskSuspend+0x80>
	}
1a002026:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1a002028:	4b1d      	ldr	r3, [pc, #116]	; (1a0020a0 <vTaskSuspend+0xdc>)
1a00202a:	681c      	ldr	r4, [r3, #0]
1a00202c:	e7cf      	b.n	1a001fce <vTaskSuspend+0xa>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a00202e:	2300      	movs	r3, #0
1a002030:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
1a002034:	e7ee      	b.n	1a002014 <vTaskSuspend+0x50>
			taskENTER_CRITICAL();
1a002036:	f000 fd3d 	bl	1a002ab4 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
1a00203a:	f7ff fba3 	bl	1a001784 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
1a00203e:	f000 fd5b 	bl	1a002af8 <vPortExitCritical>
1a002042:	e7ec      	b.n	1a00201e <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
1a002044:	4b15      	ldr	r3, [pc, #84]	; (1a00209c <vTaskSuspend+0xd8>)
1a002046:	681b      	ldr	r3, [r3, #0]
1a002048:	b1a3      	cbz	r3, 1a002074 <vTaskSuspend+0xb0>
				configASSERT( uxSchedulerSuspended == 0 );
1a00204a:	4b16      	ldr	r3, [pc, #88]	; (1a0020a4 <vTaskSuspend+0xe0>)
1a00204c:	681b      	ldr	r3, [r3, #0]
1a00204e:	b143      	cbz	r3, 1a002062 <vTaskSuspend+0x9e>
1a002050:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002054:	f383 8811 	msr	BASEPRI, r3
1a002058:	f3bf 8f6f 	isb	sy
1a00205c:	f3bf 8f4f 	dsb	sy
1a002060:	e7fe      	b.n	1a002060 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
1a002062:	4b11      	ldr	r3, [pc, #68]	; (1a0020a8 <vTaskSuspend+0xe4>)
1a002064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002068:	601a      	str	r2, [r3, #0]
1a00206a:	f3bf 8f4f 	dsb	sy
1a00206e:	f3bf 8f6f 	isb	sy
1a002072:	e7d8      	b.n	1a002026 <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1a002074:	4b08      	ldr	r3, [pc, #32]	; (1a002098 <vTaskSuspend+0xd4>)
1a002076:	681a      	ldr	r2, [r3, #0]
1a002078:	4b0c      	ldr	r3, [pc, #48]	; (1a0020ac <vTaskSuspend+0xe8>)
1a00207a:	681b      	ldr	r3, [r3, #0]
1a00207c:	429a      	cmp	r2, r3
1a00207e:	d103      	bne.n	1a002088 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
1a002080:	4b07      	ldr	r3, [pc, #28]	; (1a0020a0 <vTaskSuspend+0xdc>)
1a002082:	2200      	movs	r2, #0
1a002084:	601a      	str	r2, [r3, #0]
1a002086:	e7ce      	b.n	1a002026 <vTaskSuspend+0x62>
					vTaskSwitchContext();
1a002088:	f7ff ff38 	bl	1a001efc <vTaskSwitchContext>
	}
1a00208c:	e7cb      	b.n	1a002026 <vTaskSuspend+0x62>
1a00208e:	bf00      	nop
1a002090:	100038a8 	.word	0x100038a8
1a002094:	10003948 	.word	0x10003948
1a002098:	10003994 	.word	0x10003994
1a00209c:	10003990 	.word	0x10003990
1a0020a0:	1000389c 	.word	0x1000389c
1a0020a4:	10003940 	.word	0x10003940
1a0020a8:	e000ed04 	.word	0xe000ed04
1a0020ac:	10003934 	.word	0x10003934

1a0020b0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0020b0:	b940      	cbnz	r0, 1a0020c4 <vTaskPlaceOnEventList+0x14>
1a0020b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020b6:	f383 8811 	msr	BASEPRI, r3
1a0020ba:	f3bf 8f6f 	isb	sy
1a0020be:	f3bf 8f4f 	dsb	sy
1a0020c2:	e7fe      	b.n	1a0020c2 <vTaskPlaceOnEventList+0x12>
{
1a0020c4:	b510      	push	{r4, lr}
1a0020c6:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0020c8:	4b04      	ldr	r3, [pc, #16]	; (1a0020dc <vTaskPlaceOnEventList+0x2c>)
1a0020ca:	6819      	ldr	r1, [r3, #0]
1a0020cc:	3118      	adds	r1, #24
1a0020ce:	f7ff fb06 	bl	1a0016de <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0020d2:	2101      	movs	r1, #1
1a0020d4:	4620      	mov	r0, r4
1a0020d6:	f7ff fc95 	bl	1a001a04 <prvAddCurrentTaskToDelayedList>
}
1a0020da:	bd10      	pop	{r4, pc}
1a0020dc:	1000389c 	.word	0x1000389c

1a0020e0 <vTaskPlaceOnEventListRestricted>:
	{
1a0020e0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a0020e2:	b940      	cbnz	r0, 1a0020f6 <vTaskPlaceOnEventListRestricted+0x16>
1a0020e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020e8:	f383 8811 	msr	BASEPRI, r3
1a0020ec:	f3bf 8f6f 	isb	sy
1a0020f0:	f3bf 8f4f 	dsb	sy
1a0020f4:	e7fe      	b.n	1a0020f4 <vTaskPlaceOnEventListRestricted+0x14>
1a0020f6:	460c      	mov	r4, r1
1a0020f8:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0020fa:	4a06      	ldr	r2, [pc, #24]	; (1a002114 <vTaskPlaceOnEventListRestricted+0x34>)
1a0020fc:	6811      	ldr	r1, [r2, #0]
1a0020fe:	3118      	adds	r1, #24
1a002100:	f7ff fae1 	bl	1a0016c6 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a002104:	b10d      	cbz	r5, 1a00210a <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a002106:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a00210a:	4629      	mov	r1, r5
1a00210c:	4620      	mov	r0, r4
1a00210e:	f7ff fc79 	bl	1a001a04 <prvAddCurrentTaskToDelayedList>
	}
1a002112:	bd38      	pop	{r3, r4, r5, pc}
1a002114:	1000389c 	.word	0x1000389c

1a002118 <xTaskRemoveFromEventList>:
{
1a002118:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a00211a:	68c3      	ldr	r3, [r0, #12]
1a00211c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a00211e:	b944      	cbnz	r4, 1a002132 <xTaskRemoveFromEventList+0x1a>
1a002120:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002124:	f383 8811 	msr	BASEPRI, r3
1a002128:	f3bf 8f6f 	isb	sy
1a00212c:	f3bf 8f4f 	dsb	sy
1a002130:	e7fe      	b.n	1a002130 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a002132:	f104 0518 	add.w	r5, r4, #24
1a002136:	4628      	mov	r0, r5
1a002138:	f7ff faeb 	bl	1a001712 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00213c:	4b13      	ldr	r3, [pc, #76]	; (1a00218c <xTaskRemoveFromEventList+0x74>)
1a00213e:	681b      	ldr	r3, [r3, #0]
1a002140:	b9e3      	cbnz	r3, 1a00217c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a002142:	1d25      	adds	r5, r4, #4
1a002144:	4628      	mov	r0, r5
1a002146:	f7ff fae4 	bl	1a001712 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a00214a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00214c:	2201      	movs	r2, #1
1a00214e:	409a      	lsls	r2, r3
1a002150:	490f      	ldr	r1, [pc, #60]	; (1a002190 <xTaskRemoveFromEventList+0x78>)
1a002152:	6808      	ldr	r0, [r1, #0]
1a002154:	4302      	orrs	r2, r0
1a002156:	600a      	str	r2, [r1, #0]
1a002158:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00215c:	009a      	lsls	r2, r3, #2
1a00215e:	4629      	mov	r1, r5
1a002160:	480c      	ldr	r0, [pc, #48]	; (1a002194 <xTaskRemoveFromEventList+0x7c>)
1a002162:	4410      	add	r0, r2
1a002164:	f7ff faaf 	bl	1a0016c6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a002168:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00216a:	4b0b      	ldr	r3, [pc, #44]	; (1a002198 <xTaskRemoveFromEventList+0x80>)
1a00216c:	681b      	ldr	r3, [r3, #0]
1a00216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002170:	429a      	cmp	r2, r3
1a002172:	d908      	bls.n	1a002186 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a002174:	2001      	movs	r0, #1
1a002176:	4b09      	ldr	r3, [pc, #36]	; (1a00219c <xTaskRemoveFromEventList+0x84>)
1a002178:	6018      	str	r0, [r3, #0]
}
1a00217a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a00217c:	4629      	mov	r1, r5
1a00217e:	4808      	ldr	r0, [pc, #32]	; (1a0021a0 <xTaskRemoveFromEventList+0x88>)
1a002180:	f7ff faa1 	bl	1a0016c6 <vListInsertEnd>
1a002184:	e7f0      	b.n	1a002168 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a002186:	2000      	movs	r0, #0
	return xReturn;
1a002188:	e7f7      	b.n	1a00217a <xTaskRemoveFromEventList+0x62>
1a00218a:	bf00      	nop
1a00218c:	10003940 	.word	0x10003940
1a002190:	10003948 	.word	0x10003948
1a002194:	100038a8 	.word	0x100038a8
1a002198:	1000389c 	.word	0x1000389c
1a00219c:	100039c0 	.word	0x100039c0
1a0021a0:	1000397c 	.word	0x1000397c

1a0021a4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a0021a4:	4b03      	ldr	r3, [pc, #12]	; (1a0021b4 <vTaskInternalSetTimeOutState+0x10>)
1a0021a6:	681b      	ldr	r3, [r3, #0]
1a0021a8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0021aa:	4b03      	ldr	r3, [pc, #12]	; (1a0021b8 <vTaskInternalSetTimeOutState+0x14>)
1a0021ac:	681b      	ldr	r3, [r3, #0]
1a0021ae:	6043      	str	r3, [r0, #4]
}
1a0021b0:	4770      	bx	lr
1a0021b2:	bf00      	nop
1a0021b4:	10003978 	.word	0x10003978
1a0021b8:	100039bc 	.word	0x100039bc

1a0021bc <xTaskCheckForTimeOut>:
{
1a0021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a0021be:	b150      	cbz	r0, 1a0021d6 <xTaskCheckForTimeOut+0x1a>
1a0021c0:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a0021c2:	b989      	cbnz	r1, 1a0021e8 <xTaskCheckForTimeOut+0x2c>
1a0021c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021c8:	f383 8811 	msr	BASEPRI, r3
1a0021cc:	f3bf 8f6f 	isb	sy
1a0021d0:	f3bf 8f4f 	dsb	sy
1a0021d4:	e7fe      	b.n	1a0021d4 <xTaskCheckForTimeOut+0x18>
1a0021d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021da:	f383 8811 	msr	BASEPRI, r3
1a0021de:	f3bf 8f6f 	isb	sy
1a0021e2:	f3bf 8f4f 	dsb	sy
1a0021e6:	e7fe      	b.n	1a0021e6 <xTaskCheckForTimeOut+0x2a>
1a0021e8:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a0021ea:	f000 fc63 	bl	1a002ab4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a0021ee:	4b11      	ldr	r3, [pc, #68]	; (1a002234 <xTaskCheckForTimeOut+0x78>)
1a0021f0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0021f2:	6868      	ldr	r0, [r5, #4]
1a0021f4:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a0021f6:	6823      	ldr	r3, [r4, #0]
1a0021f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0021fc:	d016      	beq.n	1a00222c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a0021fe:	682f      	ldr	r7, [r5, #0]
1a002200:	4e0d      	ldr	r6, [pc, #52]	; (1a002238 <xTaskCheckForTimeOut+0x7c>)
1a002202:	6836      	ldr	r6, [r6, #0]
1a002204:	42b7      	cmp	r7, r6
1a002206:	d001      	beq.n	1a00220c <xTaskCheckForTimeOut+0x50>
1a002208:	4288      	cmp	r0, r1
1a00220a:	d911      	bls.n	1a002230 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a00220c:	4293      	cmp	r3, r2
1a00220e:	d803      	bhi.n	1a002218 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a002210:	2300      	movs	r3, #0
1a002212:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a002214:	2401      	movs	r4, #1
1a002216:	e005      	b.n	1a002224 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a002218:	1a9b      	subs	r3, r3, r2
1a00221a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a00221c:	4628      	mov	r0, r5
1a00221e:	f7ff ffc1 	bl	1a0021a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a002222:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a002224:	f000 fc68 	bl	1a002af8 <vPortExitCritical>
}
1a002228:	4620      	mov	r0, r4
1a00222a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a00222c:	2400      	movs	r4, #0
1a00222e:	e7f9      	b.n	1a002224 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a002230:	2401      	movs	r4, #1
1a002232:	e7f7      	b.n	1a002224 <xTaskCheckForTimeOut+0x68>
1a002234:	100039bc 	.word	0x100039bc
1a002238:	10003978 	.word	0x10003978

1a00223c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a00223c:	4b01      	ldr	r3, [pc, #4]	; (1a002244 <vTaskMissedYield+0x8>)
1a00223e:	2201      	movs	r2, #1
1a002240:	601a      	str	r2, [r3, #0]
}
1a002242:	4770      	bx	lr
1a002244:	100039c0 	.word	0x100039c0

1a002248 <vTaskGetInfo>:
	{
1a002248:	b570      	push	{r4, r5, r6, lr}
1a00224a:	460c      	mov	r4, r1
1a00224c:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
1a00224e:	4605      	mov	r5, r0
1a002250:	b1d0      	cbz	r0, 1a002288 <vTaskGetInfo+0x40>
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
1a002252:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
1a002254:	f105 0234 	add.w	r2, r5, #52	; 0x34
1a002258:	6062      	str	r2, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
1a00225a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
1a00225c:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
1a00225e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
1a002260:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
1a002262:	6caa      	ldr	r2, [r5, #72]	; 0x48
1a002264:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
1a002266:	6d2a      	ldr	r2, [r5, #80]	; 0x50
1a002268:	6162      	str	r2, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = 0;
1a00226a:	2200      	movs	r2, #0
1a00226c:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
1a00226e:	2b05      	cmp	r3, #5
1a002270:	d019      	beq.n	1a0022a6 <vTaskGetInfo+0x5e>
			if( pxTCB == pxCurrentTCB )
1a002272:	4a12      	ldr	r2, [pc, #72]	; (1a0022bc <vTaskGetInfo+0x74>)
1a002274:	6812      	ldr	r2, [r2, #0]
1a002276:	42aa      	cmp	r2, r5
1a002278:	d009      	beq.n	1a00228e <vTaskGetInfo+0x46>
				pxTaskStatus->eCurrentState = eState;
1a00227a:	7323      	strb	r3, [r4, #12]
					if( eState == eSuspended )
1a00227c:	2b03      	cmp	r3, #3
1a00227e:	d009      	beq.n	1a002294 <vTaskGetInfo+0x4c>
		if( xGetFreeStackSpace != pdFALSE )
1a002280:	b9b6      	cbnz	r6, 1a0022b0 <vTaskGetInfo+0x68>
			pxTaskStatus->usStackHighWaterMark = 0;
1a002282:	2300      	movs	r3, #0
1a002284:	8423      	strh	r3, [r4, #32]
	}
1a002286:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
1a002288:	4a0c      	ldr	r2, [pc, #48]	; (1a0022bc <vTaskGetInfo+0x74>)
1a00228a:	6815      	ldr	r5, [r2, #0]
1a00228c:	e7e1      	b.n	1a002252 <vTaskGetInfo+0xa>
				pxTaskStatus->eCurrentState = eRunning;
1a00228e:	2300      	movs	r3, #0
1a002290:	7323      	strb	r3, [r4, #12]
1a002292:	e7f5      	b.n	1a002280 <vTaskGetInfo+0x38>
						vTaskSuspendAll();
1a002294:	f7ff fcf8 	bl	1a001c88 <vTaskSuspendAll>
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a002298:	6aab      	ldr	r3, [r5, #40]	; 0x28
1a00229a:	b10b      	cbz	r3, 1a0022a0 <vTaskGetInfo+0x58>
								pxTaskStatus->eCurrentState = eBlocked;
1a00229c:	2302      	movs	r3, #2
1a00229e:	7323      	strb	r3, [r4, #12]
						( void ) xTaskResumeAll();
1a0022a0:	f7ff fd8c 	bl	1a001dbc <xTaskResumeAll>
1a0022a4:	e7ec      	b.n	1a002280 <vTaskGetInfo+0x38>
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
1a0022a6:	4628      	mov	r0, r5
1a0022a8:	f7ff fc64 	bl	1a001b74 <eTaskGetState>
1a0022ac:	7320      	strb	r0, [r4, #12]
1a0022ae:	e7e7      	b.n	1a002280 <vTaskGetInfo+0x38>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
1a0022b0:	6b28      	ldr	r0, [r5, #48]	; 0x30
1a0022b2:	f7ff fa5d 	bl	1a001770 <prvTaskCheckFreeStackSpace>
1a0022b6:	8420      	strh	r0, [r4, #32]
1a0022b8:	e7e5      	b.n	1a002286 <vTaskGetInfo+0x3e>
1a0022ba:	bf00      	nop
1a0022bc:	1000389c 	.word	0x1000389c

1a0022c0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a0022c0:	4b05      	ldr	r3, [pc, #20]	; (1a0022d8 <xTaskGetSchedulerState+0x18>)
1a0022c2:	681b      	ldr	r3, [r3, #0]
1a0022c4:	b133      	cbz	r3, 1a0022d4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0022c6:	4b05      	ldr	r3, [pc, #20]	; (1a0022dc <xTaskGetSchedulerState+0x1c>)
1a0022c8:	681b      	ldr	r3, [r3, #0]
1a0022ca:	b10b      	cbz	r3, 1a0022d0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a0022cc:	2000      	movs	r0, #0
	}
1a0022ce:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a0022d0:	2002      	movs	r0, #2
1a0022d2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a0022d4:	2001      	movs	r0, #1
1a0022d6:	4770      	bx	lr
1a0022d8:	10003990 	.word	0x10003990
1a0022dc:	10003940 	.word	0x10003940

1a0022e0 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a0022e0:	2800      	cmp	r0, #0
1a0022e2:	d050      	beq.n	1a002386 <xTaskPriorityInherit+0xa6>
	{
1a0022e4:	b538      	push	{r3, r4, r5, lr}
1a0022e6:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a0022e8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a0022ea:	4928      	ldr	r1, [pc, #160]	; (1a00238c <xTaskPriorityInherit+0xac>)
1a0022ec:	6809      	ldr	r1, [r1, #0]
1a0022ee:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a0022f0:	428a      	cmp	r2, r1
1a0022f2:	d23e      	bcs.n	1a002372 <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a0022f4:	6981      	ldr	r1, [r0, #24]
1a0022f6:	2900      	cmp	r1, #0
1a0022f8:	db05      	blt.n	1a002306 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0022fa:	4924      	ldr	r1, [pc, #144]	; (1a00238c <xTaskPriorityInherit+0xac>)
1a0022fc:	6809      	ldr	r1, [r1, #0]
1a0022fe:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a002300:	f1c1 0107 	rsb	r1, r1, #7
1a002304:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a002306:	6960      	ldr	r0, [r4, #20]
1a002308:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a00230c:	0091      	lsls	r1, r2, #2
1a00230e:	4a20      	ldr	r2, [pc, #128]	; (1a002390 <xTaskPriorityInherit+0xb0>)
1a002310:	440a      	add	r2, r1
1a002312:	4290      	cmp	r0, r2
1a002314:	d005      	beq.n	1a002322 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a002316:	4a1d      	ldr	r2, [pc, #116]	; (1a00238c <xTaskPriorityInherit+0xac>)
1a002318:	6812      	ldr	r2, [r2, #0]
1a00231a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a00231c:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a00231e:	2001      	movs	r0, #1
	}
1a002320:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002322:	1d25      	adds	r5, r4, #4
1a002324:	4628      	mov	r0, r5
1a002326:	f7ff f9f4 	bl	1a001712 <uxListRemove>
1a00232a:	b968      	cbnz	r0, 1a002348 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a00232c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00232e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a002332:	008a      	lsls	r2, r1, #2
1a002334:	4916      	ldr	r1, [pc, #88]	; (1a002390 <xTaskPriorityInherit+0xb0>)
1a002336:	588a      	ldr	r2, [r1, r2]
1a002338:	b932      	cbnz	r2, 1a002348 <xTaskPriorityInherit+0x68>
1a00233a:	2201      	movs	r2, #1
1a00233c:	409a      	lsls	r2, r3
1a00233e:	4915      	ldr	r1, [pc, #84]	; (1a002394 <xTaskPriorityInherit+0xb4>)
1a002340:	680b      	ldr	r3, [r1, #0]
1a002342:	ea23 0302 	bic.w	r3, r3, r2
1a002346:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a002348:	4b10      	ldr	r3, [pc, #64]	; (1a00238c <xTaskPriorityInherit+0xac>)
1a00234a:	681b      	ldr	r3, [r3, #0]
1a00234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00234e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a002350:	2401      	movs	r4, #1
1a002352:	fa04 f203 	lsl.w	r2, r4, r3
1a002356:	490f      	ldr	r1, [pc, #60]	; (1a002394 <xTaskPriorityInherit+0xb4>)
1a002358:	6808      	ldr	r0, [r1, #0]
1a00235a:	4302      	orrs	r2, r0
1a00235c:	600a      	str	r2, [r1, #0]
1a00235e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002362:	009a      	lsls	r2, r3, #2
1a002364:	4629      	mov	r1, r5
1a002366:	480a      	ldr	r0, [pc, #40]	; (1a002390 <xTaskPriorityInherit+0xb0>)
1a002368:	4410      	add	r0, r2
1a00236a:	f7ff f9ac 	bl	1a0016c6 <vListInsertEnd>
				xReturn = pdTRUE;
1a00236e:	4620      	mov	r0, r4
1a002370:	e7d6      	b.n	1a002320 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a002372:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a002374:	4b05      	ldr	r3, [pc, #20]	; (1a00238c <xTaskPriorityInherit+0xac>)
1a002376:	681b      	ldr	r3, [r3, #0]
1a002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00237a:	429a      	cmp	r2, r3
1a00237c:	d201      	bcs.n	1a002382 <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
1a00237e:	2001      	movs	r0, #1
		return xReturn;
1a002380:	e7ce      	b.n	1a002320 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
1a002382:	2000      	movs	r0, #0
1a002384:	e7cc      	b.n	1a002320 <xTaskPriorityInherit+0x40>
1a002386:	2000      	movs	r0, #0
	}
1a002388:	4770      	bx	lr
1a00238a:	bf00      	nop
1a00238c:	1000389c 	.word	0x1000389c
1a002390:	100038a8 	.word	0x100038a8
1a002394:	10003948 	.word	0x10003948

1a002398 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a002398:	2800      	cmp	r0, #0
1a00239a:	d049      	beq.n	1a002430 <xTaskPriorityDisinherit+0x98>
	{
1a00239c:	b538      	push	{r3, r4, r5, lr}
1a00239e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a0023a0:	4a26      	ldr	r2, [pc, #152]	; (1a00243c <xTaskPriorityDisinherit+0xa4>)
1a0023a2:	6812      	ldr	r2, [r2, #0]
1a0023a4:	4282      	cmp	r2, r0
1a0023a6:	d008      	beq.n	1a0023ba <xTaskPriorityDisinherit+0x22>
1a0023a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023ac:	f383 8811 	msr	BASEPRI, r3
1a0023b0:	f3bf 8f6f 	isb	sy
1a0023b4:	f3bf 8f4f 	dsb	sy
1a0023b8:	e7fe      	b.n	1a0023b8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a0023ba:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0023bc:	b942      	cbnz	r2, 1a0023d0 <xTaskPriorityDisinherit+0x38>
1a0023be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023c2:	f383 8811 	msr	BASEPRI, r3
1a0023c6:	f3bf 8f6f 	isb	sy
1a0023ca:	f3bf 8f4f 	dsb	sy
1a0023ce:	e7fe      	b.n	1a0023ce <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0023d0:	3a01      	subs	r2, #1
1a0023d2:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0023d4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0023d6:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0023d8:	4288      	cmp	r0, r1
1a0023da:	d02b      	beq.n	1a002434 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0023dc:	bb62      	cbnz	r2, 1a002438 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0023de:	1d25      	adds	r5, r4, #4
1a0023e0:	4628      	mov	r0, r5
1a0023e2:	f7ff f996 	bl	1a001712 <uxListRemove>
1a0023e6:	b970      	cbnz	r0, 1a002406 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0023e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0023ea:	2314      	movs	r3, #20
1a0023ec:	fb03 f302 	mul.w	r3, r3, r2
1a0023f0:	4913      	ldr	r1, [pc, #76]	; (1a002440 <xTaskPriorityDisinherit+0xa8>)
1a0023f2:	58cb      	ldr	r3, [r1, r3]
1a0023f4:	b93b      	cbnz	r3, 1a002406 <xTaskPriorityDisinherit+0x6e>
1a0023f6:	2301      	movs	r3, #1
1a0023f8:	fa03 f202 	lsl.w	r2, r3, r2
1a0023fc:	4911      	ldr	r1, [pc, #68]	; (1a002444 <xTaskPriorityDisinherit+0xac>)
1a0023fe:	680b      	ldr	r3, [r1, #0]
1a002400:	ea23 0302 	bic.w	r3, r3, r2
1a002404:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a002406:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a002408:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00240a:	f1c3 0207 	rsb	r2, r3, #7
1a00240e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a002410:	2401      	movs	r4, #1
1a002412:	fa04 f203 	lsl.w	r2, r4, r3
1a002416:	490b      	ldr	r1, [pc, #44]	; (1a002444 <xTaskPriorityDisinherit+0xac>)
1a002418:	6808      	ldr	r0, [r1, #0]
1a00241a:	4302      	orrs	r2, r0
1a00241c:	600a      	str	r2, [r1, #0]
1a00241e:	4629      	mov	r1, r5
1a002420:	4a07      	ldr	r2, [pc, #28]	; (1a002440 <xTaskPriorityDisinherit+0xa8>)
1a002422:	2014      	movs	r0, #20
1a002424:	fb00 2003 	mla	r0, r0, r3, r2
1a002428:	f7ff f94d 	bl	1a0016c6 <vListInsertEnd>
					xReturn = pdTRUE;
1a00242c:	4620      	mov	r0, r4
	}
1a00242e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a002430:	2000      	movs	r0, #0
	}
1a002432:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a002434:	2000      	movs	r0, #0
1a002436:	e7fa      	b.n	1a00242e <xTaskPriorityDisinherit+0x96>
1a002438:	2000      	movs	r0, #0
		return xReturn;
1a00243a:	e7f8      	b.n	1a00242e <xTaskPriorityDisinherit+0x96>
1a00243c:	1000389c 	.word	0x1000389c
1a002440:	100038a8 	.word	0x100038a8
1a002444:	10003948 	.word	0x10003948

1a002448 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a002448:	2800      	cmp	r0, #0
1a00244a:	d055      	beq.n	1a0024f8 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
1a00244c:	b538      	push	{r3, r4, r5, lr}
1a00244e:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a002450:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a002452:	b940      	cbnz	r0, 1a002466 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a002454:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002458:	f383 8811 	msr	BASEPRI, r3
1a00245c:	f3bf 8f6f 	isb	sy
1a002460:	f3bf 8f4f 	dsb	sy
1a002464:	e7fe      	b.n	1a002464 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a002466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1a002468:	428a      	cmp	r2, r1
1a00246a:	d200      	bcs.n	1a00246e <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a00246c:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a00246e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1a002470:	4291      	cmp	r1, r2
1a002472:	d001      	beq.n	1a002478 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a002474:	2801      	cmp	r0, #1
1a002476:	d000      	beq.n	1a00247a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a002478:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a00247a:	4820      	ldr	r0, [pc, #128]	; (1a0024fc <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a00247c:	6800      	ldr	r0, [r0, #0]
1a00247e:	4298      	cmp	r0, r3
1a002480:	d108      	bne.n	1a002494 <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a002482:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002486:	f383 8811 	msr	BASEPRI, r3
1a00248a:	f3bf 8f6f 	isb	sy
1a00248e:	f3bf 8f4f 	dsb	sy
1a002492:	e7fe      	b.n	1a002492 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
1a002494:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002496:	6998      	ldr	r0, [r3, #24]
1a002498:	2800      	cmp	r0, #0
1a00249a:	db02      	blt.n	1a0024a2 <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00249c:	f1c2 0207 	rsb	r2, r2, #7
1a0024a0:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a0024a2:	695a      	ldr	r2, [r3, #20]
1a0024a4:	4816      	ldr	r0, [pc, #88]	; (1a002500 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0024a6:	2414      	movs	r4, #20
1a0024a8:	fb04 0101 	mla	r1, r4, r1, r0
1a0024ac:	428a      	cmp	r2, r1
1a0024ae:	d1e3      	bne.n	1a002478 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a0024b0:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0024b2:	1d1d      	adds	r5, r3, #4
1a0024b4:	4628      	mov	r0, r5
1a0024b6:	f7ff f92c 	bl	1a001712 <uxListRemove>
1a0024ba:	b970      	cbnz	r0, 1a0024da <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0024bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0024be:	2314      	movs	r3, #20
1a0024c0:	fb03 f302 	mul.w	r3, r3, r2
1a0024c4:	490e      	ldr	r1, [pc, #56]	; (1a002500 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0024c6:	58cb      	ldr	r3, [r1, r3]
1a0024c8:	b93b      	cbnz	r3, 1a0024da <vTaskPriorityDisinheritAfterTimeout+0x92>
1a0024ca:	2301      	movs	r3, #1
1a0024cc:	fa03 f202 	lsl.w	r2, r3, r2
1a0024d0:	490c      	ldr	r1, [pc, #48]	; (1a002504 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a0024d2:	680b      	ldr	r3, [r1, #0]
1a0024d4:	ea23 0302 	bic.w	r3, r3, r2
1a0024d8:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a0024da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0024dc:	2301      	movs	r3, #1
1a0024de:	4093      	lsls	r3, r2
1a0024e0:	4908      	ldr	r1, [pc, #32]	; (1a002504 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a0024e2:	6808      	ldr	r0, [r1, #0]
1a0024e4:	4303      	orrs	r3, r0
1a0024e6:	600b      	str	r3, [r1, #0]
1a0024e8:	4629      	mov	r1, r5
1a0024ea:	4b05      	ldr	r3, [pc, #20]	; (1a002500 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0024ec:	2014      	movs	r0, #20
1a0024ee:	fb00 3002 	mla	r0, r0, r2, r3
1a0024f2:	f7ff f8e8 	bl	1a0016c6 <vListInsertEnd>
	}
1a0024f6:	e7bf      	b.n	1a002478 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a0024f8:	4770      	bx	lr
1a0024fa:	bf00      	nop
1a0024fc:	1000389c 	.word	0x1000389c
1a002500:	100038a8 	.word	0x100038a8
1a002504:	10003948 	.word	0x10003948

1a002508 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a002508:	4b05      	ldr	r3, [pc, #20]	; (1a002520 <pvTaskIncrementMutexHeldCount+0x18>)
1a00250a:	681b      	ldr	r3, [r3, #0]
1a00250c:	b123      	cbz	r3, 1a002518 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a00250e:	4b04      	ldr	r3, [pc, #16]	; (1a002520 <pvTaskIncrementMutexHeldCount+0x18>)
1a002510:	681a      	ldr	r2, [r3, #0]
1a002512:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a002514:	3301      	adds	r3, #1
1a002516:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a002518:	4b01      	ldr	r3, [pc, #4]	; (1a002520 <pvTaskIncrementMutexHeldCount+0x18>)
1a00251a:	6818      	ldr	r0, [r3, #0]
	}
1a00251c:	4770      	bx	lr
1a00251e:	bf00      	nop
1a002520:	1000389c 	.word	0x1000389c

1a002524 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a002524:	4b06      	ldr	r3, [pc, #24]	; (1a002540 <prvGetNextExpireTime+0x1c>)
1a002526:	681a      	ldr	r2, [r3, #0]
1a002528:	6813      	ldr	r3, [r2, #0]
1a00252a:	fab3 f383 	clz	r3, r3
1a00252e:	095b      	lsrs	r3, r3, #5
1a002530:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a002532:	b913      	cbnz	r3, 1a00253a <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002534:	68d3      	ldr	r3, [r2, #12]
1a002536:	6818      	ldr	r0, [r3, #0]
1a002538:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a00253a:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a00253c:	4770      	bx	lr
1a00253e:	bf00      	nop
1a002540:	100039c4 	.word	0x100039c4

1a002544 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a002544:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a002546:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002548:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a00254a:	4291      	cmp	r1, r2
1a00254c:	d80c      	bhi.n	1a002568 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00254e:	1ad2      	subs	r2, r2, r3
1a002550:	6983      	ldr	r3, [r0, #24]
1a002552:	429a      	cmp	r2, r3
1a002554:	d301      	bcc.n	1a00255a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a002556:	2001      	movs	r0, #1
1a002558:	e010      	b.n	1a00257c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a00255a:	1d01      	adds	r1, r0, #4
1a00255c:	4b09      	ldr	r3, [pc, #36]	; (1a002584 <prvInsertTimerInActiveList+0x40>)
1a00255e:	6818      	ldr	r0, [r3, #0]
1a002560:	f7ff f8bd 	bl	1a0016de <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002564:	2000      	movs	r0, #0
1a002566:	e009      	b.n	1a00257c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a002568:	429a      	cmp	r2, r3
1a00256a:	d201      	bcs.n	1a002570 <prvInsertTimerInActiveList+0x2c>
1a00256c:	4299      	cmp	r1, r3
1a00256e:	d206      	bcs.n	1a00257e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002570:	1d01      	adds	r1, r0, #4
1a002572:	4b05      	ldr	r3, [pc, #20]	; (1a002588 <prvInsertTimerInActiveList+0x44>)
1a002574:	6818      	ldr	r0, [r3, #0]
1a002576:	f7ff f8b2 	bl	1a0016de <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a00257a:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a00257c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a00257e:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a002580:	e7fc      	b.n	1a00257c <prvInsertTimerInActiveList+0x38>
1a002582:	bf00      	nop
1a002584:	100039c8 	.word	0x100039c8
1a002588:	100039c4 	.word	0x100039c4

1a00258c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a00258c:	b530      	push	{r4, r5, lr}
1a00258e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a002590:	f000 fa90 	bl	1a002ab4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a002594:	4b11      	ldr	r3, [pc, #68]	; (1a0025dc <prvCheckForValidListAndQueue+0x50>)
1a002596:	681b      	ldr	r3, [r3, #0]
1a002598:	b11b      	cbz	r3, 1a0025a2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a00259a:	f000 faad 	bl	1a002af8 <vPortExitCritical>
}
1a00259e:	b003      	add	sp, #12
1a0025a0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a0025a2:	4d0f      	ldr	r5, [pc, #60]	; (1a0025e0 <prvCheckForValidListAndQueue+0x54>)
1a0025a4:	4628      	mov	r0, r5
1a0025a6:	f7ff f880 	bl	1a0016aa <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0025aa:	4c0e      	ldr	r4, [pc, #56]	; (1a0025e4 <prvCheckForValidListAndQueue+0x58>)
1a0025ac:	4620      	mov	r0, r4
1a0025ae:	f7ff f87c 	bl	1a0016aa <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0025b2:	4b0d      	ldr	r3, [pc, #52]	; (1a0025e8 <prvCheckForValidListAndQueue+0x5c>)
1a0025b4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0025b6:	4b0d      	ldr	r3, [pc, #52]	; (1a0025ec <prvCheckForValidListAndQueue+0x60>)
1a0025b8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a0025ba:	2300      	movs	r3, #0
1a0025bc:	9300      	str	r3, [sp, #0]
1a0025be:	4b0c      	ldr	r3, [pc, #48]	; (1a0025f0 <prvCheckForValidListAndQueue+0x64>)
1a0025c0:	4a0c      	ldr	r2, [pc, #48]	; (1a0025f4 <prvCheckForValidListAndQueue+0x68>)
1a0025c2:	2110      	movs	r1, #16
1a0025c4:	200a      	movs	r0, #10
1a0025c6:	f7fe fd0e 	bl	1a000fe6 <xQueueGenericCreateStatic>
1a0025ca:	4b04      	ldr	r3, [pc, #16]	; (1a0025dc <prvCheckForValidListAndQueue+0x50>)
1a0025cc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a0025ce:	2800      	cmp	r0, #0
1a0025d0:	d0e3      	beq.n	1a00259a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a0025d2:	4909      	ldr	r1, [pc, #36]	; (1a0025f8 <prvCheckForValidListAndQueue+0x6c>)
1a0025d4:	f7ff f82c 	bl	1a001630 <vQueueAddToRegistry>
1a0025d8:	e7df      	b.n	1a00259a <prvCheckForValidListAndQueue+0xe>
1a0025da:	bf00      	nop
1a0025dc:	10003ae8 	.word	0x10003ae8
1a0025e0:	10003a6c 	.word	0x10003a6c
1a0025e4:	10003a80 	.word	0x10003a80
1a0025e8:	100039c4 	.word	0x100039c4
1a0025ec:	100039c8 	.word	0x100039c8
1a0025f0:	10003a98 	.word	0x10003a98
1a0025f4:	100039cc 	.word	0x100039cc
1a0025f8:	1a0059bc 	.word	0x1a0059bc

1a0025fc <prvInitialiseNewTimer>:
{
1a0025fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002600:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a002602:	b941      	cbnz	r1, 1a002616 <prvInitialiseNewTimer+0x1a>
1a002604:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002608:	f383 8811 	msr	BASEPRI, r3
1a00260c:	f3bf 8f6f 	isb	sy
1a002610:	f3bf 8f4f 	dsb	sy
1a002614:	e7fe      	b.n	1a002614 <prvInitialiseNewTimer+0x18>
1a002616:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a002618:	b174      	cbz	r4, 1a002638 <prvInitialiseNewTimer+0x3c>
1a00261a:	461d      	mov	r5, r3
1a00261c:	4616      	mov	r6, r2
1a00261e:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a002620:	f7ff ffb4 	bl	1a00258c <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a002624:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a002628:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a00262a:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a00262c:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a00262e:	9b06      	ldr	r3, [sp, #24]
1a002630:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a002632:	1d20      	adds	r0, r4, #4
1a002634:	f7ff f844 	bl	1a0016c0 <vListInitialiseItem>
}
1a002638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a00263c <xTimerCreateTimerTask>:
{
1a00263c:	b510      	push	{r4, lr}
1a00263e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a002640:	f7ff ffa4 	bl	1a00258c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a002644:	4b12      	ldr	r3, [pc, #72]	; (1a002690 <xTimerCreateTimerTask+0x54>)
1a002646:	681b      	ldr	r3, [r3, #0]
1a002648:	b1cb      	cbz	r3, 1a00267e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a00264a:	2400      	movs	r4, #0
1a00264c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a00264e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002650:	aa07      	add	r2, sp, #28
1a002652:	a906      	add	r1, sp, #24
1a002654:	a805      	add	r0, sp, #20
1a002656:	f7ff f87d 	bl	1a001754 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a00265a:	9b05      	ldr	r3, [sp, #20]
1a00265c:	9302      	str	r3, [sp, #8]
1a00265e:	9b06      	ldr	r3, [sp, #24]
1a002660:	9301      	str	r3, [sp, #4]
1a002662:	2304      	movs	r3, #4
1a002664:	9300      	str	r3, [sp, #0]
1a002666:	4623      	mov	r3, r4
1a002668:	9a07      	ldr	r2, [sp, #28]
1a00266a:	490a      	ldr	r1, [pc, #40]	; (1a002694 <xTimerCreateTimerTask+0x58>)
1a00266c:	480a      	ldr	r0, [pc, #40]	; (1a002698 <xTimerCreateTimerTask+0x5c>)
1a00266e:	f7ff fa15 	bl	1a001a9c <xTaskCreateStatic>
1a002672:	4b0a      	ldr	r3, [pc, #40]	; (1a00269c <xTimerCreateTimerTask+0x60>)
1a002674:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a002676:	b110      	cbz	r0, 1a00267e <xTimerCreateTimerTask+0x42>
}
1a002678:	2001      	movs	r0, #1
1a00267a:	b008      	add	sp, #32
1a00267c:	bd10      	pop	{r4, pc}
1a00267e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002682:	f383 8811 	msr	BASEPRI, r3
1a002686:	f3bf 8f6f 	isb	sy
1a00268a:	f3bf 8f4f 	dsb	sy
1a00268e:	e7fe      	b.n	1a00268e <xTimerCreateTimerTask+0x52>
1a002690:	10003ae8 	.word	0x10003ae8
1a002694:	1a0059c4 	.word	0x1a0059c4
1a002698:	1a0029cd 	.word	0x1a0029cd
1a00269c:	10003aec 	.word	0x10003aec

1a0026a0 <xTimerCreateStatic>:
	{
1a0026a0:	b530      	push	{r4, r5, lr}
1a0026a2:	b085      	sub	sp, #20
1a0026a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a0026a6:	2530      	movs	r5, #48	; 0x30
1a0026a8:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a0026aa:	9d03      	ldr	r5, [sp, #12]
1a0026ac:	2d30      	cmp	r5, #48	; 0x30
1a0026ae:	d008      	beq.n	1a0026c2 <xTimerCreateStatic+0x22>
1a0026b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026b4:	f383 8811 	msr	BASEPRI, r3
1a0026b8:	f3bf 8f6f 	isb	sy
1a0026bc:	f3bf 8f4f 	dsb	sy
1a0026c0:	e7fe      	b.n	1a0026c0 <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a0026c2:	b944      	cbnz	r4, 1a0026d6 <xTimerCreateStatic+0x36>
1a0026c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026c8:	f383 8811 	msr	BASEPRI, r3
1a0026cc:	f3bf 8f6f 	isb	sy
1a0026d0:	f3bf 8f4f 	dsb	sy
1a0026d4:	e7fe      	b.n	1a0026d4 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a0026d6:	9401      	str	r4, [sp, #4]
1a0026d8:	9d08      	ldr	r5, [sp, #32]
1a0026da:	9500      	str	r5, [sp, #0]
1a0026dc:	f7ff ff8e 	bl	1a0025fc <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a0026e0:	2301      	movs	r3, #1
1a0026e2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a0026e6:	4620      	mov	r0, r4
1a0026e8:	b005      	add	sp, #20
1a0026ea:	bd30      	pop	{r4, r5, pc}

1a0026ec <xTimerGenericCommand>:
	configASSERT( xTimer );
1a0026ec:	b1c8      	cbz	r0, 1a002722 <xTimerGenericCommand+0x36>
{
1a0026ee:	b530      	push	{r4, r5, lr}
1a0026f0:	b085      	sub	sp, #20
1a0026f2:	4615      	mov	r5, r2
1a0026f4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a0026f6:	4a17      	ldr	r2, [pc, #92]	; (1a002754 <xTimerGenericCommand+0x68>)
1a0026f8:	6810      	ldr	r0, [r2, #0]
1a0026fa:	b340      	cbz	r0, 1a00274e <xTimerGenericCommand+0x62>
1a0026fc:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a0026fe:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a002700:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a002702:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a002704:	2905      	cmp	r1, #5
1a002706:	dc1d      	bgt.n	1a002744 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a002708:	f7ff fdda 	bl	1a0022c0 <xTaskGetSchedulerState>
1a00270c:	2802      	cmp	r0, #2
1a00270e:	d011      	beq.n	1a002734 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a002710:	2300      	movs	r3, #0
1a002712:	461a      	mov	r2, r3
1a002714:	4669      	mov	r1, sp
1a002716:	480f      	ldr	r0, [pc, #60]	; (1a002754 <xTimerGenericCommand+0x68>)
1a002718:	6800      	ldr	r0, [r0, #0]
1a00271a:	f7fe fcd3 	bl	1a0010c4 <xQueueGenericSend>
}
1a00271e:	b005      	add	sp, #20
1a002720:	bd30      	pop	{r4, r5, pc}
1a002722:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002726:	f383 8811 	msr	BASEPRI, r3
1a00272a:	f3bf 8f6f 	isb	sy
1a00272e:	f3bf 8f4f 	dsb	sy
1a002732:	e7fe      	b.n	1a002732 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a002734:	2300      	movs	r3, #0
1a002736:	9a08      	ldr	r2, [sp, #32]
1a002738:	4669      	mov	r1, sp
1a00273a:	4806      	ldr	r0, [pc, #24]	; (1a002754 <xTimerGenericCommand+0x68>)
1a00273c:	6800      	ldr	r0, [r0, #0]
1a00273e:	f7fe fcc1 	bl	1a0010c4 <xQueueGenericSend>
1a002742:	e7ec      	b.n	1a00271e <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a002744:	2300      	movs	r3, #0
1a002746:	4669      	mov	r1, sp
1a002748:	f7fe fd91 	bl	1a00126e <xQueueGenericSendFromISR>
1a00274c:	e7e7      	b.n	1a00271e <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a00274e:	2000      	movs	r0, #0
	return xReturn;
1a002750:	e7e5      	b.n	1a00271e <xTimerGenericCommand+0x32>
1a002752:	bf00      	nop
1a002754:	10003ae8 	.word	0x10003ae8

1a002758 <prvSwitchTimerLists>:
{
1a002758:	b570      	push	{r4, r5, r6, lr}
1a00275a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a00275c:	4b1a      	ldr	r3, [pc, #104]	; (1a0027c8 <prvSwitchTimerLists+0x70>)
1a00275e:	681b      	ldr	r3, [r3, #0]
1a002760:	681a      	ldr	r2, [r3, #0]
1a002762:	b352      	cbz	r2, 1a0027ba <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002764:	68db      	ldr	r3, [r3, #12]
1a002766:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002768:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00276a:	1d25      	adds	r5, r4, #4
1a00276c:	4628      	mov	r0, r5
1a00276e:	f7fe ffd0 	bl	1a001712 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002772:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002774:	4620      	mov	r0, r4
1a002776:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002778:	69e3      	ldr	r3, [r4, #28]
1a00277a:	2b01      	cmp	r3, #1
1a00277c:	d1ee      	bne.n	1a00275c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a00277e:	69a3      	ldr	r3, [r4, #24]
1a002780:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a002782:	429e      	cmp	r6, r3
1a002784:	d207      	bcs.n	1a002796 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002786:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002788:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a00278a:	4629      	mov	r1, r5
1a00278c:	4b0e      	ldr	r3, [pc, #56]	; (1a0027c8 <prvSwitchTimerLists+0x70>)
1a00278e:	6818      	ldr	r0, [r3, #0]
1a002790:	f7fe ffa5 	bl	1a0016de <vListInsert>
1a002794:	e7e2      	b.n	1a00275c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002796:	2100      	movs	r1, #0
1a002798:	9100      	str	r1, [sp, #0]
1a00279a:	460b      	mov	r3, r1
1a00279c:	4632      	mov	r2, r6
1a00279e:	4620      	mov	r0, r4
1a0027a0:	f7ff ffa4 	bl	1a0026ec <xTimerGenericCommand>
				configASSERT( xResult );
1a0027a4:	2800      	cmp	r0, #0
1a0027a6:	d1d9      	bne.n	1a00275c <prvSwitchTimerLists+0x4>
1a0027a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027ac:	f383 8811 	msr	BASEPRI, r3
1a0027b0:	f3bf 8f6f 	isb	sy
1a0027b4:	f3bf 8f4f 	dsb	sy
1a0027b8:	e7fe      	b.n	1a0027b8 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a0027ba:	4a04      	ldr	r2, [pc, #16]	; (1a0027cc <prvSwitchTimerLists+0x74>)
1a0027bc:	6810      	ldr	r0, [r2, #0]
1a0027be:	4902      	ldr	r1, [pc, #8]	; (1a0027c8 <prvSwitchTimerLists+0x70>)
1a0027c0:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a0027c2:	6013      	str	r3, [r2, #0]
}
1a0027c4:	b002      	add	sp, #8
1a0027c6:	bd70      	pop	{r4, r5, r6, pc}
1a0027c8:	100039c4 	.word	0x100039c4
1a0027cc:	100039c8 	.word	0x100039c8

1a0027d0 <prvSampleTimeNow>:
{
1a0027d0:	b538      	push	{r3, r4, r5, lr}
1a0027d2:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a0027d4:	f7ff fa60 	bl	1a001c98 <xTaskGetTickCount>
1a0027d8:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a0027da:	4b07      	ldr	r3, [pc, #28]	; (1a0027f8 <prvSampleTimeNow+0x28>)
1a0027dc:	681b      	ldr	r3, [r3, #0]
1a0027de:	4283      	cmp	r3, r0
1a0027e0:	d805      	bhi.n	1a0027ee <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a0027e2:	2300      	movs	r3, #0
1a0027e4:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a0027e6:	4b04      	ldr	r3, [pc, #16]	; (1a0027f8 <prvSampleTimeNow+0x28>)
1a0027e8:	601c      	str	r4, [r3, #0]
}
1a0027ea:	4620      	mov	r0, r4
1a0027ec:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a0027ee:	f7ff ffb3 	bl	1a002758 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a0027f2:	2301      	movs	r3, #1
1a0027f4:	602b      	str	r3, [r5, #0]
1a0027f6:	e7f6      	b.n	1a0027e6 <prvSampleTimeNow+0x16>
1a0027f8:	10003a94 	.word	0x10003a94

1a0027fc <prvProcessExpiredTimer>:
{
1a0027fc:	b570      	push	{r4, r5, r6, lr}
1a0027fe:	b082      	sub	sp, #8
1a002800:	4605      	mov	r5, r0
1a002802:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002804:	4b14      	ldr	r3, [pc, #80]	; (1a002858 <prvProcessExpiredTimer+0x5c>)
1a002806:	681b      	ldr	r3, [r3, #0]
1a002808:	68db      	ldr	r3, [r3, #12]
1a00280a:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00280c:	1d20      	adds	r0, r4, #4
1a00280e:	f7fe ff80 	bl	1a001712 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002812:	69e3      	ldr	r3, [r4, #28]
1a002814:	2b01      	cmp	r3, #1
1a002816:	d004      	beq.n	1a002822 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002818:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00281a:	4620      	mov	r0, r4
1a00281c:	4798      	blx	r3
}
1a00281e:	b002      	add	sp, #8
1a002820:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a002822:	69a1      	ldr	r1, [r4, #24]
1a002824:	462b      	mov	r3, r5
1a002826:	4632      	mov	r2, r6
1a002828:	4429      	add	r1, r5
1a00282a:	4620      	mov	r0, r4
1a00282c:	f7ff fe8a 	bl	1a002544 <prvInsertTimerInActiveList>
1a002830:	2800      	cmp	r0, #0
1a002832:	d0f1      	beq.n	1a002818 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002834:	2100      	movs	r1, #0
1a002836:	9100      	str	r1, [sp, #0]
1a002838:	460b      	mov	r3, r1
1a00283a:	462a      	mov	r2, r5
1a00283c:	4620      	mov	r0, r4
1a00283e:	f7ff ff55 	bl	1a0026ec <xTimerGenericCommand>
			configASSERT( xResult );
1a002842:	2800      	cmp	r0, #0
1a002844:	d1e8      	bne.n	1a002818 <prvProcessExpiredTimer+0x1c>
1a002846:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00284a:	f383 8811 	msr	BASEPRI, r3
1a00284e:	f3bf 8f6f 	isb	sy
1a002852:	f3bf 8f4f 	dsb	sy
1a002856:	e7fe      	b.n	1a002856 <prvProcessExpiredTimer+0x5a>
1a002858:	100039c4 	.word	0x100039c4

1a00285c <prvProcessTimerOrBlockTask>:
{
1a00285c:	b570      	push	{r4, r5, r6, lr}
1a00285e:	b082      	sub	sp, #8
1a002860:	4606      	mov	r6, r0
1a002862:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002864:	f7ff fa10 	bl	1a001c88 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002868:	a801      	add	r0, sp, #4
1a00286a:	f7ff ffb1 	bl	1a0027d0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a00286e:	9b01      	ldr	r3, [sp, #4]
1a002870:	bb1b      	cbnz	r3, 1a0028ba <prvProcessTimerOrBlockTask+0x5e>
1a002872:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002874:	b90c      	cbnz	r4, 1a00287a <prvProcessTimerOrBlockTask+0x1e>
1a002876:	42b0      	cmp	r0, r6
1a002878:	d218      	bcs.n	1a0028ac <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a00287a:	b12c      	cbz	r4, 1a002888 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a00287c:	4b11      	ldr	r3, [pc, #68]	; (1a0028c4 <prvProcessTimerOrBlockTask+0x68>)
1a00287e:	681b      	ldr	r3, [r3, #0]
1a002880:	681c      	ldr	r4, [r3, #0]
1a002882:	fab4 f484 	clz	r4, r4
1a002886:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002888:	4622      	mov	r2, r4
1a00288a:	1b71      	subs	r1, r6, r5
1a00288c:	4b0e      	ldr	r3, [pc, #56]	; (1a0028c8 <prvProcessTimerOrBlockTask+0x6c>)
1a00288e:	6818      	ldr	r0, [r3, #0]
1a002890:	f7fe fee2 	bl	1a001658 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002894:	f7ff fa92 	bl	1a001dbc <xTaskResumeAll>
1a002898:	b988      	cbnz	r0, 1a0028be <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a00289a:	4b0c      	ldr	r3, [pc, #48]	; (1a0028cc <prvProcessTimerOrBlockTask+0x70>)
1a00289c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0028a0:	601a      	str	r2, [r3, #0]
1a0028a2:	f3bf 8f4f 	dsb	sy
1a0028a6:	f3bf 8f6f 	isb	sy
1a0028aa:	e008      	b.n	1a0028be <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a0028ac:	f7ff fa86 	bl	1a001dbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a0028b0:	4629      	mov	r1, r5
1a0028b2:	4630      	mov	r0, r6
1a0028b4:	f7ff ffa2 	bl	1a0027fc <prvProcessExpiredTimer>
1a0028b8:	e001      	b.n	1a0028be <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a0028ba:	f7ff fa7f 	bl	1a001dbc <xTaskResumeAll>
}
1a0028be:	b002      	add	sp, #8
1a0028c0:	bd70      	pop	{r4, r5, r6, pc}
1a0028c2:	bf00      	nop
1a0028c4:	100039c8 	.word	0x100039c8
1a0028c8:	10003ae8 	.word	0x10003ae8
1a0028cc:	e000ed04 	.word	0xe000ed04

1a0028d0 <prvProcessReceivedCommands>:
{
1a0028d0:	b530      	push	{r4, r5, lr}
1a0028d2:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0028d4:	e002      	b.n	1a0028dc <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a0028d6:	9b04      	ldr	r3, [sp, #16]
1a0028d8:	2b00      	cmp	r3, #0
1a0028da:	da0f      	bge.n	1a0028fc <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0028dc:	2200      	movs	r2, #0
1a0028de:	a904      	add	r1, sp, #16
1a0028e0:	4b39      	ldr	r3, [pc, #228]	; (1a0029c8 <prvProcessReceivedCommands+0xf8>)
1a0028e2:	6818      	ldr	r0, [r3, #0]
1a0028e4:	f7fe fd2a 	bl	1a00133c <xQueueReceive>
1a0028e8:	2800      	cmp	r0, #0
1a0028ea:	d06a      	beq.n	1a0029c2 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a0028ec:	9b04      	ldr	r3, [sp, #16]
1a0028ee:	2b00      	cmp	r3, #0
1a0028f0:	daf1      	bge.n	1a0028d6 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a0028f2:	9907      	ldr	r1, [sp, #28]
1a0028f4:	9806      	ldr	r0, [sp, #24]
1a0028f6:	9b05      	ldr	r3, [sp, #20]
1a0028f8:	4798      	blx	r3
1a0028fa:	e7ec      	b.n	1a0028d6 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a0028fc:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a0028fe:	6963      	ldr	r3, [r4, #20]
1a002900:	b113      	cbz	r3, 1a002908 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002902:	1d20      	adds	r0, r4, #4
1a002904:	f7fe ff05 	bl	1a001712 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002908:	a803      	add	r0, sp, #12
1a00290a:	f7ff ff61 	bl	1a0027d0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a00290e:	9b04      	ldr	r3, [sp, #16]
1a002910:	2b09      	cmp	r3, #9
1a002912:	d8e3      	bhi.n	1a0028dc <prvProcessReceivedCommands+0xc>
1a002914:	a201      	add	r2, pc, #4	; (adr r2, 1a00291c <prvProcessReceivedCommands+0x4c>)
1a002916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a00291a:	bf00      	nop
1a00291c:	1a002945 	.word	0x1a002945
1a002920:	1a002945 	.word	0x1a002945
1a002924:	1a002945 	.word	0x1a002945
1a002928:	1a0028dd 	.word	0x1a0028dd
1a00292c:	1a00298d 	.word	0x1a00298d
1a002930:	1a0029b3 	.word	0x1a0029b3
1a002934:	1a002945 	.word	0x1a002945
1a002938:	1a002945 	.word	0x1a002945
1a00293c:	1a0028dd 	.word	0x1a0028dd
1a002940:	1a00298d 	.word	0x1a00298d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a002944:	9905      	ldr	r1, [sp, #20]
1a002946:	69a5      	ldr	r5, [r4, #24]
1a002948:	460b      	mov	r3, r1
1a00294a:	4602      	mov	r2, r0
1a00294c:	4429      	add	r1, r5
1a00294e:	4620      	mov	r0, r4
1a002950:	f7ff fdf8 	bl	1a002544 <prvInsertTimerInActiveList>
1a002954:	2800      	cmp	r0, #0
1a002956:	d0c1      	beq.n	1a0028dc <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002958:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00295a:	4620      	mov	r0, r4
1a00295c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00295e:	69e3      	ldr	r3, [r4, #28]
1a002960:	2b01      	cmp	r3, #1
1a002962:	d1bb      	bne.n	1a0028dc <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002964:	69a2      	ldr	r2, [r4, #24]
1a002966:	2100      	movs	r1, #0
1a002968:	9100      	str	r1, [sp, #0]
1a00296a:	460b      	mov	r3, r1
1a00296c:	9805      	ldr	r0, [sp, #20]
1a00296e:	4402      	add	r2, r0
1a002970:	4620      	mov	r0, r4
1a002972:	f7ff febb 	bl	1a0026ec <xTimerGenericCommand>
							configASSERT( xResult );
1a002976:	2800      	cmp	r0, #0
1a002978:	d1b0      	bne.n	1a0028dc <prvProcessReceivedCommands+0xc>
1a00297a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00297e:	f383 8811 	msr	BASEPRI, r3
1a002982:	f3bf 8f6f 	isb	sy
1a002986:	f3bf 8f4f 	dsb	sy
1a00298a:	e7fe      	b.n	1a00298a <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a00298c:	9905      	ldr	r1, [sp, #20]
1a00298e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002990:	b131      	cbz	r1, 1a0029a0 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002992:	4603      	mov	r3, r0
1a002994:	4602      	mov	r2, r0
1a002996:	4401      	add	r1, r0
1a002998:	4620      	mov	r0, r4
1a00299a:	f7ff fdd3 	bl	1a002544 <prvInsertTimerInActiveList>
					break;
1a00299e:	e79d      	b.n	1a0028dc <prvProcessReceivedCommands+0xc>
1a0029a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029a4:	f383 8811 	msr	BASEPRI, r3
1a0029a8:	f3bf 8f6f 	isb	sy
1a0029ac:	f3bf 8f4f 	dsb	sy
1a0029b0:	e7fe      	b.n	1a0029b0 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a0029b2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a0029b6:	2b00      	cmp	r3, #0
1a0029b8:	d190      	bne.n	1a0028dc <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a0029ba:	4620      	mov	r0, r4
1a0029bc:	f7fe f9ee 	bl	1a000d9c <vPortFree>
1a0029c0:	e78c      	b.n	1a0028dc <prvProcessReceivedCommands+0xc>
}
1a0029c2:	b009      	add	sp, #36	; 0x24
1a0029c4:	bd30      	pop	{r4, r5, pc}
1a0029c6:	bf00      	nop
1a0029c8:	10003ae8 	.word	0x10003ae8

1a0029cc <prvTimerTask>:
{
1a0029cc:	b500      	push	{lr}
1a0029ce:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a0029d0:	a801      	add	r0, sp, #4
1a0029d2:	f7ff fda7 	bl	1a002524 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a0029d6:	9901      	ldr	r1, [sp, #4]
1a0029d8:	f7ff ff40 	bl	1a00285c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a0029dc:	f7ff ff78 	bl	1a0028d0 <prvProcessReceivedCommands>
1a0029e0:	e7f6      	b.n	1a0029d0 <prvTimerTask+0x4>
1a0029e2:	Address 0x000000001a0029e2 is out of bounds.


1a0029e4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a0029e4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a0029e6:	2300      	movs	r3, #0
1a0029e8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a0029ea:	4b0d      	ldr	r3, [pc, #52]	; (1a002a20 <prvTaskExitError+0x3c>)
1a0029ec:	681b      	ldr	r3, [r3, #0]
1a0029ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0029f2:	d008      	beq.n	1a002a06 <prvTaskExitError+0x22>
1a0029f4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029f8:	f383 8811 	msr	BASEPRI, r3
1a0029fc:	f3bf 8f6f 	isb	sy
1a002a00:	f3bf 8f4f 	dsb	sy
1a002a04:	e7fe      	b.n	1a002a04 <prvTaskExitError+0x20>
1a002a06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a0a:	f383 8811 	msr	BASEPRI, r3
1a002a0e:	f3bf 8f6f 	isb	sy
1a002a12:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002a16:	9b01      	ldr	r3, [sp, #4]
1a002a18:	2b00      	cmp	r3, #0
1a002a1a:	d0fc      	beq.n	1a002a16 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002a1c:	b002      	add	sp, #8
1a002a1e:	4770      	bx	lr
1a002a20:	100000ac 	.word	0x100000ac

1a002a24 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002a24:	4808      	ldr	r0, [pc, #32]	; (1a002a48 <prvPortStartFirstTask+0x24>)
1a002a26:	6800      	ldr	r0, [r0, #0]
1a002a28:	6800      	ldr	r0, [r0, #0]
1a002a2a:	f380 8808 	msr	MSP, r0
1a002a2e:	f04f 0000 	mov.w	r0, #0
1a002a32:	f380 8814 	msr	CONTROL, r0
1a002a36:	b662      	cpsie	i
1a002a38:	b661      	cpsie	f
1a002a3a:	f3bf 8f4f 	dsb	sy
1a002a3e:	f3bf 8f6f 	isb	sy
1a002a42:	df00      	svc	0
1a002a44:	bf00      	nop
1a002a46:	0000      	.short	0x0000
1a002a48:	e000ed08 	.word	0xe000ed08

1a002a4c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002a4c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002a5c <vPortEnableVFP+0x10>
1a002a50:	6801      	ldr	r1, [r0, #0]
1a002a52:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002a56:	6001      	str	r1, [r0, #0]
1a002a58:	4770      	bx	lr
1a002a5a:	0000      	.short	0x0000
1a002a5c:	e000ed88 	.word	0xe000ed88

1a002a60 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002a64:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002a68:	f021 0101 	bic.w	r1, r1, #1
1a002a6c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002a70:	4b05      	ldr	r3, [pc, #20]	; (1a002a88 <pxPortInitialiseStack+0x28>)
1a002a72:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002a76:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002a7a:	f06f 0302 	mvn.w	r3, #2
1a002a7e:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002a82:	3844      	subs	r0, #68	; 0x44
1a002a84:	4770      	bx	lr
1a002a86:	bf00      	nop
1a002a88:	1a0029e5 	.word	0x1a0029e5
1a002a8c:	ffffffff 	.word	0xffffffff

1a002a90 <SVC_Handler>:
	__asm volatile (
1a002a90:	4b07      	ldr	r3, [pc, #28]	; (1a002ab0 <pxCurrentTCBConst2>)
1a002a92:	6819      	ldr	r1, [r3, #0]
1a002a94:	6808      	ldr	r0, [r1, #0]
1a002a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002a9a:	f380 8809 	msr	PSP, r0
1a002a9e:	f3bf 8f6f 	isb	sy
1a002aa2:	f04f 0000 	mov.w	r0, #0
1a002aa6:	f380 8811 	msr	BASEPRI, r0
1a002aaa:	4770      	bx	lr
1a002aac:	f3af 8000 	nop.w

1a002ab0 <pxCurrentTCBConst2>:
1a002ab0:	1000389c 	.word	0x1000389c

1a002ab4 <vPortEnterCritical>:
1a002ab4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ab8:	f383 8811 	msr	BASEPRI, r3
1a002abc:	f3bf 8f6f 	isb	sy
1a002ac0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002ac4:	4a0a      	ldr	r2, [pc, #40]	; (1a002af0 <vPortEnterCritical+0x3c>)
1a002ac6:	6813      	ldr	r3, [r2, #0]
1a002ac8:	3301      	adds	r3, #1
1a002aca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a002acc:	2b01      	cmp	r3, #1
1a002ace:	d000      	beq.n	1a002ad2 <vPortEnterCritical+0x1e>
}
1a002ad0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002ad2:	4b08      	ldr	r3, [pc, #32]	; (1a002af4 <vPortEnterCritical+0x40>)
1a002ad4:	681b      	ldr	r3, [r3, #0]
1a002ad6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002ada:	d0f9      	beq.n	1a002ad0 <vPortEnterCritical+0x1c>
1a002adc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ae0:	f383 8811 	msr	BASEPRI, r3
1a002ae4:	f3bf 8f6f 	isb	sy
1a002ae8:	f3bf 8f4f 	dsb	sy
1a002aec:	e7fe      	b.n	1a002aec <vPortEnterCritical+0x38>
1a002aee:	bf00      	nop
1a002af0:	100000ac 	.word	0x100000ac
1a002af4:	e000ed04 	.word	0xe000ed04

1a002af8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002af8:	4b09      	ldr	r3, [pc, #36]	; (1a002b20 <vPortExitCritical+0x28>)
1a002afa:	681b      	ldr	r3, [r3, #0]
1a002afc:	b943      	cbnz	r3, 1a002b10 <vPortExitCritical+0x18>
1a002afe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b02:	f383 8811 	msr	BASEPRI, r3
1a002b06:	f3bf 8f6f 	isb	sy
1a002b0a:	f3bf 8f4f 	dsb	sy
1a002b0e:	e7fe      	b.n	1a002b0e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002b10:	3b01      	subs	r3, #1
1a002b12:	4a03      	ldr	r2, [pc, #12]	; (1a002b20 <vPortExitCritical+0x28>)
1a002b14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002b16:	b90b      	cbnz	r3, 1a002b1c <vPortExitCritical+0x24>
	__asm volatile
1a002b18:	f383 8811 	msr	BASEPRI, r3
}
1a002b1c:	4770      	bx	lr
1a002b1e:	bf00      	nop
1a002b20:	100000ac 	.word	0x100000ac
1a002b24:	ffffffff 	.word	0xffffffff
1a002b28:	ffffffff 	.word	0xffffffff
1a002b2c:	ffffffff 	.word	0xffffffff

1a002b30 <PendSV_Handler>:
	__asm volatile
1a002b30:	f3ef 8009 	mrs	r0, PSP
1a002b34:	f3bf 8f6f 	isb	sy
1a002b38:	4b15      	ldr	r3, [pc, #84]	; (1a002b90 <pxCurrentTCBConst>)
1a002b3a:	681a      	ldr	r2, [r3, #0]
1a002b3c:	f01e 0f10 	tst.w	lr, #16
1a002b40:	bf08      	it	eq
1a002b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002b4a:	6010      	str	r0, [r2, #0]
1a002b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002b50:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002b54:	f380 8811 	msr	BASEPRI, r0
1a002b58:	f3bf 8f4f 	dsb	sy
1a002b5c:	f3bf 8f6f 	isb	sy
1a002b60:	f7ff f9cc 	bl	1a001efc <vTaskSwitchContext>
1a002b64:	f04f 0000 	mov.w	r0, #0
1a002b68:	f380 8811 	msr	BASEPRI, r0
1a002b6c:	bc09      	pop	{r0, r3}
1a002b6e:	6819      	ldr	r1, [r3, #0]
1a002b70:	6808      	ldr	r0, [r1, #0]
1a002b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002b76:	f01e 0f10 	tst.w	lr, #16
1a002b7a:	bf08      	it	eq
1a002b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002b80:	f380 8809 	msr	PSP, r0
1a002b84:	f3bf 8f6f 	isb	sy
1a002b88:	4770      	bx	lr
1a002b8a:	bf00      	nop
1a002b8c:	f3af 8000 	nop.w

1a002b90 <pxCurrentTCBConst>:
1a002b90:	1000389c 	.word	0x1000389c

1a002b94 <SysTick_Handler>:
{
1a002b94:	b508      	push	{r3, lr}
	__asm volatile
1a002b96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b9a:	f383 8811 	msr	BASEPRI, r3
1a002b9e:	f3bf 8f6f 	isb	sy
1a002ba2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002ba6:	f7ff f87d 	bl	1a001ca4 <xTaskIncrementTick>
1a002baa:	b118      	cbz	r0, 1a002bb4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a002bac:	4b03      	ldr	r3, [pc, #12]	; (1a002bbc <SysTick_Handler+0x28>)
1a002bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002bb2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002bb4:	2300      	movs	r3, #0
1a002bb6:	f383 8811 	msr	BASEPRI, r3
}
1a002bba:	bd08      	pop	{r3, pc}
1a002bbc:	e000ed04 	.word	0xe000ed04

1a002bc0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002bc0:	4a08      	ldr	r2, [pc, #32]	; (1a002be4 <vPortSetupTimerInterrupt+0x24>)
1a002bc2:	2300      	movs	r3, #0
1a002bc4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002bc6:	4908      	ldr	r1, [pc, #32]	; (1a002be8 <vPortSetupTimerInterrupt+0x28>)
1a002bc8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a002bca:	4b08      	ldr	r3, [pc, #32]	; (1a002bec <vPortSetupTimerInterrupt+0x2c>)
1a002bcc:	681b      	ldr	r3, [r3, #0]
1a002bce:	4908      	ldr	r1, [pc, #32]	; (1a002bf0 <vPortSetupTimerInterrupt+0x30>)
1a002bd0:	fba1 1303 	umull	r1, r3, r1, r3
1a002bd4:	099b      	lsrs	r3, r3, #6
1a002bd6:	3b01      	subs	r3, #1
1a002bd8:	4906      	ldr	r1, [pc, #24]	; (1a002bf4 <vPortSetupTimerInterrupt+0x34>)
1a002bda:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a002bdc:	2307      	movs	r3, #7
1a002bde:	6013      	str	r3, [r2, #0]
}
1a002be0:	4770      	bx	lr
1a002be2:	bf00      	nop
1a002be4:	e000e010 	.word	0xe000e010
1a002be8:	e000e018 	.word	0xe000e018
1a002bec:	10003d88 	.word	0x10003d88
1a002bf0:	10624dd3 	.word	0x10624dd3
1a002bf4:	e000e014 	.word	0xe000e014

1a002bf8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002bf8:	4b3a      	ldr	r3, [pc, #232]	; (1a002ce4 <xPortStartScheduler+0xec>)
1a002bfa:	681a      	ldr	r2, [r3, #0]
1a002bfc:	4b3a      	ldr	r3, [pc, #232]	; (1a002ce8 <xPortStartScheduler+0xf0>)
1a002bfe:	429a      	cmp	r2, r3
1a002c00:	d00d      	beq.n	1a002c1e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002c02:	4b38      	ldr	r3, [pc, #224]	; (1a002ce4 <xPortStartScheduler+0xec>)
1a002c04:	681a      	ldr	r2, [r3, #0]
1a002c06:	4b39      	ldr	r3, [pc, #228]	; (1a002cec <xPortStartScheduler+0xf4>)
1a002c08:	429a      	cmp	r2, r3
1a002c0a:	d111      	bne.n	1a002c30 <xPortStartScheduler+0x38>
	__asm volatile
1a002c0c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c10:	f383 8811 	msr	BASEPRI, r3
1a002c14:	f3bf 8f6f 	isb	sy
1a002c18:	f3bf 8f4f 	dsb	sy
1a002c1c:	e7fe      	b.n	1a002c1c <xPortStartScheduler+0x24>
1a002c1e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c22:	f383 8811 	msr	BASEPRI, r3
1a002c26:	f3bf 8f6f 	isb	sy
1a002c2a:	f3bf 8f4f 	dsb	sy
1a002c2e:	e7fe      	b.n	1a002c2e <xPortStartScheduler+0x36>
{
1a002c30:	b510      	push	{r4, lr}
1a002c32:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002c34:	4b2e      	ldr	r3, [pc, #184]	; (1a002cf0 <xPortStartScheduler+0xf8>)
1a002c36:	781a      	ldrb	r2, [r3, #0]
1a002c38:	b2d2      	uxtb	r2, r2
1a002c3a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002c3c:	22ff      	movs	r2, #255	; 0xff
1a002c3e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002c40:	781b      	ldrb	r3, [r3, #0]
1a002c42:	b2db      	uxtb	r3, r3
1a002c44:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002c48:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002c4c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002c50:	4a28      	ldr	r2, [pc, #160]	; (1a002cf4 <xPortStartScheduler+0xfc>)
1a002c52:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002c54:	4b28      	ldr	r3, [pc, #160]	; (1a002cf8 <xPortStartScheduler+0x100>)
1a002c56:	2207      	movs	r2, #7
1a002c58:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002c5a:	e009      	b.n	1a002c70 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a002c5c:	4a26      	ldr	r2, [pc, #152]	; (1a002cf8 <xPortStartScheduler+0x100>)
1a002c5e:	6813      	ldr	r3, [r2, #0]
1a002c60:	3b01      	subs	r3, #1
1a002c62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002c64:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002c68:	005b      	lsls	r3, r3, #1
1a002c6a:	b2db      	uxtb	r3, r3
1a002c6c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002c70:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002c74:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002c78:	d1f0      	bne.n	1a002c5c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002c7a:	4b1f      	ldr	r3, [pc, #124]	; (1a002cf8 <xPortStartScheduler+0x100>)
1a002c7c:	681b      	ldr	r3, [r3, #0]
1a002c7e:	2b04      	cmp	r3, #4
1a002c80:	d008      	beq.n	1a002c94 <xPortStartScheduler+0x9c>
1a002c82:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c86:	f383 8811 	msr	BASEPRI, r3
1a002c8a:	f3bf 8f6f 	isb	sy
1a002c8e:	f3bf 8f4f 	dsb	sy
1a002c92:	e7fe      	b.n	1a002c92 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002c94:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002c96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002c9a:	4a17      	ldr	r2, [pc, #92]	; (1a002cf8 <xPortStartScheduler+0x100>)
1a002c9c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002c9e:	9b01      	ldr	r3, [sp, #4]
1a002ca0:	b2db      	uxtb	r3, r3
1a002ca2:	4a13      	ldr	r2, [pc, #76]	; (1a002cf0 <xPortStartScheduler+0xf8>)
1a002ca4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002ca6:	4b15      	ldr	r3, [pc, #84]	; (1a002cfc <xPortStartScheduler+0x104>)
1a002ca8:	681a      	ldr	r2, [r3, #0]
1a002caa:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002cae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002cb0:	681a      	ldr	r2, [r3, #0]
1a002cb2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002cb6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002cb8:	f7ff ff82 	bl	1a002bc0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a002cbc:	2400      	movs	r4, #0
1a002cbe:	4b10      	ldr	r3, [pc, #64]	; (1a002d00 <xPortStartScheduler+0x108>)
1a002cc0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002cc2:	f7ff fec3 	bl	1a002a4c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002cc6:	4a0f      	ldr	r2, [pc, #60]	; (1a002d04 <xPortStartScheduler+0x10c>)
1a002cc8:	6813      	ldr	r3, [r2, #0]
1a002cca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a002cce:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002cd0:	f7ff fea8 	bl	1a002a24 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002cd4:	f7ff f912 	bl	1a001efc <vTaskSwitchContext>
	prvTaskExitError();
1a002cd8:	f7ff fe84 	bl	1a0029e4 <prvTaskExitError>
}
1a002cdc:	4620      	mov	r0, r4
1a002cde:	b002      	add	sp, #8
1a002ce0:	bd10      	pop	{r4, pc}
1a002ce2:	bf00      	nop
1a002ce4:	e000ed00 	.word	0xe000ed00
1a002ce8:	410fc271 	.word	0x410fc271
1a002cec:	410fc270 	.word	0x410fc270
1a002cf0:	e000e400 	.word	0xe000e400
1a002cf4:	10003af0 	.word	0x10003af0
1a002cf8:	10003af4 	.word	0x10003af4
1a002cfc:	e000ed20 	.word	0xe000ed20
1a002d00:	100000ac 	.word	0x100000ac
1a002d04:	e000ef34 	.word	0xe000ef34

1a002d08 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002d08:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a002d0c:	2b0f      	cmp	r3, #15
1a002d0e:	d90f      	bls.n	1a002d30 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002d10:	4a10      	ldr	r2, [pc, #64]	; (1a002d54 <vPortValidateInterruptPriority+0x4c>)
1a002d12:	5c9b      	ldrb	r3, [r3, r2]
1a002d14:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002d16:	4a10      	ldr	r2, [pc, #64]	; (1a002d58 <vPortValidateInterruptPriority+0x50>)
1a002d18:	7812      	ldrb	r2, [r2, #0]
1a002d1a:	429a      	cmp	r2, r3
1a002d1c:	d908      	bls.n	1a002d30 <vPortValidateInterruptPriority+0x28>
1a002d1e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d22:	f383 8811 	msr	BASEPRI, r3
1a002d26:	f3bf 8f6f 	isb	sy
1a002d2a:	f3bf 8f4f 	dsb	sy
1a002d2e:	e7fe      	b.n	1a002d2e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002d30:	4b0a      	ldr	r3, [pc, #40]	; (1a002d5c <vPortValidateInterruptPriority+0x54>)
1a002d32:	681b      	ldr	r3, [r3, #0]
1a002d34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002d38:	4a09      	ldr	r2, [pc, #36]	; (1a002d60 <vPortValidateInterruptPriority+0x58>)
1a002d3a:	6812      	ldr	r2, [r2, #0]
1a002d3c:	4293      	cmp	r3, r2
1a002d3e:	d908      	bls.n	1a002d52 <vPortValidateInterruptPriority+0x4a>
1a002d40:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d44:	f383 8811 	msr	BASEPRI, r3
1a002d48:	f3bf 8f6f 	isb	sy
1a002d4c:	f3bf 8f4f 	dsb	sy
1a002d50:	e7fe      	b.n	1a002d50 <vPortValidateInterruptPriority+0x48>
	}
1a002d52:	4770      	bx	lr
1a002d54:	e000e3f0 	.word	0xe000e3f0
1a002d58:	10003af0 	.word	0x10003af0
1a002d5c:	e000ed0c 	.word	0xe000ed0c
1a002d60:	10003af4 	.word	0x10003af4

1a002d64 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002d64:	2200      	movs	r2, #0
1a002d66:	2a05      	cmp	r2, #5
1a002d68:	d819      	bhi.n	1a002d9e <Board_LED_Init+0x3a>
{
1a002d6a:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002d6c:	490c      	ldr	r1, [pc, #48]	; (1a002da0 <Board_LED_Init+0x3c>)
1a002d6e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002d72:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002d76:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002d78:	4b0a      	ldr	r3, [pc, #40]	; (1a002da4 <Board_LED_Init+0x40>)
1a002d7a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a002d7e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002d82:	2001      	movs	r0, #1
1a002d84:	40a0      	lsls	r0, r4
1a002d86:	4301      	orrs	r1, r0
1a002d88:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002d8c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002d90:	2100      	movs	r1, #0
1a002d92:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002d94:	3201      	adds	r2, #1
1a002d96:	2a05      	cmp	r2, #5
1a002d98:	d9e8      	bls.n	1a002d6c <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a002d9a:	bc70      	pop	{r4, r5, r6}
1a002d9c:	4770      	bx	lr
1a002d9e:	4770      	bx	lr
1a002da0:	1a0059d8 	.word	0x1a0059d8
1a002da4:	400f4000 	.word	0x400f4000

1a002da8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002da8:	2300      	movs	r3, #0
1a002daa:	2b03      	cmp	r3, #3
1a002dac:	d816      	bhi.n	1a002ddc <Board_TEC_Init+0x34>
{
1a002dae:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002db0:	490b      	ldr	r1, [pc, #44]	; (1a002de0 <Board_TEC_Init+0x38>)
1a002db2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002db6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002dba:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002dbc:	4c09      	ldr	r4, [pc, #36]	; (1a002de4 <Board_TEC_Init+0x3c>)
1a002dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002dc2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002dc6:	2001      	movs	r0, #1
1a002dc8:	40a8      	lsls	r0, r5
1a002dca:	ea21 0100 	bic.w	r1, r1, r0
1a002dce:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002dd2:	3301      	adds	r3, #1
1a002dd4:	2b03      	cmp	r3, #3
1a002dd6:	d9eb      	bls.n	1a002db0 <Board_TEC_Init+0x8>
    }
}
1a002dd8:	bc30      	pop	{r4, r5}
1a002dda:	4770      	bx	lr
1a002ddc:	4770      	bx	lr
1a002dde:	bf00      	nop
1a002de0:	1a0059d0 	.word	0x1a0059d0
1a002de4:	400f4000 	.word	0x400f4000

1a002de8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002de8:	2300      	movs	r3, #0
1a002dea:	2b08      	cmp	r3, #8
1a002dec:	d816      	bhi.n	1a002e1c <Board_GPIO_Init+0x34>
{
1a002dee:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002df0:	490b      	ldr	r1, [pc, #44]	; (1a002e20 <Board_GPIO_Init+0x38>)
1a002df2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002df6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002dfa:	784d      	ldrb	r5, [r1, #1]
1a002dfc:	4c09      	ldr	r4, [pc, #36]	; (1a002e24 <Board_GPIO_Init+0x3c>)
1a002dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002e02:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002e06:	2001      	movs	r0, #1
1a002e08:	40a8      	lsls	r0, r5
1a002e0a:	ea21 0100 	bic.w	r1, r1, r0
1a002e0e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002e12:	3301      	adds	r3, #1
1a002e14:	2b08      	cmp	r3, #8
1a002e16:	d9eb      	bls.n	1a002df0 <Board_GPIO_Init+0x8>
    }
}
1a002e18:	bc30      	pop	{r4, r5}
1a002e1a:	4770      	bx	lr
1a002e1c:	4770      	bx	lr
1a002e1e:	bf00      	nop
1a002e20:	1a0059e4 	.word	0x1a0059e4
1a002e24:	400f4000 	.word	0x400f4000

1a002e28 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002e28:	b510      	push	{r4, lr}
1a002e2a:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a002e2c:	4c08      	ldr	r4, [pc, #32]	; (1a002e50 <Board_ADC_Init+0x28>)
1a002e2e:	4669      	mov	r1, sp
1a002e30:	4620      	mov	r0, r4
1a002e32:	f000 f9dd 	bl	1a0031f0 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002e36:	4a07      	ldr	r2, [pc, #28]	; (1a002e54 <Board_ADC_Init+0x2c>)
1a002e38:	4669      	mov	r1, sp
1a002e3a:	4620      	mov	r0, r4
1a002e3c:	f000 f9f8 	bl	1a003230 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002e40:	2200      	movs	r2, #0
1a002e42:	4669      	mov	r1, sp
1a002e44:	4620      	mov	r0, r4
1a002e46:	f000 fa0c 	bl	1a003262 <Chip_ADC_SetResolution>
}
1a002e4a:	b002      	add	sp, #8
1a002e4c:	bd10      	pop	{r4, pc}
1a002e4e:	bf00      	nop
1a002e50:	400e3000 	.word	0x400e3000
1a002e54:	00061a80 	.word	0x00061a80

1a002e58 <Board_SPI_Init>:
{
1a002e58:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a002e5a:	4c0b      	ldr	r4, [pc, #44]	; (1a002e88 <Board_SPI_Init+0x30>)
1a002e5c:	4620      	mov	r0, r4
1a002e5e:	f000 fdc3 	bl	1a0039e8 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002e62:	6863      	ldr	r3, [r4, #4]
1a002e64:	f023 0304 	bic.w	r3, r3, #4
1a002e68:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002e6a:	6823      	ldr	r3, [r4, #0]
1a002e6c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002e70:	f043 0307 	orr.w	r3, r3, #7
1a002e74:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002e76:	4905      	ldr	r1, [pc, #20]	; (1a002e8c <Board_SPI_Init+0x34>)
1a002e78:	4620      	mov	r0, r4
1a002e7a:	f000 fd96 	bl	1a0039aa <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002e7e:	6863      	ldr	r3, [r4, #4]
1a002e80:	f043 0302 	orr.w	r3, r3, #2
1a002e84:	6063      	str	r3, [r4, #4]
}
1a002e86:	bd10      	pop	{r4, pc}
1a002e88:	400c5000 	.word	0x400c5000
1a002e8c:	000186a0 	.word	0x000186a0

1a002e90 <Board_I2C_Init>:
{
1a002e90:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a002e92:	2000      	movs	r0, #0
1a002e94:	f000 fdd4 	bl	1a003a40 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002e98:	4b04      	ldr	r3, [pc, #16]	; (1a002eac <Board_I2C_Init+0x1c>)
1a002e9a:	f640 0208 	movw	r2, #2056	; 0x808
1a002e9e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002ea2:	4903      	ldr	r1, [pc, #12]	; (1a002eb0 <Board_I2C_Init+0x20>)
1a002ea4:	2000      	movs	r0, #0
1a002ea6:	f000 fddd 	bl	1a003a64 <Chip_I2C_SetClockRate>
}
1a002eaa:	bd08      	pop	{r3, pc}
1a002eac:	40086000 	.word	0x40086000
1a002eb0:	000f4240 	.word	0x000f4240

1a002eb4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002eb4:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a002eb6:	4c07      	ldr	r4, [pc, #28]	; (1a002ed4 <Board_Debug_Init+0x20>)
1a002eb8:	4620      	mov	r0, r4
1a002eba:	f000 f8b7 	bl	1a00302c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002ebe:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002ec2:	4620      	mov	r0, r4
1a002ec4:	f000 f8fc 	bl	1a0030c0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002ec8:	2303      	movs	r3, #3
1a002eca:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002ecc:	2301      	movs	r3, #1
1a002ece:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a002ed0:	bd10      	pop	{r4, pc}
1a002ed2:	bf00      	nop
1a002ed4:	400c1000 	.word	0x400c1000

1a002ed8 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002ed8:	4b03      	ldr	r3, [pc, #12]	; (1a002ee8 <Board_UARTPutChar+0x10>)
1a002eda:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a002edc:	f013 0f20 	tst.w	r3, #32
1a002ee0:	d0fa      	beq.n	1a002ed8 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002ee2:	4b01      	ldr	r3, [pc, #4]	; (1a002ee8 <Board_UARTPutChar+0x10>)
1a002ee4:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002ee6:	4770      	bx	lr
1a002ee8:	400c1000 	.word	0x400c1000

1a002eec <Board_UARTGetChar>:
	return pUART->LSR;
1a002eec:	4b05      	ldr	r3, [pc, #20]	; (1a002f04 <Board_UARTGetChar+0x18>)
1a002eee:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002ef0:	f013 0f01 	tst.w	r3, #1
1a002ef4:	d003      	beq.n	1a002efe <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002ef6:	4b03      	ldr	r3, [pc, #12]	; (1a002f04 <Board_UARTGetChar+0x18>)
1a002ef8:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a002efa:	b2c0      	uxtb	r0, r0
1a002efc:	4770      	bx	lr
    }
    return EOF;
1a002efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002f02:	4770      	bx	lr
1a002f04:	400c1000 	.word	0x400c1000

1a002f08 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002f08:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002f0a:	f7ff ffd3 	bl	1a002eb4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002f0e:	4808      	ldr	r0, [pc, #32]	; (1a002f30 <Board_Init+0x28>)
1a002f10:	f000 fd2a 	bl	1a003968 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a002f14:	f7ff ff68 	bl	1a002de8 <Board_GPIO_Init>
   Board_ADC_Init();
1a002f18:	f7ff ff86 	bl	1a002e28 <Board_ADC_Init>
   Board_SPI_Init();
1a002f1c:	f7ff ff9c 	bl	1a002e58 <Board_SPI_Init>
   Board_I2C_Init();
1a002f20:	f7ff ffb6 	bl	1a002e90 <Board_I2C_Init>

   Board_LED_Init();
1a002f24:	f7ff ff1e 	bl	1a002d64 <Board_LED_Init>
   Board_TEC_Init();
1a002f28:	f7ff ff3e 	bl	1a002da8 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a002f2c:	bd08      	pop	{r3, pc}
1a002f2e:	bf00      	nop
1a002f30:	400f4000 	.word	0x400f4000

1a002f34 <__stdio_putchar>:
    Chip_ADC_EnableChannel(LPC_ADC0, curADCChannel, DISABLE);
    curADCChannel = 0xFF;
    return data;
}

void __stdio_putchar(int c) {
1a002f34:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a002f36:	b2c0      	uxtb	r0, r0
1a002f38:	f7ff ffce 	bl	1a002ed8 <Board_UARTPutChar>
}
1a002f3c:	bd08      	pop	{r3, pc}

1a002f3e <__stdio_getchar>:

int __stdio_getchar() {
1a002f3e:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002f40:	f7ff ffd4 	bl	1a002eec <Board_UARTGetChar>
}
1a002f44:	bd08      	pop	{r3, pc}

1a002f46 <__stdio_init>:

void __stdio_init() {
1a002f46:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002f48:	f7ff ffb4 	bl	1a002eb4 <Board_Debug_Init>
1a002f4c:	bd08      	pop	{r3, pc}
1a002f4e:	Address 0x000000001a002f4e is out of bounds.


1a002f50 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002f50:	2300      	movs	r3, #0
1a002f52:	2b1c      	cmp	r3, #28
1a002f54:	d812      	bhi.n	1a002f7c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002f56:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002f58:	4a09      	ldr	r2, [pc, #36]	; (1a002f80 <Board_SetupMuxing+0x30>)
1a002f5a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002f5e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002f62:	784a      	ldrb	r2, [r1, #1]
1a002f64:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002f66:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002f6a:	4906      	ldr	r1, [pc, #24]	; (1a002f84 <Board_SetupMuxing+0x34>)
1a002f6c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002f70:	3301      	adds	r3, #1
1a002f72:	2b1c      	cmp	r3, #28
1a002f74:	d9f0      	bls.n	1a002f58 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002f76:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002f7a:	4770      	bx	lr
1a002f7c:	4770      	bx	lr
1a002f7e:	bf00      	nop
1a002f80:	1a005a00 	.word	0x1a005a00
1a002f84:	40086000 	.word	0x40086000

1a002f88 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002f88:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002f8a:	4a17      	ldr	r2, [pc, #92]	; (1a002fe8 <Board_SetupClocking+0x60>)
1a002f8c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002f90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002f94:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002f98:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002f9c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002fa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002fa4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002fa8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002fac:	2201      	movs	r2, #1
1a002fae:	490f      	ldr	r1, [pc, #60]	; (1a002fec <Board_SetupClocking+0x64>)
1a002fb0:	2006      	movs	r0, #6
1a002fb2:	f000 fc2f 	bl	1a003814 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002fb6:	2400      	movs	r4, #0
1a002fb8:	b14c      	cbz	r4, 1a002fce <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002fba:	4b0b      	ldr	r3, [pc, #44]	; (1a002fe8 <Board_SetupClocking+0x60>)
1a002fbc:	685a      	ldr	r2, [r3, #4]
1a002fbe:	f022 020c 	bic.w	r2, r2, #12
1a002fc2:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002fc4:	685a      	ldr	r2, [r3, #4]
1a002fc6:	f042 0203 	orr.w	r2, r2, #3
1a002fca:	605a      	str	r2, [r3, #4]
}
1a002fcc:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002fce:	4808      	ldr	r0, [pc, #32]	; (1a002ff0 <Board_SetupClocking+0x68>)
1a002fd0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002fd4:	2301      	movs	r3, #1
1a002fd6:	788a      	ldrb	r2, [r1, #2]
1a002fd8:	7849      	ldrb	r1, [r1, #1]
1a002fda:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002fde:	f000 fb6b 	bl	1a0036b8 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002fe2:	3401      	adds	r4, #1
1a002fe4:	e7e8      	b.n	1a002fb8 <Board_SetupClocking+0x30>
1a002fe6:	bf00      	nop
1a002fe8:	40043000 	.word	0x40043000
1a002fec:	0c28cb00 	.word	0x0c28cb00
1a002ff0:	1a0059fc 	.word	0x1a0059fc

1a002ff4 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002ff4:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002ff6:	f7ff ffab 	bl	1a002f50 <Board_SetupMuxing>
    Board_SetupClocking();
1a002ffa:	f7ff ffc5 	bl	1a002f88 <Board_SetupClocking>
}
1a002ffe:	bd08      	pop	{r3, pc}

1a003000 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003000:	4b09      	ldr	r3, [pc, #36]	; (1a003028 <Chip_UART_GetIndex+0x28>)
1a003002:	4298      	cmp	r0, r3
1a003004:	d009      	beq.n	1a00301a <Chip_UART_GetIndex+0x1a>
1a003006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00300a:	4298      	cmp	r0, r3
1a00300c:	d007      	beq.n	1a00301e <Chip_UART_GetIndex+0x1e>
1a00300e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a003012:	4298      	cmp	r0, r3
1a003014:	d005      	beq.n	1a003022 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a003016:	2000      	movs	r0, #0
1a003018:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00301a:	2002      	movs	r0, #2
1a00301c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00301e:	2003      	movs	r0, #3
1a003020:	4770      	bx	lr
			return 1;
1a003022:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a003024:	4770      	bx	lr
1a003026:	bf00      	nop
1a003028:	400c1000 	.word	0x400c1000

1a00302c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00302c:	b530      	push	{r4, r5, lr}
1a00302e:	b083      	sub	sp, #12
1a003030:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003032:	f7ff ffe5 	bl	1a003000 <Chip_UART_GetIndex>
1a003036:	2301      	movs	r3, #1
1a003038:	461a      	mov	r2, r3
1a00303a:	4619      	mov	r1, r3
1a00303c:	4d0e      	ldr	r5, [pc, #56]	; (1a003078 <Chip_UART_Init+0x4c>)
1a00303e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a003042:	f000 fb7f 	bl	1a003744 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a003046:	2307      	movs	r3, #7
1a003048:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00304a:	2300      	movs	r3, #0
1a00304c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00304e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003050:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003052:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003054:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003056:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003058:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00305a:	4b08      	ldr	r3, [pc, #32]	; (1a00307c <Chip_UART_Init+0x50>)
1a00305c:	429c      	cmp	r4, r3
1a00305e:	d006      	beq.n	1a00306e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a003060:	2303      	movs	r3, #3
1a003062:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003064:	2310      	movs	r3, #16
1a003066:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003068:	9b01      	ldr	r3, [sp, #4]
}
1a00306a:	b003      	add	sp, #12
1a00306c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00306e:	2300      	movs	r3, #0
1a003070:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a003072:	69a3      	ldr	r3, [r4, #24]
1a003074:	9301      	str	r3, [sp, #4]
1a003076:	e7f3      	b.n	1a003060 <Chip_UART_Init+0x34>
1a003078:	1a005a7c 	.word	0x1a005a7c
1a00307c:	40082000 	.word	0x40082000

1a003080 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a003080:	b538      	push	{r3, r4, r5, lr}
1a003082:	4605      	mov	r5, r0
1a003084:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003086:	f7ff ffbb 	bl	1a003000 <Chip_UART_GetIndex>
1a00308a:	4b0c      	ldr	r3, [pc, #48]	; (1a0030bc <Chip_UART_SetBaud+0x3c>)
1a00308c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003090:	f000 fb90 	bl	1a0037b4 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a003094:	0123      	lsls	r3, r4, #4
1a003096:	fbb0 f3f3 	udiv	r3, r0, r3
1a00309a:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00309c:	68ea      	ldr	r2, [r5, #12]
1a00309e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0030a2:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a0030a4:	6029      	str	r1, [r5, #0]
1a0030a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0030aa:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0030ac:	68ea      	ldr	r2, [r5, #12]
1a0030ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0030b2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0030b4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0030b8:	0900      	lsrs	r0, r0, #4
1a0030ba:	bd38      	pop	{r3, r4, r5, pc}
1a0030bc:	1a005a74 	.word	0x1a005a74

1a0030c0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0030c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0030c4:	b083      	sub	sp, #12
1a0030c6:	4683      	mov	fp, r0
1a0030c8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0030ca:	f7ff ff99 	bl	1a003000 <Chip_UART_GetIndex>
1a0030ce:	4b35      	ldr	r3, [pc, #212]	; (1a0031a4 <Chip_UART_SetBaudFDR+0xe4>)
1a0030d0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0030d4:	f000 fb6e 	bl	1a0037b4 <Chip_Clock_GetRate>
1a0030d8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0030da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0030de:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0030e0:	2300      	movs	r3, #0
1a0030e2:	9301      	str	r3, [sp, #4]
1a0030e4:	46a2      	mov	sl, r4
1a0030e6:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0030e8:	e02a      	b.n	1a003140 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0030ea:	4242      	negs	r2, r0
				div ++;
1a0030ec:	1c4b      	adds	r3, r1, #1
1a0030ee:	e017      	b.n	1a003120 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0030f0:	b30a      	cbz	r2, 1a003136 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0030f2:	4617      	mov	r7, r2
			sd = d;
1a0030f4:	9501      	str	r5, [sp, #4]
			sm = m;
1a0030f6:	46a2      	mov	sl, r4
			sdiv = div;
1a0030f8:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0030fa:	3501      	adds	r5, #1
1a0030fc:	42ac      	cmp	r4, r5
1a0030fe:	d91e      	bls.n	1a00313e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003100:	0933      	lsrs	r3, r6, #4
1a003102:	0730      	lsls	r0, r6, #28
1a003104:	fba4 0100 	umull	r0, r1, r4, r0
1a003108:	fb04 1103 	mla	r1, r4, r3, r1
1a00310c:	1962      	adds	r2, r4, r5
1a00310e:	fb08 f202 	mul.w	r2, r8, r2
1a003112:	2300      	movs	r3, #0
1a003114:	f001 f83c 	bl	1a004190 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a003118:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00311a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00311c:	2800      	cmp	r0, #0
1a00311e:	dbe4      	blt.n	1a0030ea <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003120:	4297      	cmp	r7, r2
1a003122:	d3ea      	bcc.n	1a0030fa <Chip_UART_SetBaudFDR+0x3a>
1a003124:	2b00      	cmp	r3, #0
1a003126:	d0e8      	beq.n	1a0030fa <Chip_UART_SetBaudFDR+0x3a>
1a003128:	0c19      	lsrs	r1, r3, #16
1a00312a:	d1e6      	bne.n	1a0030fa <Chip_UART_SetBaudFDR+0x3a>
1a00312c:	2b02      	cmp	r3, #2
1a00312e:	d8df      	bhi.n	1a0030f0 <Chip_UART_SetBaudFDR+0x30>
1a003130:	2d00      	cmp	r5, #0
1a003132:	d0dd      	beq.n	1a0030f0 <Chip_UART_SetBaudFDR+0x30>
1a003134:	e7e1      	b.n	1a0030fa <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a003136:	4617      	mov	r7, r2
			sd = d;
1a003138:	9501      	str	r5, [sp, #4]
			sm = m;
1a00313a:	46a2      	mov	sl, r4
			sdiv = div;
1a00313c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00313e:	3401      	adds	r4, #1
1a003140:	b11f      	cbz	r7, 1a00314a <Chip_UART_SetBaudFDR+0x8a>
1a003142:	2c0f      	cmp	r4, #15
1a003144:	d801      	bhi.n	1a00314a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a003146:	2500      	movs	r5, #0
1a003148:	e7d8      	b.n	1a0030fc <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00314a:	f1b9 0f00 	cmp.w	r9, #0
1a00314e:	d024      	beq.n	1a00319a <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003150:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003158:	f8cb 300c 	str.w	r3, [fp, #12]
1a00315c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a003160:	f8cb 3000 	str.w	r3, [fp]
1a003164:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a003168:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00316c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003174:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003178:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00317c:	b2db      	uxtb	r3, r3
1a00317e:	9901      	ldr	r1, [sp, #4]
1a003180:	f001 020f 	and.w	r2, r1, #15
1a003184:	4313      	orrs	r3, r2
1a003186:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00318a:	0933      	lsrs	r3, r6, #4
1a00318c:	fb0a f303 	mul.w	r3, sl, r3
1a003190:	448a      	add	sl, r1
1a003192:	fb09 f90a 	mul.w	r9, r9, sl
1a003196:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00319a:	4648      	mov	r0, r9
1a00319c:	b003      	add	sp, #12
1a00319e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0031a2:	bf00      	nop
1a0031a4:	1a005a74 	.word	0x1a005a74

1a0031a8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0031a8:	4b03      	ldr	r3, [pc, #12]	; (1a0031b8 <Chip_ADC_GetClockIndex+0x10>)
1a0031aa:	4298      	cmp	r0, r3
1a0031ac:	d001      	beq.n	1a0031b2 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0031ae:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0031b0:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0031b2:	2004      	movs	r0, #4
1a0031b4:	4770      	bx	lr
1a0031b6:	bf00      	nop
1a0031b8:	400e4000 	.word	0x400e4000

1a0031bc <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0031bc:	b570      	push	{r4, r5, r6, lr}
1a0031be:	460d      	mov	r5, r1
1a0031c0:	4614      	mov	r4, r2
1a0031c2:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0031c4:	f7ff fff0 	bl	1a0031a8 <Chip_ADC_GetClockIndex>
1a0031c8:	f000 faf4 	bl	1a0037b4 <Chip_Clock_GetRate>
	if (burstMode) {
1a0031cc:	b965      	cbnz	r5, 1a0031e8 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a0031ce:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0031d2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0031d6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0031da:	0064      	lsls	r4, r4, #1
1a0031dc:	fbb0 f0f4 	udiv	r0, r0, r4
1a0031e0:	b2c0      	uxtb	r0, r0
1a0031e2:	3801      	subs	r0, #1
	return div;
}
1a0031e4:	b2c0      	uxtb	r0, r0
1a0031e6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a0031e8:	fb04 f406 	mul.w	r4, r4, r6
1a0031ec:	e7f3      	b.n	1a0031d6 <getClkDiv+0x1a>
1a0031ee:	Address 0x000000001a0031ee is out of bounds.


1a0031f0 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0031f0:	b538      	push	{r3, r4, r5, lr}
1a0031f2:	4605      	mov	r5, r0
1a0031f4:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0031f6:	f7ff ffd7 	bl	1a0031a8 <Chip_ADC_GetClockIndex>
1a0031fa:	2301      	movs	r3, #1
1a0031fc:	461a      	mov	r2, r3
1a0031fe:	4619      	mov	r1, r3
1a003200:	f000 faa0 	bl	1a003744 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003204:	2100      	movs	r1, #0
1a003206:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003208:	4a08      	ldr	r2, [pc, #32]	; (1a00322c <Chip_ADC_Init+0x3c>)
1a00320a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00320c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00320e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003210:	230b      	movs	r3, #11
1a003212:	4628      	mov	r0, r5
1a003214:	f7ff ffd2 	bl	1a0031bc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003218:	0200      	lsls	r0, r0, #8
1a00321a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00321e:	7920      	ldrb	r0, [r4, #4]
1a003220:	0440      	lsls	r0, r0, #17
1a003222:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003226:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a003228:	6028      	str	r0, [r5, #0]
}
1a00322a:	bd38      	pop	{r3, r4, r5, pc}
1a00322c:	00061a80 	.word	0x00061a80

1a003230 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a003230:	b570      	push	{r4, r5, r6, lr}
1a003232:	4605      	mov	r5, r0
1a003234:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a003236:	6804      	ldr	r4, [r0, #0]
1a003238:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a00323c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a003240:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a003242:	790b      	ldrb	r3, [r1, #4]
1a003244:	f1c3 030b 	rsb	r3, r3, #11
1a003248:	b2db      	uxtb	r3, r3
1a00324a:	7949      	ldrb	r1, [r1, #5]
1a00324c:	f7ff ffb6 	bl	1a0031bc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003250:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a003254:	7930      	ldrb	r0, [r6, #4]
1a003256:	0440      	lsls	r0, r0, #17
1a003258:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00325c:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a00325e:	6028      	str	r0, [r5, #0]
}
1a003260:	bd70      	pop	{r4, r5, r6, pc}

1a003262 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a003262:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a003264:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a003266:	680a      	ldr	r2, [r1, #0]
1a003268:	f7ff ffe2 	bl	1a003230 <Chip_ADC_SetSampleRate>
}
1a00326c:	bd08      	pop	{r3, pc}
1a00326e:	Address 0x000000001a00326e is out of bounds.


1a003270 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003270:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a003272:	680b      	ldr	r3, [r1, #0]
1a003274:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003278:	d002      	beq.n	1a003280 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00327a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00327e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a003280:	4607      	mov	r7, r0
1a003282:	2501      	movs	r5, #1
1a003284:	e03b      	b.n	1a0032fe <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a003286:	694b      	ldr	r3, [r1, #20]
1a003288:	fb03 f302 	mul.w	r3, r3, r2
1a00328c:	fbb3 f3f5 	udiv	r3, r3, r5
1a003290:	e014      	b.n	1a0032bc <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a003292:	461c      	mov	r4, r3
1a003294:	e020      	b.n	1a0032d8 <pll_calc_divs+0x68>
		return -val;
1a003296:	f1cc 0c00 	rsb	ip, ip, #0
1a00329a:	e020      	b.n	1a0032de <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a00329c:	3201      	adds	r2, #1
1a00329e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0032a2:	dc26      	bgt.n	1a0032f2 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a0032a4:	680c      	ldr	r4, [r1, #0]
1a0032a6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0032aa:	d0ec      	beq.n	1a003286 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0032ac:	1c73      	adds	r3, r6, #1
1a0032ae:	fa02 fc03 	lsl.w	ip, r2, r3
1a0032b2:	694b      	ldr	r3, [r1, #20]
1a0032b4:	fb03 f30c 	mul.w	r3, r3, ip
1a0032b8:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0032bc:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a00330c <pll_calc_divs+0x9c>
1a0032c0:	4563      	cmp	r3, ip
1a0032c2:	d9eb      	bls.n	1a00329c <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0032c4:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a003310 <pll_calc_divs+0xa0>
1a0032c8:	4563      	cmp	r3, ip
1a0032ca:	d812      	bhi.n	1a0032f2 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a0032cc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0032d0:	d1df      	bne.n	1a003292 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a0032d2:	1c74      	adds	r4, r6, #1
1a0032d4:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a0032d8:	ebb0 0c04 	subs.w	ip, r0, r4
1a0032dc:	d4db      	bmi.n	1a003296 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a0032de:	4567      	cmp	r7, ip
1a0032e0:	d9dc      	bls.n	1a00329c <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a0032e2:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0032e4:	1c77      	adds	r7, r6, #1
1a0032e6:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0032e8:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0032ea:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0032ec:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0032ee:	4667      	mov	r7, ip
1a0032f0:	e7d4      	b.n	1a00329c <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a0032f2:	3601      	adds	r6, #1
1a0032f4:	2e03      	cmp	r6, #3
1a0032f6:	dc01      	bgt.n	1a0032fc <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a0032f8:	2201      	movs	r2, #1
1a0032fa:	e7d0      	b.n	1a00329e <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a0032fc:	3501      	adds	r5, #1
1a0032fe:	2d04      	cmp	r5, #4
1a003300:	dc01      	bgt.n	1a003306 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a003302:	2600      	movs	r6, #0
1a003304:	e7f6      	b.n	1a0032f4 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a003306:	bcf0      	pop	{r4, r5, r6, r7}
1a003308:	4770      	bx	lr
1a00330a:	bf00      	nop
1a00330c:	094c5eff 	.word	0x094c5eff
1a003310:	1312d000 	.word	0x1312d000

1a003314 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003314:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003316:	b099      	sub	sp, #100	; 0x64
1a003318:	4605      	mov	r5, r0
1a00331a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00331c:	225c      	movs	r2, #92	; 0x5c
1a00331e:	2100      	movs	r1, #0
1a003320:	a801      	add	r0, sp, #4
1a003322:	f001 f8e8 	bl	1a0044f6 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a003326:	2380      	movs	r3, #128	; 0x80
1a003328:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00332a:	6963      	ldr	r3, [r4, #20]
1a00332c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00332e:	7923      	ldrb	r3, [r4, #4]
1a003330:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a003334:	4669      	mov	r1, sp
1a003336:	4628      	mov	r0, r5
1a003338:	f7ff ff9a 	bl	1a003270 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00333c:	9b06      	ldr	r3, [sp, #24]
1a00333e:	42ab      	cmp	r3, r5
1a003340:	d027      	beq.n	1a003392 <pll_get_frac+0x7e>
	if (val < 0)
1a003342:	1aeb      	subs	r3, r5, r3
1a003344:	d42e      	bmi.n	1a0033a4 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a003346:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a003348:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00334a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00334e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a003350:	6963      	ldr	r3, [r4, #20]
1a003352:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a003354:	7923      	ldrb	r3, [r4, #4]
1a003356:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00335a:	a910      	add	r1, sp, #64	; 0x40
1a00335c:	4628      	mov	r0, r5
1a00335e:	f7ff ff87 	bl	1a003270 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a003362:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a003364:	42ab      	cmp	r3, r5
1a003366:	d01f      	beq.n	1a0033a8 <pll_get_frac+0x94>
	if (val < 0)
1a003368:	1aeb      	subs	r3, r5, r3
1a00336a:	d425      	bmi.n	1a0033b8 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a00336c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00336e:	4b2b      	ldr	r3, [pc, #172]	; (1a00341c <pll_get_frac+0x108>)
1a003370:	429d      	cmp	r5, r3
1a003372:	d923      	bls.n	1a0033bc <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a003374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a003376:	1aed      	subs	r5, r5, r3
1a003378:	d433      	bmi.n	1a0033e2 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00337a:	42ae      	cmp	r6, r5
1a00337c:	dc3b      	bgt.n	1a0033f6 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00337e:	42be      	cmp	r6, r7
1a003380:	dc31      	bgt.n	1a0033e6 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a003382:	466d      	mov	r5, sp
1a003384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003388:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00338c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003390:	e006      	b.n	1a0033a0 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a003392:	466d      	mov	r5, sp
1a003394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003398:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00339c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0033a0:	b019      	add	sp, #100	; 0x64
1a0033a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0033a4:	425b      	negs	r3, r3
1a0033a6:	e7ce      	b.n	1a003346 <pll_get_frac+0x32>
		*ppll = pll[2];
1a0033a8:	ad10      	add	r5, sp, #64	; 0x40
1a0033aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0033ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0033ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0033b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0033b6:	e7f3      	b.n	1a0033a0 <pll_get_frac+0x8c>
		return -val;
1a0033b8:	425b      	negs	r3, r3
1a0033ba:	e7d7      	b.n	1a00336c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0033bc:	2340      	movs	r3, #64	; 0x40
1a0033be:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0033c0:	6963      	ldr	r3, [r4, #20]
1a0033c2:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0033c4:	a908      	add	r1, sp, #32
1a0033c6:	4628      	mov	r0, r5
1a0033c8:	f7ff ff52 	bl	1a003270 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0033cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0033ce:	42ab      	cmp	r3, r5
1a0033d0:	d1d0      	bne.n	1a003374 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0033d2:	ad08      	add	r5, sp, #32
1a0033d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0033d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0033d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0033dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0033e0:	e7de      	b.n	1a0033a0 <pll_get_frac+0x8c>
		return -val;
1a0033e2:	426d      	negs	r5, r5
1a0033e4:	e7c9      	b.n	1a00337a <pll_get_frac+0x66>
			*ppll = pll[2];
1a0033e6:	ad10      	add	r5, sp, #64	; 0x40
1a0033e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0033ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0033ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0033f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0033f4:	e7d4      	b.n	1a0033a0 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0033f6:	42af      	cmp	r7, r5
1a0033f8:	db07      	blt.n	1a00340a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0033fa:	ad08      	add	r5, sp, #32
1a0033fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0033fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003400:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003404:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003408:	e7ca      	b.n	1a0033a0 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00340a:	ad10      	add	r5, sp, #64	; 0x40
1a00340c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00340e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003410:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003418:	e7c2      	b.n	1a0033a0 <pll_get_frac+0x8c>
1a00341a:	bf00      	nop
1a00341c:	068e7780 	.word	0x068e7780

1a003420 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003420:	b430      	push	{r4, r5}
1a003422:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003424:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a003426:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003428:	e000      	b.n	1a00342c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00342a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00342c:	281c      	cmp	r0, #28
1a00342e:	d118      	bne.n	1a003462 <Chip_Clock_FindBaseClock+0x42>
1a003430:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003434:	0051      	lsls	r1, r2, #1
1a003436:	4a0c      	ldr	r2, [pc, #48]	; (1a003468 <Chip_Clock_FindBaseClock+0x48>)
1a003438:	440a      	add	r2, r1
1a00343a:	7914      	ldrb	r4, [r2, #4]
1a00343c:	4284      	cmp	r4, r0
1a00343e:	d010      	beq.n	1a003462 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a003440:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a003444:	004a      	lsls	r2, r1, #1
1a003446:	4908      	ldr	r1, [pc, #32]	; (1a003468 <Chip_Clock_FindBaseClock+0x48>)
1a003448:	5a8a      	ldrh	r2, [r1, r2]
1a00344a:	42aa      	cmp	r2, r5
1a00344c:	d8ed      	bhi.n	1a00342a <Chip_Clock_FindBaseClock+0xa>
1a00344e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003452:	0051      	lsls	r1, r2, #1
1a003454:	4a04      	ldr	r2, [pc, #16]	; (1a003468 <Chip_Clock_FindBaseClock+0x48>)
1a003456:	440a      	add	r2, r1
1a003458:	8852      	ldrh	r2, [r2, #2]
1a00345a:	42aa      	cmp	r2, r5
1a00345c:	d3e5      	bcc.n	1a00342a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00345e:	4620      	mov	r0, r4
1a003460:	e7e4      	b.n	1a00342c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a003462:	bc30      	pop	{r4, r5}
1a003464:	4770      	bx	lr
1a003466:	bf00      	nop
1a003468:	1a005a90 	.word	0x1a005a90

1a00346c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a00346c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00346e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a003472:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a003474:	4a0d      	ldr	r2, [pc, #52]	; (1a0034ac <Chip_Clock_EnableCrystal+0x40>)
1a003476:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a003478:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a00347c:	6992      	ldr	r2, [r2, #24]
1a00347e:	428a      	cmp	r2, r1
1a003480:	d001      	beq.n	1a003486 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003482:	4a0a      	ldr	r2, [pc, #40]	; (1a0034ac <Chip_Clock_EnableCrystal+0x40>)
1a003484:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a003486:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00348a:	4a09      	ldr	r2, [pc, #36]	; (1a0034b0 <Chip_Clock_EnableCrystal+0x44>)
1a00348c:	6811      	ldr	r1, [r2, #0]
1a00348e:	4a09      	ldr	r2, [pc, #36]	; (1a0034b4 <Chip_Clock_EnableCrystal+0x48>)
1a003490:	4291      	cmp	r1, r2
1a003492:	d901      	bls.n	1a003498 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a003494:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003498:	4a04      	ldr	r2, [pc, #16]	; (1a0034ac <Chip_Clock_EnableCrystal+0x40>)
1a00349a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a00349c:	9b01      	ldr	r3, [sp, #4]
1a00349e:	1e5a      	subs	r2, r3, #1
1a0034a0:	9201      	str	r2, [sp, #4]
1a0034a2:	2b00      	cmp	r3, #0
1a0034a4:	d1fa      	bne.n	1a00349c <Chip_Clock_EnableCrystal+0x30>
}
1a0034a6:	b002      	add	sp, #8
1a0034a8:	4770      	bx	lr
1a0034aa:	bf00      	nop
1a0034ac:	40050000 	.word	0x40050000
1a0034b0:	1a0059f8 	.word	0x1a0059f8
1a0034b4:	01312cff 	.word	0x01312cff

1a0034b8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0034b8:	3012      	adds	r0, #18
1a0034ba:	4b05      	ldr	r3, [pc, #20]	; (1a0034d0 <Chip_Clock_GetDividerSource+0x18>)
1a0034bc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0034c0:	f010 0f01 	tst.w	r0, #1
1a0034c4:	d102      	bne.n	1a0034cc <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0034c6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0034ca:	4770      	bx	lr
		return CLKINPUT_PD;
1a0034cc:	2011      	movs	r0, #17
}
1a0034ce:	4770      	bx	lr
1a0034d0:	40050000 	.word	0x40050000

1a0034d4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0034d4:	f100 0212 	add.w	r2, r0, #18
1a0034d8:	4b03      	ldr	r3, [pc, #12]	; (1a0034e8 <Chip_Clock_GetDividerDivisor+0x14>)
1a0034da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0034de:	4b03      	ldr	r3, [pc, #12]	; (1a0034ec <Chip_Clock_GetDividerDivisor+0x18>)
1a0034e0:	5c18      	ldrb	r0, [r3, r0]
}
1a0034e2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0034e6:	4770      	bx	lr
1a0034e8:	40050000 	.word	0x40050000
1a0034ec:	1a005a88 	.word	0x1a005a88

1a0034f0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0034f0:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0034f2:	2810      	cmp	r0, #16
1a0034f4:	d80a      	bhi.n	1a00350c <Chip_Clock_GetClockInputHz+0x1c>
1a0034f6:	e8df f000 	tbb	[pc, r0]
1a0034fa:	0b42      	.short	0x0b42
1a0034fc:	091f160d 	.word	0x091f160d
1a003500:	2b282522 	.word	0x2b282522
1a003504:	322e0909 	.word	0x322e0909
1a003508:	3a36      	.short	0x3a36
1a00350a:	3e          	.byte	0x3e
1a00350b:	00          	.byte	0x00
	uint32_t rate = 0;
1a00350c:	2000      	movs	r0, #0
1a00350e:	e038      	b.n	1a003582 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003510:	481e      	ldr	r0, [pc, #120]	; (1a00358c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003512:	e036      	b.n	1a003582 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003514:	4b1e      	ldr	r3, [pc, #120]	; (1a003590 <Chip_Clock_GetClockInputHz+0xa0>)
1a003516:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00351a:	f003 0307 	and.w	r3, r3, #7
1a00351e:	2b04      	cmp	r3, #4
1a003520:	d130      	bne.n	1a003584 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a003522:	2000      	movs	r0, #0
1a003524:	e02d      	b.n	1a003582 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003526:	4b1a      	ldr	r3, [pc, #104]	; (1a003590 <Chip_Clock_GetClockInputHz+0xa0>)
1a003528:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00352c:	f003 0307 	and.w	r3, r3, #7
1a003530:	2b04      	cmp	r3, #4
1a003532:	d029      	beq.n	1a003588 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003534:	4817      	ldr	r0, [pc, #92]	; (1a003594 <Chip_Clock_GetClockInputHz+0xa4>)
1a003536:	e024      	b.n	1a003582 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003538:	4b17      	ldr	r3, [pc, #92]	; (1a003598 <Chip_Clock_GetClockInputHz+0xa8>)
1a00353a:	6818      	ldr	r0, [r3, #0]
		break;
1a00353c:	e021      	b.n	1a003582 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00353e:	4b17      	ldr	r3, [pc, #92]	; (1a00359c <Chip_Clock_GetClockInputHz+0xac>)
1a003540:	6818      	ldr	r0, [r3, #0]
		break;
1a003542:	e01e      	b.n	1a003582 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003544:	4b16      	ldr	r3, [pc, #88]	; (1a0035a0 <Chip_Clock_GetClockInputHz+0xb0>)
1a003546:	6818      	ldr	r0, [r3, #0]
		break;
1a003548:	e01b      	b.n	1a003582 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00354a:	4b15      	ldr	r3, [pc, #84]	; (1a0035a0 <Chip_Clock_GetClockInputHz+0xb0>)
1a00354c:	6858      	ldr	r0, [r3, #4]
		break;
1a00354e:	e018      	b.n	1a003582 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003550:	f000 f86a 	bl	1a003628 <Chip_Clock_GetMainPLLHz>
		break;
1a003554:	e015      	b.n	1a003582 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a003556:	2100      	movs	r1, #0
1a003558:	f000 f89c 	bl	1a003694 <Chip_Clock_GetDivRate>
		break;
1a00355c:	e011      	b.n	1a003582 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00355e:	2101      	movs	r1, #1
1a003560:	f000 f898 	bl	1a003694 <Chip_Clock_GetDivRate>
		break;
1a003564:	e00d      	b.n	1a003582 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a003566:	2102      	movs	r1, #2
1a003568:	f000 f894 	bl	1a003694 <Chip_Clock_GetDivRate>
		break;
1a00356c:	e009      	b.n	1a003582 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00356e:	2103      	movs	r1, #3
1a003570:	f000 f890 	bl	1a003694 <Chip_Clock_GetDivRate>
		break;
1a003574:	e005      	b.n	1a003582 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a003576:	2104      	movs	r1, #4
1a003578:	f000 f88c 	bl	1a003694 <Chip_Clock_GetDivRate>
		break;
1a00357c:	e001      	b.n	1a003582 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a00357e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a003582:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a003584:	4803      	ldr	r0, [pc, #12]	; (1a003594 <Chip_Clock_GetClockInputHz+0xa4>)
1a003586:	e7fc      	b.n	1a003582 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a003588:	4806      	ldr	r0, [pc, #24]	; (1a0035a4 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00358a:	e7fa      	b.n	1a003582 <Chip_Clock_GetClockInputHz+0x92>
1a00358c:	00b71b00 	.word	0x00b71b00
1a003590:	40043000 	.word	0x40043000
1a003594:	017d7840 	.word	0x017d7840
1a003598:	1a0059cc 	.word	0x1a0059cc
1a00359c:	1a0059f8 	.word	0x1a0059f8
1a0035a0:	10003af8 	.word	0x10003af8
1a0035a4:	02faf080 	.word	0x02faf080

1a0035a8 <Chip_Clock_CalcMainPLLValue>:
{
1a0035a8:	b538      	push	{r3, r4, r5, lr}
1a0035aa:	4605      	mov	r5, r0
1a0035ac:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0035ae:	7908      	ldrb	r0, [r1, #4]
1a0035b0:	f7ff ff9e 	bl	1a0034f0 <Chip_Clock_GetClockInputHz>
1a0035b4:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0035b6:	4b19      	ldr	r3, [pc, #100]	; (1a00361c <Chip_Clock_CalcMainPLLValue+0x74>)
1a0035b8:	442b      	add	r3, r5
1a0035ba:	4a19      	ldr	r2, [pc, #100]	; (1a003620 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0035bc:	4293      	cmp	r3, r2
1a0035be:	d821      	bhi.n	1a003604 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0035c0:	b318      	cbz	r0, 1a00360a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0035c2:	2380      	movs	r3, #128	; 0x80
1a0035c4:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0035c6:	2300      	movs	r3, #0
1a0035c8:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0035ca:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0035cc:	fbb5 f3f0 	udiv	r3, r5, r0
1a0035d0:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0035d2:	4a14      	ldr	r2, [pc, #80]	; (1a003624 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0035d4:	4295      	cmp	r5, r2
1a0035d6:	d903      	bls.n	1a0035e0 <Chip_Clock_CalcMainPLLValue+0x38>
1a0035d8:	fb03 f000 	mul.w	r0, r3, r0
1a0035dc:	42a8      	cmp	r0, r5
1a0035de:	d007      	beq.n	1a0035f0 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0035e0:	4621      	mov	r1, r4
1a0035e2:	4628      	mov	r0, r5
1a0035e4:	f7ff fe96 	bl	1a003314 <pll_get_frac>
		if (!ppll->nsel) {
1a0035e8:	68a3      	ldr	r3, [r4, #8]
1a0035ea:	b18b      	cbz	r3, 1a003610 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0035ec:	3b01      	subs	r3, #1
1a0035ee:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0035f0:	6923      	ldr	r3, [r4, #16]
1a0035f2:	b183      	cbz	r3, 1a003616 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0035f4:	68e2      	ldr	r2, [r4, #12]
1a0035f6:	b10a      	cbz	r2, 1a0035fc <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0035f8:	3a01      	subs	r2, #1
1a0035fa:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0035fc:	3b01      	subs	r3, #1
1a0035fe:	6123      	str	r3, [r4, #16]
	return 0;
1a003600:	2000      	movs	r0, #0
}
1a003602:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003608:	e7fb      	b.n	1a003602 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00360a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00360e:	e7f8      	b.n	1a003602 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003614:	e7f5      	b.n	1a003602 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a003616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00361a:	e7f2      	b.n	1a003602 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00361c:	ff6b3a10 	.word	0xff6b3a10
1a003620:	0b940510 	.word	0x0b940510
1a003624:	094c5eff 	.word	0x094c5eff

1a003628 <Chip_Clock_GetMainPLLHz>:
{
1a003628:	b530      	push	{r4, r5, lr}
1a00362a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00362c:	4d17      	ldr	r5, [pc, #92]	; (1a00368c <Chip_Clock_GetMainPLLHz+0x64>)
1a00362e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003630:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003634:	f7ff ff5c 	bl	1a0034f0 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003638:	4b15      	ldr	r3, [pc, #84]	; (1a003690 <Chip_Clock_GetMainPLLHz+0x68>)
1a00363a:	681b      	ldr	r3, [r3, #0]
1a00363c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00363e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a003640:	f013 0f01 	tst.w	r3, #1
1a003644:	d01f      	beq.n	1a003686 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a003646:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00364a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00364e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a003652:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a003656:	3301      	adds	r3, #1
	n = nsel + 1;
1a003658:	3201      	adds	r2, #1
	p = ptab[psel];
1a00365a:	f10d 0c08 	add.w	ip, sp, #8
1a00365e:	4461      	add	r1, ip
1a003660:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a003664:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003668:	d108      	bne.n	1a00367c <Chip_Clock_GetMainPLLHz+0x54>
1a00366a:	b93d      	cbnz	r5, 1a00367c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a00366c:	0049      	lsls	r1, r1, #1
1a00366e:	fbb3 f3f1 	udiv	r3, r3, r1
1a003672:	fbb0 f0f2 	udiv	r0, r0, r2
1a003676:	fb00 f003 	mul.w	r0, r0, r3
1a00367a:	e005      	b.n	1a003688 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a00367c:	fbb0 f0f2 	udiv	r0, r0, r2
1a003680:	fb03 f000 	mul.w	r0, r3, r0
1a003684:	e000      	b.n	1a003688 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a003686:	2000      	movs	r0, #0
}
1a003688:	b003      	add	sp, #12
1a00368a:	bd30      	pop	{r4, r5, pc}
1a00368c:	40050000 	.word	0x40050000
1a003690:	1a005a84 	.word	0x1a005a84

1a003694 <Chip_Clock_GetDivRate>:
{
1a003694:	b538      	push	{r3, r4, r5, lr}
1a003696:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a003698:	4608      	mov	r0, r1
1a00369a:	f7ff ff0d 	bl	1a0034b8 <Chip_Clock_GetDividerSource>
1a00369e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0036a0:	4620      	mov	r0, r4
1a0036a2:	f7ff ff17 	bl	1a0034d4 <Chip_Clock_GetDividerDivisor>
1a0036a6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0036a8:	4628      	mov	r0, r5
1a0036aa:	f7ff ff21 	bl	1a0034f0 <Chip_Clock_GetClockInputHz>
1a0036ae:	3401      	adds	r4, #1
}
1a0036b0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0036b4:	bd38      	pop	{r3, r4, r5, pc}
1a0036b6:	Address 0x000000001a0036b6 is out of bounds.


1a0036b8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0036b8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0036ba:	f100 0416 	add.w	r4, r0, #22
1a0036be:	00a4      	lsls	r4, r4, #2
1a0036c0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0036c4:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0036c8:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0036ca:	281b      	cmp	r0, #27
1a0036cc:	d813      	bhi.n	1a0036f6 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0036ce:	2911      	cmp	r1, #17
1a0036d0:	d01a      	beq.n	1a003708 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0036d2:	4d0e      	ldr	r5, [pc, #56]	; (1a00370c <Chip_Clock_SetBaseClock+0x54>)
1a0036d4:	4025      	ands	r5, r4

			if (autoblocken) {
1a0036d6:	b10a      	cbz	r2, 1a0036dc <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0036d8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0036dc:	b10b      	cbz	r3, 1a0036e2 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0036de:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0036e2:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0036e6:	3016      	adds	r0, #22
1a0036e8:	0080      	lsls	r0, r0, #2
1a0036ea:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0036ee:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0036f2:	6045      	str	r5, [r0, #4]
1a0036f4:	e008      	b.n	1a003708 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0036f6:	f044 0401 	orr.w	r4, r4, #1
1a0036fa:	3016      	adds	r0, #22
1a0036fc:	0080      	lsls	r0, r0, #2
1a0036fe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003702:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003706:	6044      	str	r4, [r0, #4]
	}
}
1a003708:	bc30      	pop	{r4, r5}
1a00370a:	4770      	bx	lr
1a00370c:	e0fff7fe 	.word	0xe0fff7fe

1a003710 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003710:	281b      	cmp	r0, #27
1a003712:	d80c      	bhi.n	1a00372e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003714:	3016      	adds	r0, #22
1a003716:	0080      	lsls	r0, r0, #2
1a003718:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00371c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003720:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a003722:	f010 0f01 	tst.w	r0, #1
1a003726:	d104      	bne.n	1a003732 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003728:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00372c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00372e:	2011      	movs	r0, #17
1a003730:	4770      	bx	lr
		return CLKINPUT_PD;
1a003732:	2011      	movs	r0, #17
}
1a003734:	4770      	bx	lr

1a003736 <Chip_Clock_GetBaseClocktHz>:
{
1a003736:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003738:	f7ff ffea 	bl	1a003710 <Chip_Clock_GetBaseClock>
1a00373c:	f7ff fed8 	bl	1a0034f0 <Chip_Clock_GetClockInputHz>
}
1a003740:	bd08      	pop	{r3, pc}
1a003742:	Address 0x000000001a003742 is out of bounds.


1a003744 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003744:	b969      	cbnz	r1, 1a003762 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a003746:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a003748:	b10a      	cbz	r2, 1a00374e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00374a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00374e:	2b02      	cmp	r3, #2
1a003750:	d009      	beq.n	1a003766 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003752:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003756:	d209      	bcs.n	1a00376c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003758:	3020      	adds	r0, #32
1a00375a:	4b07      	ldr	r3, [pc, #28]	; (1a003778 <Chip_Clock_EnableOpts+0x34>)
1a00375c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003760:	4770      	bx	lr
		reg |= (1 << 1);
1a003762:	2103      	movs	r1, #3
1a003764:	e7f0      	b.n	1a003748 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a003766:	f041 0120 	orr.w	r1, r1, #32
1a00376a:	e7f2      	b.n	1a003752 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00376c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003770:	4b02      	ldr	r3, [pc, #8]	; (1a00377c <Chip_Clock_EnableOpts+0x38>)
1a003772:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003776:	4770      	bx	lr
1a003778:	40051000 	.word	0x40051000
1a00377c:	40052000 	.word	0x40052000

1a003780 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003780:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003784:	d208      	bcs.n	1a003798 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003786:	4a09      	ldr	r2, [pc, #36]	; (1a0037ac <Chip_Clock_Enable+0x2c>)
1a003788:	3020      	adds	r0, #32
1a00378a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00378e:	f043 0301 	orr.w	r3, r3, #1
1a003792:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a003796:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a003798:	4a05      	ldr	r2, [pc, #20]	; (1a0037b0 <Chip_Clock_Enable+0x30>)
1a00379a:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00379e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0037a2:	f043 0301 	orr.w	r3, r3, #1
1a0037a6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0037aa:	4770      	bx	lr
1a0037ac:	40051000 	.word	0x40051000
1a0037b0:	40052000 	.word	0x40052000

1a0037b4 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0037b4:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0037b6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0037ba:	d309      	bcc.n	1a0037d0 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0037bc:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0037c0:	4a0d      	ldr	r2, [pc, #52]	; (1a0037f8 <Chip_Clock_GetRate+0x44>)
1a0037c2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0037c6:	f014 0f01 	tst.w	r4, #1
1a0037ca:	d107      	bne.n	1a0037dc <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0037cc:	2000      	movs	r0, #0
	}

	return rate;
}
1a0037ce:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0037d0:	f100 0320 	add.w	r3, r0, #32
1a0037d4:	4a09      	ldr	r2, [pc, #36]	; (1a0037fc <Chip_Clock_GetRate+0x48>)
1a0037d6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0037da:	e7f4      	b.n	1a0037c6 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0037dc:	f7ff fe20 	bl	1a003420 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0037e0:	f7ff ffa9 	bl	1a003736 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0037e4:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0037e8:	d103      	bne.n	1a0037f2 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0037ea:	2301      	movs	r3, #1
		rate = rate / div;
1a0037ec:	fbb0 f0f3 	udiv	r0, r0, r3
1a0037f0:	e7ed      	b.n	1a0037ce <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0037f2:	2302      	movs	r3, #2
1a0037f4:	e7fa      	b.n	1a0037ec <Chip_Clock_GetRate+0x38>
1a0037f6:	bf00      	nop
1a0037f8:	40052000 	.word	0x40052000
1a0037fc:	40051000 	.word	0x40051000

1a003800 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003800:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a003802:	2069      	movs	r0, #105	; 0x69
1a003804:	f7ff ffd6 	bl	1a0037b4 <Chip_Clock_GetRate>
1a003808:	4b01      	ldr	r3, [pc, #4]	; (1a003810 <SystemCoreClockUpdate+0x10>)
1a00380a:	6018      	str	r0, [r3, #0]
}
1a00380c:	bd08      	pop	{r3, pc}
1a00380e:	bf00      	nop
1a003810:	10003d88 	.word	0x10003d88

1a003814 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003814:	b570      	push	{r4, r5, r6, lr}
1a003816:	b08a      	sub	sp, #40	; 0x28
1a003818:	4605      	mov	r5, r0
1a00381a:	460e      	mov	r6, r1
1a00381c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00381e:	f242 7310 	movw	r3, #10000	; 0x2710
1a003822:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003824:	2806      	cmp	r0, #6
1a003826:	d018      	beq.n	1a00385a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003828:	2300      	movs	r3, #0
1a00382a:	2201      	movs	r2, #1
1a00382c:	4629      	mov	r1, r5
1a00382e:	2004      	movs	r0, #4
1a003830:	f7ff ff42 	bl	1a0036b8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003834:	4a49      	ldr	r2, [pc, #292]	; (1a00395c <Chip_SetupCoreClock+0x148>)
1a003836:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003838:	f043 0301 	orr.w	r3, r3, #1
1a00383c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00383e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003842:	a901      	add	r1, sp, #4
1a003844:	4630      	mov	r0, r6
1a003846:	f7ff feaf 	bl	1a0035a8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00384a:	4b45      	ldr	r3, [pc, #276]	; (1a003960 <Chip_SetupCoreClock+0x14c>)
1a00384c:	429e      	cmp	r6, r3
1a00384e:	d916      	bls.n	1a00387e <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003850:	9b01      	ldr	r3, [sp, #4]
1a003852:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003856:	d003      	beq.n	1a003860 <Chip_SetupCoreClock+0x4c>
1a003858:	e7fe      	b.n	1a003858 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00385a:	f7ff fe07 	bl	1a00346c <Chip_Clock_EnableCrystal>
1a00385e:	e7e3      	b.n	1a003828 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003860:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003864:	d005      	beq.n	1a003872 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00386a:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a00386c:	2500      	movs	r5, #0
			direct = 1;
1a00386e:	2601      	movs	r6, #1
1a003870:	e007      	b.n	1a003882 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003872:	9b04      	ldr	r3, [sp, #16]
1a003874:	3301      	adds	r3, #1
1a003876:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003878:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00387a:	2600      	movs	r6, #0
1a00387c:	e001      	b.n	1a003882 <Chip_SetupCoreClock+0x6e>
1a00387e:	2500      	movs	r5, #0
1a003880:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003882:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003886:	9b01      	ldr	r3, [sp, #4]
1a003888:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00388c:	9a05      	ldr	r2, [sp, #20]
1a00388e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003892:	9a03      	ldr	r2, [sp, #12]
1a003894:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003898:	9a04      	ldr	r2, [sp, #16]
1a00389a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00389e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0038a2:	4a2e      	ldr	r2, [pc, #184]	; (1a00395c <Chip_SetupCoreClock+0x148>)
1a0038a4:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0038a6:	4b2d      	ldr	r3, [pc, #180]	; (1a00395c <Chip_SetupCoreClock+0x148>)
1a0038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0038aa:	f013 0f01 	tst.w	r3, #1
1a0038ae:	d0fa      	beq.n	1a0038a6 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0038b0:	2300      	movs	r3, #0
1a0038b2:	2201      	movs	r2, #1
1a0038b4:	2109      	movs	r1, #9
1a0038b6:	2004      	movs	r0, #4
1a0038b8:	f7ff fefe 	bl	1a0036b8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0038bc:	b1fe      	cbz	r6, 1a0038fe <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0038be:	f242 7310 	movw	r3, #10000	; 0x2710
1a0038c2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0038c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0038c6:	1e5a      	subs	r2, r3, #1
1a0038c8:	9209      	str	r2, [sp, #36]	; 0x24
1a0038ca:	2b00      	cmp	r3, #0
1a0038cc:	d1fa      	bne.n	1a0038c4 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0038ce:	9b01      	ldr	r3, [sp, #4]
1a0038d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0038d4:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0038d6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0038da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0038de:	9a05      	ldr	r2, [sp, #20]
1a0038e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0038e4:	9a03      	ldr	r2, [sp, #12]
1a0038e6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0038ea:	9a04      	ldr	r2, [sp, #16]
1a0038ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0038f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0038f4:	4a19      	ldr	r2, [pc, #100]	; (1a00395c <Chip_SetupCoreClock+0x148>)
1a0038f6:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0038f8:	b36c      	cbz	r4, 1a003956 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0038fa:	2400      	movs	r4, #0
1a0038fc:	e029      	b.n	1a003952 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0038fe:	2d00      	cmp	r5, #0
1a003900:	d0fa      	beq.n	1a0038f8 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003902:	f242 7310 	movw	r3, #10000	; 0x2710
1a003906:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003908:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00390a:	1e5a      	subs	r2, r3, #1
1a00390c:	9209      	str	r2, [sp, #36]	; 0x24
1a00390e:	2b00      	cmp	r3, #0
1a003910:	d1fa      	bne.n	1a003908 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a003912:	9b04      	ldr	r3, [sp, #16]
1a003914:	1e5a      	subs	r2, r3, #1
1a003916:	9204      	str	r2, [sp, #16]
1a003918:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00391c:	9b01      	ldr	r3, [sp, #4]
1a00391e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003922:	9905      	ldr	r1, [sp, #20]
1a003924:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003928:	9903      	ldr	r1, [sp, #12]
1a00392a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00392e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003932:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003936:	4a09      	ldr	r2, [pc, #36]	; (1a00395c <Chip_SetupCoreClock+0x148>)
1a003938:	6453      	str	r3, [r2, #68]	; 0x44
1a00393a:	e7dd      	b.n	1a0038f8 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00393c:	4809      	ldr	r0, [pc, #36]	; (1a003964 <Chip_SetupCoreClock+0x150>)
1a00393e:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003942:	78cb      	ldrb	r3, [r1, #3]
1a003944:	788a      	ldrb	r2, [r1, #2]
1a003946:	7849      	ldrb	r1, [r1, #1]
1a003948:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00394c:	f7ff feb4 	bl	1a0036b8 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003950:	3401      	adds	r4, #1
1a003952:	2c11      	cmp	r4, #17
1a003954:	d9f2      	bls.n	1a00393c <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003956:	b00a      	add	sp, #40	; 0x28
1a003958:	bd70      	pop	{r4, r5, r6, pc}
1a00395a:	bf00      	nop
1a00395c:	40050000 	.word	0x40050000
1a003960:	068e7780 	.word	0x068e7780
1a003964:	1a005afc 	.word	0x1a005afc

1a003968 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a003968:	4770      	bx	lr
1a00396a:	Address 0x000000001a00396a is out of bounds.


1a00396c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00396c:	4b03      	ldr	r3, [pc, #12]	; (1a00397c <Chip_SSP_GetClockIndex+0x10>)
1a00396e:	4298      	cmp	r0, r3
1a003970:	d001      	beq.n	1a003976 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003972:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003974:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003976:	20a5      	movs	r0, #165	; 0xa5
1a003978:	4770      	bx	lr
1a00397a:	bf00      	nop
1a00397c:	400c5000 	.word	0x400c5000

1a003980 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003980:	4b04      	ldr	r3, [pc, #16]	; (1a003994 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003982:	4298      	cmp	r0, r3
1a003984:	d002      	beq.n	1a00398c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003986:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00398a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00398c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003990:	4770      	bx	lr
1a003992:	bf00      	nop
1a003994:	400c5000 	.word	0x400c5000

1a003998 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003998:	6803      	ldr	r3, [r0, #0]
1a00399a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00399e:	0209      	lsls	r1, r1, #8
1a0039a0:	b289      	uxth	r1, r1
1a0039a2:	4319      	orrs	r1, r3
1a0039a4:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0039a6:	6102      	str	r2, [r0, #16]
}
1a0039a8:	4770      	bx	lr

1a0039aa <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0039aa:	b570      	push	{r4, r5, r6, lr}
1a0039ac:	4606      	mov	r6, r0
1a0039ae:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0039b0:	f7ff ffe6 	bl	1a003980 <Chip_SSP_GetPeriphClockIndex>
1a0039b4:	f7ff fefe 	bl	1a0037b4 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0039b8:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0039ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0039be:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0039c0:	e000      	b.n	1a0039c4 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0039c2:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0039c4:	42ab      	cmp	r3, r5
1a0039c6:	d90b      	bls.n	1a0039e0 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0039c8:	1c4c      	adds	r4, r1, #1
1a0039ca:	fb02 f304 	mul.w	r3, r2, r4
1a0039ce:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0039d2:	429d      	cmp	r5, r3
1a0039d4:	d2f6      	bcs.n	1a0039c4 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0039d6:	2cff      	cmp	r4, #255	; 0xff
1a0039d8:	d9f3      	bls.n	1a0039c2 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0039da:	3202      	adds	r2, #2
				cr0_div = 0;
1a0039dc:	2100      	movs	r1, #0
1a0039de:	e7f1      	b.n	1a0039c4 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0039e0:	4630      	mov	r0, r6
1a0039e2:	f7ff ffd9 	bl	1a003998 <Chip_SSP_SetClockRate>
}
1a0039e6:	bd70      	pop	{r4, r5, r6, pc}

1a0039e8 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0039e8:	b510      	push	{r4, lr}
1a0039ea:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0039ec:	f7ff ffbe 	bl	1a00396c <Chip_SSP_GetClockIndex>
1a0039f0:	f7ff fec6 	bl	1a003780 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0039f4:	4620      	mov	r0, r4
1a0039f6:	f7ff ffc3 	bl	1a003980 <Chip_SSP_GetPeriphClockIndex>
1a0039fa:	f7ff fec1 	bl	1a003780 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0039fe:	6863      	ldr	r3, [r4, #4]
1a003a00:	f023 0304 	bic.w	r3, r3, #4
1a003a04:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003a06:	6823      	ldr	r3, [r4, #0]
1a003a08:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003a0c:	f043 0307 	orr.w	r3, r3, #7
1a003a10:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003a12:	4902      	ldr	r1, [pc, #8]	; (1a003a1c <Chip_SSP_Init+0x34>)
1a003a14:	4620      	mov	r0, r4
1a003a16:	f7ff ffc8 	bl	1a0039aa <Chip_SSP_SetBitRate>
}
1a003a1a:	bd10      	pop	{r4, pc}
1a003a1c:	000186a0 	.word	0x000186a0

1a003a20 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003a20:	2901      	cmp	r1, #1
1a003a22:	d000      	beq.n	1a003a26 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003a24:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a003a26:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003a2a:	0082      	lsls	r2, r0, #2
1a003a2c:	4b03      	ldr	r3, [pc, #12]	; (1a003a3c <Chip_I2C_EventHandler+0x1c>)
1a003a2e:	4413      	add	r3, r2
1a003a30:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a003a32:	7d13      	ldrb	r3, [r2, #20]
1a003a34:	b2db      	uxtb	r3, r3
1a003a36:	2b04      	cmp	r3, #4
1a003a38:	d0fb      	beq.n	1a003a32 <Chip_I2C_EventHandler+0x12>
1a003a3a:	e7f3      	b.n	1a003a24 <Chip_I2C_EventHandler+0x4>
1a003a3c:	100000b0 	.word	0x100000b0

1a003a40 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003a40:	b570      	push	{r4, r5, r6, lr}
1a003a42:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003a44:	4e06      	ldr	r6, [pc, #24]	; (1a003a60 <Chip_I2C_Init+0x20>)
1a003a46:	00c4      	lsls	r4, r0, #3
1a003a48:	1a22      	subs	r2, r4, r0
1a003a4a:	0093      	lsls	r3, r2, #2
1a003a4c:	4433      	add	r3, r6
1a003a4e:	8898      	ldrh	r0, [r3, #4]
1a003a50:	f7ff fe96 	bl	1a003780 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003a54:	1b64      	subs	r4, r4, r5
1a003a56:	00a3      	lsls	r3, r4, #2
1a003a58:	58f3      	ldr	r3, [r6, r3]
1a003a5a:	226c      	movs	r2, #108	; 0x6c
1a003a5c:	619a      	str	r2, [r3, #24]
}
1a003a5e:	bd70      	pop	{r4, r5, r6, pc}
1a003a60:	100000b0 	.word	0x100000b0

1a003a64 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003a68:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a003a6a:	4e0b      	ldr	r6, [pc, #44]	; (1a003a98 <Chip_I2C_SetClockRate+0x34>)
1a003a6c:	00c5      	lsls	r5, r0, #3
1a003a6e:	1a2b      	subs	r3, r5, r0
1a003a70:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003a74:	eb06 0308 	add.w	r3, r6, r8
1a003a78:	8898      	ldrh	r0, [r3, #4]
1a003a7a:	f7ff fe9b 	bl	1a0037b4 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003a7e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003a82:	f856 3008 	ldr.w	r3, [r6, r8]
1a003a86:	0842      	lsrs	r2, r0, #1
1a003a88:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a003a8a:	f856 3008 	ldr.w	r3, [r6, r8]
1a003a8e:	691a      	ldr	r2, [r3, #16]
1a003a90:	1a80      	subs	r0, r0, r2
1a003a92:	6158      	str	r0, [r3, #20]
}
1a003a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003a98:	100000b0 	.word	0x100000b0

1a003a9c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003a9c:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003a9e:	4a0b      	ldr	r2, [pc, #44]	; (1a003acc <SystemInit+0x30>)
1a003aa0:	4b0b      	ldr	r3, [pc, #44]	; (1a003ad0 <SystemInit+0x34>)
1a003aa2:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003aa4:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003aa8:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003aaa:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003aae:	2b20      	cmp	r3, #32
1a003ab0:	d004      	beq.n	1a003abc <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003ab2:	f7ff fa9f 	bl	1a002ff4 <Board_SystemInit>
   Board_Init();
1a003ab6:	f7ff fa27 	bl	1a002f08 <Board_Init>
}
1a003aba:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003abc:	4a04      	ldr	r2, [pc, #16]	; (1a003ad0 <SystemInit+0x34>)
1a003abe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003ac2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003ac6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a003aca:	e7f2      	b.n	1a003ab2 <SystemInit+0x16>
1a003acc:	1a000000 	.word	0x1a000000
1a003ad0:	e000ed00 	.word	0xe000ed00

1a003ad4 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003ad4:	4b04      	ldr	r3, [pc, #16]	; (1a003ae8 <cyclesCounterInit+0x14>)
1a003ad6:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003ad8:	4a04      	ldr	r2, [pc, #16]	; (1a003aec <cyclesCounterInit+0x18>)
1a003ada:	6813      	ldr	r3, [r2, #0]
1a003adc:	f043 0301 	orr.w	r3, r3, #1
1a003ae0:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003ae2:	2001      	movs	r0, #1
1a003ae4:	4770      	bx	lr
1a003ae6:	bf00      	nop
1a003ae8:	100000e8 	.word	0x100000e8
1a003aec:	e0001000 	.word	0xe0001000

1a003af0 <uartProcessIRQ>:
{
1a003af0:	b570      	push	{r4, r5, r6, lr}
1a003af2:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a003af4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a003af8:	0093      	lsls	r3, r2, #2
1a003afa:	4a1f      	ldr	r2, [pc, #124]	; (1a003b78 <uartProcessIRQ+0x88>)
1a003afc:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a003afe:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a003b00:	b2ed      	uxtb	r5, r5
1a003b02:	f015 0f01 	tst.w	r5, #1
1a003b06:	d009      	beq.n	1a003b1c <uartProcessIRQ+0x2c>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a003b08:	b920      	cbnz	r0, 1a003b14 <uartProcessIRQ+0x24>
1a003b0a:	4b1c      	ldr	r3, [pc, #112]	; (1a003b7c <uartProcessIRQ+0x8c>)
1a003b0c:	681b      	ldr	r3, [r3, #0]
1a003b0e:	b10b      	cbz	r3, 1a003b14 <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a003b10:	2000      	movs	r0, #0
1a003b12:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003b14:	2c03      	cmp	r4, #3
1a003b16:	d013      	beq.n	1a003b40 <uartProcessIRQ+0x50>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003b18:	2c05      	cmp	r4, #5
1a003b1a:	d018      	beq.n	1a003b4e <uartProcessIRQ+0x5e>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a003b1c:	f015 0f20 	tst.w	r5, #32
1a003b20:	d00d      	beq.n	1a003b3e <uartProcessIRQ+0x4e>
	return pUART->IER;
1a003b22:	6873      	ldr	r3, [r6, #4]
1a003b24:	f013 0f02 	tst.w	r3, #2
1a003b28:	d009      	beq.n	1a003b3e <uartProcessIRQ+0x4e>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a003b2a:	b924      	cbnz	r4, 1a003b36 <uartProcessIRQ+0x46>
1a003b2c:	4b14      	ldr	r3, [pc, #80]	; (1a003b80 <uartProcessIRQ+0x90>)
1a003b2e:	681b      	ldr	r3, [r3, #0]
1a003b30:	b10b      	cbz	r3, 1a003b36 <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a003b32:	2000      	movs	r0, #0
1a003b34:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003b36:	2c03      	cmp	r4, #3
1a003b38:	d010      	beq.n	1a003b5c <uartProcessIRQ+0x6c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003b3a:	2c05      	cmp	r4, #5
1a003b3c:	d015      	beq.n	1a003b6a <uartProcessIRQ+0x7a>
}
1a003b3e:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003b40:	4b10      	ldr	r3, [pc, #64]	; (1a003b84 <uartProcessIRQ+0x94>)
1a003b42:	681b      	ldr	r3, [r3, #0]
1a003b44:	2b00      	cmp	r3, #0
1a003b46:	d0e7      	beq.n	1a003b18 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a003b48:	2000      	movs	r0, #0
1a003b4a:	4798      	blx	r3
1a003b4c:	e7e4      	b.n	1a003b18 <uartProcessIRQ+0x28>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003b4e:	4b0e      	ldr	r3, [pc, #56]	; (1a003b88 <uartProcessIRQ+0x98>)
1a003b50:	681b      	ldr	r3, [r3, #0]
1a003b52:	2b00      	cmp	r3, #0
1a003b54:	d0e2      	beq.n	1a003b1c <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a003b56:	2000      	movs	r0, #0
1a003b58:	4798      	blx	r3
1a003b5a:	e7df      	b.n	1a003b1c <uartProcessIRQ+0x2c>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003b5c:	4b0b      	ldr	r3, [pc, #44]	; (1a003b8c <uartProcessIRQ+0x9c>)
1a003b5e:	681b      	ldr	r3, [r3, #0]
1a003b60:	2b00      	cmp	r3, #0
1a003b62:	d0ea      	beq.n	1a003b3a <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a003b64:	2000      	movs	r0, #0
1a003b66:	4798      	blx	r3
1a003b68:	e7e7      	b.n	1a003b3a <uartProcessIRQ+0x4a>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003b6a:	4b09      	ldr	r3, [pc, #36]	; (1a003b90 <uartProcessIRQ+0xa0>)
1a003b6c:	681b      	ldr	r3, [r3, #0]
1a003b6e:	2b00      	cmp	r3, #0
1a003b70:	d0e5      	beq.n	1a003b3e <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a003b72:	2000      	movs	r0, #0
1a003b74:	4798      	blx	r3
}
1a003b76:	e7e2      	b.n	1a003b3e <uartProcessIRQ+0x4e>
1a003b78:	1a005b50 	.word	0x1a005b50
1a003b7c:	10003b00 	.word	0x10003b00
1a003b80:	10003b0c 	.word	0x10003b0c
1a003b84:	10003b04 	.word	0x10003b04
1a003b88:	10003b08 	.word	0x10003b08
1a003b8c:	10003b10 	.word	0x10003b10
1a003b90:	10003b14 	.word	0x10003b14

1a003b94 <uartInterrupt>:
   if( enable ) {
1a003b94:	b341      	cbz	r1, 1a003be8 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, ma baja prioridad)
1a003b96:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a003b9a:	009a      	lsls	r2, r3, #2
1a003b9c:	4b1e      	ldr	r3, [pc, #120]	; (1a003c18 <uartInterrupt+0x84>)
1a003b9e:	4413      	add	r3, r2
1a003ba0:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003ba4:	2b00      	cmp	r3, #0
1a003ba6:	db18      	blt.n	1a003bda <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003ba8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a003bac:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a003bb0:	22a0      	movs	r2, #160	; 0xa0
1a003bb2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a003bb6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003bba:	0082      	lsls	r2, r0, #2
1a003bbc:	4b16      	ldr	r3, [pc, #88]	; (1a003c18 <uartInterrupt+0x84>)
1a003bbe:	4413      	add	r3, r2
1a003bc0:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003bc4:	2b00      	cmp	r3, #0
1a003bc6:	db25      	blt.n	1a003c14 <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003bc8:	f003 011f 	and.w	r1, r3, #31
1a003bcc:	095b      	lsrs	r3, r3, #5
1a003bce:	2201      	movs	r2, #1
1a003bd0:	408a      	lsls	r2, r1
1a003bd2:	4912      	ldr	r1, [pc, #72]	; (1a003c1c <uartInterrupt+0x88>)
1a003bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a003bd8:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003bda:	f003 030f 	and.w	r3, r3, #15
1a003bde:	4a10      	ldr	r2, [pc, #64]	; (1a003c20 <uartInterrupt+0x8c>)
1a003be0:	441a      	add	r2, r3
1a003be2:	23a0      	movs	r3, #160	; 0xa0
1a003be4:	7613      	strb	r3, [r2, #24]
1a003be6:	e7e6      	b.n	1a003bb6 <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a003be8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003bec:	0082      	lsls	r2, r0, #2
1a003bee:	4b0a      	ldr	r3, [pc, #40]	; (1a003c18 <uartInterrupt+0x84>)
1a003bf0:	4413      	add	r3, r2
1a003bf2:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a003bf6:	2b00      	cmp	r3, #0
1a003bf8:	db0c      	blt.n	1a003c14 <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003bfa:	f003 011f 	and.w	r1, r3, #31
1a003bfe:	095b      	lsrs	r3, r3, #5
1a003c00:	2201      	movs	r2, #1
1a003c02:	408a      	lsls	r2, r1
1a003c04:	3320      	adds	r3, #32
1a003c06:	4905      	ldr	r1, [pc, #20]	; (1a003c1c <uartInterrupt+0x88>)
1a003c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a003c0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a003c10:	f3bf 8f6f 	isb	sy
}
1a003c14:	4770      	bx	lr
1a003c16:	bf00      	nop
1a003c18:	1a005b50 	.word	0x1a005b50
1a003c1c:	e000e100 	.word	0xe000e100
1a003c20:	e000ecfc 	.word	0xe000ecfc

1a003c24 <uartCallbackSet>:
   switch(event){
1a003c24:	b111      	cbz	r1, 1a003c2c <uartCallbackSet+0x8>
1a003c26:	2901      	cmp	r1, #1
1a003c28:	d01d      	beq.n	1a003c66 <uartCallbackSet+0x42>
1a003c2a:	4770      	bx	lr
         if( callbackFunc != 0 ) {
1a003c2c:	b182      	cbz	r2, 1a003c50 <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a003c2e:	2801      	cmp	r0, #1
1a003c30:	d90f      	bls.n	1a003c52 <uartCallbackSet+0x2e>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a003c32:	1ec3      	subs	r3, r0, #3
1a003c34:	b2db      	uxtb	r3, r3
1a003c36:	2b01      	cmp	r3, #1
1a003c38:	d90e      	bls.n	1a003c58 <uartCallbackSet+0x34>
            if( uart == UART_232 ){
1a003c3a:	2805      	cmp	r0, #5
1a003c3c:	d00f      	beq.n	1a003c5e <uartCallbackSet+0x3a>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a003c3e:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a003c40:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003c44:	0082      	lsls	r2, r0, #2
1a003c46:	4913      	ldr	r1, [pc, #76]	; (1a003c94 <uartCallbackSet+0x70>)
1a003c48:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a003c4a:	6851      	ldr	r1, [r2, #4]
1a003c4c:	430b      	orrs	r3, r1
1a003c4e:	6053      	str	r3, [r2, #4]
}
1a003c50:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a003c52:	4b11      	ldr	r3, [pc, #68]	; (1a003c98 <uartCallbackSet+0x74>)
1a003c54:	601a      	str	r2, [r3, #0]
1a003c56:	e7ec      	b.n	1a003c32 <uartCallbackSet+0xe>
               rxIsrCallbackUART2 = callbackFunc;
1a003c58:	4b10      	ldr	r3, [pc, #64]	; (1a003c9c <uartCallbackSet+0x78>)
1a003c5a:	601a      	str	r2, [r3, #0]
1a003c5c:	e7ed      	b.n	1a003c3a <uartCallbackSet+0x16>
               rxIsrCallbackUART3 = callbackFunc;
1a003c5e:	4b10      	ldr	r3, [pc, #64]	; (1a003ca0 <uartCallbackSet+0x7c>)
1a003c60:	601a      	str	r2, [r3, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a003c62:	2305      	movs	r3, #5
1a003c64:	e7ec      	b.n	1a003c40 <uartCallbackSet+0x1c>
         if( callbackFunc != 0 ) {
1a003c66:	2a00      	cmp	r2, #0
1a003c68:	d0f2      	beq.n	1a003c50 <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a003c6a:	2801      	cmp	r0, #1
1a003c6c:	d907      	bls.n	1a003c7e <uartCallbackSet+0x5a>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a003c6e:	1ec3      	subs	r3, r0, #3
1a003c70:	b2db      	uxtb	r3, r3
1a003c72:	2b01      	cmp	r3, #1
1a003c74:	d906      	bls.n	1a003c84 <uartCallbackSet+0x60>
            if( uart == UART_232 ){
1a003c76:	2805      	cmp	r0, #5
1a003c78:	d007      	beq.n	1a003c8a <uartCallbackSet+0x66>
         intMask = UART_IER_THREINT;
1a003c7a:	2302      	movs	r3, #2
1a003c7c:	e7e0      	b.n	1a003c40 <uartCallbackSet+0x1c>
               txIsrCallbackUART0 = callbackFunc;
1a003c7e:	4b09      	ldr	r3, [pc, #36]	; (1a003ca4 <uartCallbackSet+0x80>)
1a003c80:	601a      	str	r2, [r3, #0]
1a003c82:	e7f4      	b.n	1a003c6e <uartCallbackSet+0x4a>
               txIsrCallbackUART2 = callbackFunc;
1a003c84:	4b08      	ldr	r3, [pc, #32]	; (1a003ca8 <uartCallbackSet+0x84>)
1a003c86:	601a      	str	r2, [r3, #0]
1a003c88:	e7f5      	b.n	1a003c76 <uartCallbackSet+0x52>
               txIsrCallbackUART3 = callbackFunc;
1a003c8a:	4b08      	ldr	r3, [pc, #32]	; (1a003cac <uartCallbackSet+0x88>)
1a003c8c:	601a      	str	r2, [r3, #0]
         intMask = UART_IER_THREINT;
1a003c8e:	2302      	movs	r3, #2
1a003c90:	e7d6      	b.n	1a003c40 <uartCallbackSet+0x1c>
1a003c92:	bf00      	nop
1a003c94:	1a005b50 	.word	0x1a005b50
1a003c98:	10003b00 	.word	0x10003b00
1a003c9c:	10003b04 	.word	0x10003b04
1a003ca0:	10003b08 	.word	0x10003b08
1a003ca4:	10003b0c 	.word	0x10003b0c
1a003ca8:	10003b10 	.word	0x10003b10
1a003cac:	10003b14 	.word	0x10003b14

1a003cb0 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a003cb0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003cb4:	0083      	lsls	r3, r0, #2
1a003cb6:	4a03      	ldr	r2, [pc, #12]	; (1a003cc4 <uartTxReady+0x14>)
1a003cb8:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a003cba:	6958      	ldr	r0, [r3, #20]
}
1a003cbc:	f000 0020 	and.w	r0, r0, #32
1a003cc0:	4770      	bx	lr
1a003cc2:	bf00      	nop
1a003cc4:	1a005b50 	.word	0x1a005b50

1a003cc8 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a003cc8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003ccc:	0083      	lsls	r3, r0, #2
1a003cce:	4a02      	ldr	r2, [pc, #8]	; (1a003cd8 <uartTxWrite+0x10>)
1a003cd0:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a003cd2:	6019      	str	r1, [r3, #0]
}
1a003cd4:	4770      	bx	lr
1a003cd6:	bf00      	nop
1a003cd8:	1a005b50 	.word	0x1a005b50

1a003cdc <uartInit>:
{
1a003cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003ce0:	4680      	mov	r8, r0
1a003ce2:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a003ce4:	4c19      	ldr	r4, [pc, #100]	; (1a003d4c <uartInit+0x70>)
1a003ce6:	0045      	lsls	r5, r0, #1
1a003ce8:	182a      	adds	r2, r5, r0
1a003cea:	0093      	lsls	r3, r2, #2
1a003cec:	18e6      	adds	r6, r4, r3
1a003cee:	58e7      	ldr	r7, [r4, r3]
1a003cf0:	4638      	mov	r0, r7
1a003cf2:	f7ff f99b 	bl	1a00302c <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a003cf6:	4649      	mov	r1, r9
1a003cf8:	4638      	mov	r0, r7
1a003cfa:	f7ff f9c1 	bl	1a003080 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a003cfe:	2307      	movs	r3, #7
1a003d00:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003d02:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a003d04:	2301      	movs	r3, #1
1a003d06:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a003d08:	7930      	ldrb	r0, [r6, #4]
1a003d0a:	7973      	ldrb	r3, [r6, #5]
1a003d0c:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003d0e:	f042 0218 	orr.w	r2, r2, #24
1a003d12:	490f      	ldr	r1, [pc, #60]	; (1a003d50 <uartInit+0x74>)
1a003d14:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a003d1c:	79f0      	ldrb	r0, [r6, #7]
1a003d1e:	7a33      	ldrb	r3, [r6, #8]
1a003d20:	7a72      	ldrb	r2, [r6, #9]
1a003d22:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003d26:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a003d2e:	f1b8 0f01 	cmp.w	r8, #1
1a003d32:	d001      	beq.n	1a003d38 <uartInit+0x5c>
}
1a003d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a003d38:	4a06      	ldr	r2, [pc, #24]	; (1a003d54 <uartInit+0x78>)
1a003d3a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a003d3c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a003d40:	64d3      	str	r3, [r2, #76]	; 0x4c
1a003d42:	221a      	movs	r2, #26
1a003d44:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a003d48:	e7f4      	b.n	1a003d34 <uartInit+0x58>
1a003d4a:	bf00      	nop
1a003d4c:	1a005b50 	.word	0x1a005b50
1a003d50:	40086000 	.word	0x40086000
1a003d54:	40081000 	.word	0x40081000

1a003d58 <uartWriteByte>:
{
1a003d58:	b538      	push	{r3, r4, r5, lr}
1a003d5a:	4604      	mov	r4, r0
1a003d5c:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a003d5e:	4620      	mov	r0, r4
1a003d60:	f7ff ffa6 	bl	1a003cb0 <uartTxReady>
1a003d64:	2800      	cmp	r0, #0
1a003d66:	d0fa      	beq.n	1a003d5e <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a003d68:	4629      	mov	r1, r5
1a003d6a:	4620      	mov	r0, r4
1a003d6c:	f7ff ffac 	bl	1a003cc8 <uartTxWrite>
}
1a003d70:	bd38      	pop	{r3, r4, r5, pc}

1a003d72 <uartWriteString>:
{
1a003d72:	b538      	push	{r3, r4, r5, lr}
1a003d74:	4605      	mov	r5, r0
1a003d76:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a003d78:	e003      	b.n	1a003d82 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a003d7a:	4628      	mov	r0, r5
1a003d7c:	f7ff ffec 	bl	1a003d58 <uartWriteByte>
      str++;
1a003d80:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a003d82:	7821      	ldrb	r1, [r4, #0]
1a003d84:	2900      	cmp	r1, #0
1a003d86:	d1f8      	bne.n	1a003d7a <uartWriteString+0x8>
}
1a003d88:	bd38      	pop	{r3, r4, r5, pc}
1a003d8a:	Address 0x000000001a003d8a is out of bounds.


1a003d8c <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a003d8c:	b508      	push	{r3, lr}
  uartProcessIRQ( UART_USB );
1a003d8e:	2003      	movs	r0, #3
1a003d90:	f7ff feae 	bl	1a003af0 <uartProcessIRQ>
  printf("working..");
1a003d94:	4801      	ldr	r0, [pc, #4]	; (1a003d9c <UART2_IRQHandler+0x10>)
1a003d96:	f000 fbb7 	bl	1a004508 <iprintf>
}
1a003d9a:	bd08      	pop	{r3, pc}
1a003d9c:	1a005b44 	.word	0x1a005b44

1a003da0 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a003da0:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a003da2:	2005      	movs	r0, #5
1a003da4:	f7ff fea4 	bl	1a003af0 <uartProcessIRQ>
}
1a003da8:	bd08      	pop	{r3, pc}
1a003daa:	Address 0x000000001a003daa is out of bounds.


1a003dac <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a003dac:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a003db0:	4908      	ldr	r1, [pc, #32]	; (1a003dd4 <tickerCallback+0x28>)
1a003db2:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003db6:	f112 0b01 	adds.w	fp, r2, #1
1a003dba:	f143 0c00 	adc.w	ip, r3, #0
1a003dbe:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a003dc2:	4b05      	ldr	r3, [pc, #20]	; (1a003dd8 <tickerCallback+0x2c>)
1a003dc4:	681b      	ldr	r3, [r3, #0]
1a003dc6:	b113      	cbz	r3, 1a003dce <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a003dc8:	4a04      	ldr	r2, [pc, #16]	; (1a003ddc <tickerCallback+0x30>)
1a003dca:	6810      	ldr	r0, [r2, #0]
1a003dcc:	4798      	blx	r3
   }
}
1a003dce:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a003dd2:	bf00      	nop
1a003dd4:	10003b20 	.word	0x10003b20
1a003dd8:	10003b28 	.word	0x10003b28
1a003ddc:	10003b18 	.word	0x10003b18

1a003de0 <tickInit>:
{
1a003de0:	b510      	push	{r4, lr}
1a003de2:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a003de4:	4b0e      	ldr	r3, [pc, #56]	; (1a003e20 <tickInit+0x40>)
1a003de6:	9301      	str	r3, [sp, #4]
1a003de8:	4b0e      	ldr	r3, [pc, #56]	; (1a003e24 <tickInit+0x44>)
1a003dea:	9300      	str	r3, [sp, #0]
1a003dec:	2300      	movs	r3, #0
1a003dee:	2201      	movs	r2, #1
1a003df0:	4601      	mov	r1, r0
1a003df2:	480d      	ldr	r0, [pc, #52]	; (1a003e28 <tickInit+0x48>)
1a003df4:	f7fe fc54 	bl	1a0026a0 <xTimerCreateStatic>
         if (h == NULL)
1a003df8:	b178      	cbz	r0, 1a003e1a <tickInit+0x3a>
1a003dfa:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a003dfc:	f7fd ff4c 	bl	1a001c98 <xTaskGetTickCount>
1a003e00:	2300      	movs	r3, #0
1a003e02:	9300      	str	r3, [sp, #0]
1a003e04:	4602      	mov	r2, r0
1a003e06:	2101      	movs	r1, #1
1a003e08:	4620      	mov	r0, r4
1a003e0a:	f7fe fc6f 	bl	1a0026ec <xTimerGenericCommand>
1a003e0e:	2801      	cmp	r0, #1
1a003e10:	bf14      	ite	ne
1a003e12:	2000      	movne	r0, #0
1a003e14:	2001      	moveq	r0, #1
}
1a003e16:	b002      	add	sp, #8
1a003e18:	bd10      	pop	{r4, pc}
            return 0;
1a003e1a:	2000      	movs	r0, #0
1a003e1c:	e7fb      	b.n	1a003e16 <tickInit+0x36>
1a003e1e:	bf00      	nop
1a003e20:	10003b2c 	.word	0x10003b2c
1a003e24:	1a003dad 	.word	0x1a003dad
1a003e28:	1a005b98 	.word	0x1a005b98

1a003e2c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003e2c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a003e2e:	4d0b      	ldr	r5, [pc, #44]	; (1a003e5c <gpioObtainPinInit+0x30>)
1a003e30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003e34:	182c      	adds	r4, r5, r0
1a003e36:	5628      	ldrsb	r0, [r5, r0]
1a003e38:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a003e3a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a003e3e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a003e40:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003e44:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003e46:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a003e4a:	9b02      	ldr	r3, [sp, #8]
1a003e4c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a003e4e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a003e52:	9b03      	ldr	r3, [sp, #12]
1a003e54:	701a      	strb	r2, [r3, #0]
}
1a003e56:	bc30      	pop	{r4, r5}
1a003e58:	4770      	bx	lr
1a003e5a:	bf00      	nop
1a003e5c:	1a005ba4 	.word	0x1a005ba4

1a003e60 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a003e60:	b570      	push	{r4, r5, r6, lr}
1a003e62:	b084      	sub	sp, #16
1a003e64:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003e66:	2300      	movs	r3, #0
1a003e68:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003e6c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003e70:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003e74:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003e78:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003e7c:	f10d 030b 	add.w	r3, sp, #11
1a003e80:	9301      	str	r3, [sp, #4]
1a003e82:	ab03      	add	r3, sp, #12
1a003e84:	9300      	str	r3, [sp, #0]
1a003e86:	f10d 030d 	add.w	r3, sp, #13
1a003e8a:	f10d 020e 	add.w	r2, sp, #14
1a003e8e:	f10d 010f 	add.w	r1, sp, #15
1a003e92:	f7ff ffcb 	bl	1a003e2c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a003e96:	2c05      	cmp	r4, #5
1a003e98:	f200 80a5 	bhi.w	1a003fe6 <gpioInit+0x186>
1a003e9c:	e8df f004 	tbb	[pc, r4]
1a003ea0:	45278109 	.word	0x45278109
1a003ea4:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003ea6:	4851      	ldr	r0, [pc, #324]	; (1a003fec <gpioInit+0x18c>)
1a003ea8:	f7ff fd5e 	bl	1a003968 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003eac:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a003eae:	b004      	add	sp, #16
1a003eb0:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a003eb2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003eb6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003eba:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003ebe:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003ec2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003ec6:	494a      	ldr	r1, [pc, #296]	; (1a003ff0 <gpioInit+0x190>)
1a003ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003ecc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003ed0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003ed4:	2001      	movs	r0, #1
1a003ed6:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003eda:	4c44      	ldr	r4, [pc, #272]	; (1a003fec <gpioInit+0x18c>)
1a003edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003ee0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003ee4:	ea22 0201 	bic.w	r2, r2, r1
1a003ee8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003eec:	e7df      	b.n	1a003eae <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003eee:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003ef2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003ef6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003efa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a003efe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003f02:	493b      	ldr	r1, [pc, #236]	; (1a003ff0 <gpioInit+0x190>)
1a003f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003f08:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003f0c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003f10:	2001      	movs	r0, #1
1a003f12:	fa00 f102 	lsl.w	r1, r0, r2
1a003f16:	4c35      	ldr	r4, [pc, #212]	; (1a003fec <gpioInit+0x18c>)
1a003f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003f1c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003f20:	ea22 0201 	bic.w	r2, r2, r1
1a003f24:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003f28:	e7c1      	b.n	1a003eae <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003f2a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003f2e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003f32:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003f36:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a003f3a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003f3e:	492c      	ldr	r1, [pc, #176]	; (1a003ff0 <gpioInit+0x190>)
1a003f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003f44:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003f48:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003f4c:	2001      	movs	r0, #1
1a003f4e:	fa00 f102 	lsl.w	r1, r0, r2
1a003f52:	4c26      	ldr	r4, [pc, #152]	; (1a003fec <gpioInit+0x18c>)
1a003f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003f58:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003f5c:	ea22 0201 	bic.w	r2, r2, r1
1a003f60:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003f64:	e7a3      	b.n	1a003eae <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003f66:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003f6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003f6e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003f72:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a003f76:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003f7a:	491d      	ldr	r1, [pc, #116]	; (1a003ff0 <gpioInit+0x190>)
1a003f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003f80:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003f84:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003f88:	2001      	movs	r0, #1
1a003f8a:	fa00 f102 	lsl.w	r1, r0, r2
1a003f8e:	4c17      	ldr	r4, [pc, #92]	; (1a003fec <gpioInit+0x18c>)
1a003f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003f94:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003f98:	ea22 0201 	bic.w	r2, r2, r1
1a003f9c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003fa0:	e785      	b.n	1a003eae <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003fa2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003fa6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003faa:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003fae:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003fb2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003fb6:	490e      	ldr	r1, [pc, #56]	; (1a003ff0 <gpioInit+0x190>)
1a003fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003fbc:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003fc0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003fc4:	2001      	movs	r0, #1
1a003fc6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a003fca:	4b08      	ldr	r3, [pc, #32]	; (1a003fec <gpioInit+0x18c>)
1a003fcc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a003fd0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003fd4:	4331      	orrs	r1, r6
1a003fd6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003fda:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003fdc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a003fe0:	2100      	movs	r1, #0
1a003fe2:	5499      	strb	r1, [r3, r2]
1a003fe4:	e763      	b.n	1a003eae <gpioInit+0x4e>
      ret_val = 0;
1a003fe6:	2000      	movs	r0, #0
1a003fe8:	e761      	b.n	1a003eae <gpioInit+0x4e>
1a003fea:	bf00      	nop
1a003fec:	400f4000 	.word	0x400f4000
1a003ff0:	40086000 	.word	0x40086000

1a003ff4 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003ff4:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003ff6:	4b04      	ldr	r3, [pc, #16]	; (1a004008 <USB0_IRQHandler+0x14>)
1a003ff8:	681b      	ldr	r3, [r3, #0]
1a003ffa:	681b      	ldr	r3, [r3, #0]
1a003ffc:	68db      	ldr	r3, [r3, #12]
1a003ffe:	4a03      	ldr	r2, [pc, #12]	; (1a00400c <USB0_IRQHandler+0x18>)
1a004000:	6810      	ldr	r0, [r2, #0]
1a004002:	4798      	blx	r3
}
1a004004:	bd08      	pop	{r3, pc}
1a004006:	bf00      	nop
1a004008:	10003d8c 	.word	0x10003d8c
1a00400c:	10003b5c 	.word	0x10003b5c

1a004010 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a004010:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a004012:	f7ff fbf5 	bl	1a003800 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a004016:	4b3a      	ldr	r3, [pc, #232]	; (1a004100 <boardInit+0xf0>)
1a004018:	6818      	ldr	r0, [r3, #0]
1a00401a:	f7ff fd5b 	bl	1a003ad4 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a00401e:	2001      	movs	r0, #1
1a004020:	2100      	movs	r1, #0
1a004022:	f7ff fedd 	bl	1a003de0 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a004026:	2105      	movs	r1, #5
1a004028:	2000      	movs	r0, #0
1a00402a:	f7ff ff19 	bl	1a003e60 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a00402e:	2100      	movs	r1, #0
1a004030:	2024      	movs	r0, #36	; 0x24
1a004032:	f7ff ff15 	bl	1a003e60 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a004036:	2100      	movs	r1, #0
1a004038:	2025      	movs	r0, #37	; 0x25
1a00403a:	f7ff ff11 	bl	1a003e60 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a00403e:	2100      	movs	r1, #0
1a004040:	2026      	movs	r0, #38	; 0x26
1a004042:	f7ff ff0d 	bl	1a003e60 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a004046:	2100      	movs	r1, #0
1a004048:	2027      	movs	r0, #39	; 0x27
1a00404a:	f7ff ff09 	bl	1a003e60 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00404e:	2101      	movs	r1, #1
1a004050:	2028      	movs	r0, #40	; 0x28
1a004052:	f7ff ff05 	bl	1a003e60 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a004056:	2101      	movs	r1, #1
1a004058:	2029      	movs	r0, #41	; 0x29
1a00405a:	f7ff ff01 	bl	1a003e60 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a00405e:	2101      	movs	r1, #1
1a004060:	202a      	movs	r0, #42	; 0x2a
1a004062:	f7ff fefd 	bl	1a003e60 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a004066:	2101      	movs	r1, #1
1a004068:	202b      	movs	r0, #43	; 0x2b
1a00406a:	f7ff fef9 	bl	1a003e60 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00406e:	2101      	movs	r1, #1
1a004070:	202c      	movs	r0, #44	; 0x2c
1a004072:	f7ff fef5 	bl	1a003e60 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a004076:	2101      	movs	r1, #1
1a004078:	202d      	movs	r0, #45	; 0x2d
1a00407a:	f7ff fef1 	bl	1a003e60 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00407e:	2100      	movs	r1, #0
1a004080:	202e      	movs	r0, #46	; 0x2e
1a004082:	f7ff feed 	bl	1a003e60 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a004086:	2100      	movs	r1, #0
1a004088:	202f      	movs	r0, #47	; 0x2f
1a00408a:	f7ff fee9 	bl	1a003e60 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a00408e:	2100      	movs	r1, #0
1a004090:	2030      	movs	r0, #48	; 0x30
1a004092:	f7ff fee5 	bl	1a003e60 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a004096:	2100      	movs	r1, #0
1a004098:	2031      	movs	r0, #49	; 0x31
1a00409a:	f7ff fee1 	bl	1a003e60 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a00409e:	2100      	movs	r1, #0
1a0040a0:	2032      	movs	r0, #50	; 0x32
1a0040a2:	f7ff fedd 	bl	1a003e60 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a0040a6:	2100      	movs	r1, #0
1a0040a8:	2033      	movs	r0, #51	; 0x33
1a0040aa:	f7ff fed9 	bl	1a003e60 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a0040ae:	2100      	movs	r1, #0
1a0040b0:	2034      	movs	r0, #52	; 0x34
1a0040b2:	f7ff fed5 	bl	1a003e60 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a0040b6:	2100      	movs	r1, #0
1a0040b8:	2035      	movs	r0, #53	; 0x35
1a0040ba:	f7ff fed1 	bl	1a003e60 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a0040be:	2101      	movs	r1, #1
1a0040c0:	2036      	movs	r0, #54	; 0x36
1a0040c2:	f7ff fecd 	bl	1a003e60 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a0040c6:	2101      	movs	r1, #1
1a0040c8:	2037      	movs	r0, #55	; 0x37
1a0040ca:	f7ff fec9 	bl	1a003e60 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a0040ce:	2101      	movs	r1, #1
1a0040d0:	2038      	movs	r0, #56	; 0x38
1a0040d2:	f7ff fec5 	bl	1a003e60 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a0040d6:	2101      	movs	r1, #1
1a0040d8:	2039      	movs	r0, #57	; 0x39
1a0040da:	f7ff fec1 	bl	1a003e60 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a0040de:	2101      	movs	r1, #1
1a0040e0:	203a      	movs	r0, #58	; 0x3a
1a0040e2:	f7ff febd 	bl	1a003e60 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a0040e6:	2101      	movs	r1, #1
1a0040e8:	203b      	movs	r0, #59	; 0x3b
1a0040ea:	f7ff feb9 	bl	1a003e60 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a0040ee:	2101      	movs	r1, #1
1a0040f0:	203c      	movs	r0, #60	; 0x3c
1a0040f2:	f7ff feb5 	bl	1a003e60 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a0040f6:	2101      	movs	r1, #1
1a0040f8:	203d      	movs	r0, #61	; 0x3d
1a0040fa:	f7ff feb1 	bl	1a003e60 <gpioInit>

}
1a0040fe:	bd08      	pop	{r3, pc}
1a004100:	10003d88 	.word	0x10003d88

1a004104 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a004104:	2301      	movs	r3, #1
1a004106:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00410a:	4b01      	ldr	r3, [pc, #4]	; (1a004110 <clearInterrupt+0xc>)
1a00410c:	6258      	str	r0, [r3, #36]	; 0x24
}
1a00410e:	4770      	bx	lr
1a004110:	40087000 	.word	0x40087000

1a004114 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a004116:	4b12      	ldr	r3, [pc, #72]	; (1a004160 <serveInterrupt+0x4c>)
1a004118:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a00411a:	4b12      	ldr	r3, [pc, #72]	; (1a004164 <serveInterrupt+0x50>)
1a00411c:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00411e:	2301      	movs	r3, #1
1a004120:	4083      	lsls	r3, r0
1a004122:	420b      	tst	r3, r1
1a004124:	d111      	bne.n	1a00414a <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a004126:	4910      	ldr	r1, [pc, #64]	; (1a004168 <serveInterrupt+0x54>)
1a004128:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00412a:	4d10      	ldr	r5, [pc, #64]	; (1a00416c <serveInterrupt+0x58>)
1a00412c:	0051      	lsls	r1, r2, #1
1a00412e:	188f      	adds	r7, r1, r2
1a004130:	00fc      	lsls	r4, r7, #3
1a004132:	4627      	mov	r7, r4
1a004134:	442c      	add	r4, r5
1a004136:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a004138:	6864      	ldr	r4, [r4, #4]
1a00413a:	1b36      	subs	r6, r6, r4
1a00413c:	443d      	add	r5, r7
1a00413e:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a004140:	4a08      	ldr	r2, [pc, #32]	; (1a004164 <serveInterrupt+0x50>)
1a004142:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a004144:	f7ff ffde 	bl	1a004104 <clearInterrupt>
}
1a004148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00414a:	4907      	ldr	r1, [pc, #28]	; (1a004168 <serveInterrupt+0x54>)
1a00414c:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00414e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a004152:	00d1      	lsls	r1, r2, #3
1a004154:	4a05      	ldr	r2, [pc, #20]	; (1a00416c <serveInterrupt+0x58>)
1a004156:	440a      	add	r2, r1
1a004158:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a00415a:	4a02      	ldr	r2, [pc, #8]	; (1a004164 <serveInterrupt+0x50>)
1a00415c:	61d3      	str	r3, [r2, #28]
1a00415e:	e7f1      	b.n	1a004144 <serveInterrupt+0x30>
1a004160:	1a005cdc 	.word	0x1a005cdc
1a004164:	40087000 	.word	0x40087000
1a004168:	40084000 	.word	0x40084000
1a00416c:	100000ec 	.word	0x100000ec

1a004170 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a004170:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a004172:	2000      	movs	r0, #0
1a004174:	f7ff ffce 	bl	1a004114 <serveInterrupt>
}
1a004178:	bd08      	pop	{r3, pc}

1a00417a <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a00417a:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a00417c:	2001      	movs	r0, #1
1a00417e:	f7ff ffc9 	bl	1a004114 <serveInterrupt>
}
1a004182:	bd08      	pop	{r3, pc}

1a004184 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a004184:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a004186:	2002      	movs	r0, #2
1a004188:	f7ff ffc4 	bl	1a004114 <serveInterrupt>
}
1a00418c:	bd08      	pop	{r3, pc}
1a00418e:	Address 0x000000001a00418e is out of bounds.


1a004190 <__aeabi_uldivmod>:
1a004190:	b953      	cbnz	r3, 1a0041a8 <__aeabi_uldivmod+0x18>
1a004192:	b94a      	cbnz	r2, 1a0041a8 <__aeabi_uldivmod+0x18>
1a004194:	2900      	cmp	r1, #0
1a004196:	bf08      	it	eq
1a004198:	2800      	cmpeq	r0, #0
1a00419a:	bf1c      	itt	ne
1a00419c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0041a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0041a4:	f000 b972 	b.w	1a00448c <__aeabi_idiv0>
1a0041a8:	f1ad 0c08 	sub.w	ip, sp, #8
1a0041ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0041b0:	f000 f806 	bl	1a0041c0 <__udivmoddi4>
1a0041b4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0041b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0041bc:	b004      	add	sp, #16
1a0041be:	4770      	bx	lr

1a0041c0 <__udivmoddi4>:
1a0041c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0041c4:	9e08      	ldr	r6, [sp, #32]
1a0041c6:	4604      	mov	r4, r0
1a0041c8:	4688      	mov	r8, r1
1a0041ca:	2b00      	cmp	r3, #0
1a0041cc:	d14b      	bne.n	1a004266 <__udivmoddi4+0xa6>
1a0041ce:	428a      	cmp	r2, r1
1a0041d0:	4615      	mov	r5, r2
1a0041d2:	d967      	bls.n	1a0042a4 <__udivmoddi4+0xe4>
1a0041d4:	fab2 f282 	clz	r2, r2
1a0041d8:	b14a      	cbz	r2, 1a0041ee <__udivmoddi4+0x2e>
1a0041da:	f1c2 0720 	rsb	r7, r2, #32
1a0041de:	fa01 f302 	lsl.w	r3, r1, r2
1a0041e2:	fa20 f707 	lsr.w	r7, r0, r7
1a0041e6:	4095      	lsls	r5, r2
1a0041e8:	ea47 0803 	orr.w	r8, r7, r3
1a0041ec:	4094      	lsls	r4, r2
1a0041ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0041f2:	0c23      	lsrs	r3, r4, #16
1a0041f4:	fbb8 f7fe 	udiv	r7, r8, lr
1a0041f8:	fa1f fc85 	uxth.w	ip, r5
1a0041fc:	fb0e 8817 	mls	r8, lr, r7, r8
1a004200:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a004204:	fb07 f10c 	mul.w	r1, r7, ip
1a004208:	4299      	cmp	r1, r3
1a00420a:	d909      	bls.n	1a004220 <__udivmoddi4+0x60>
1a00420c:	18eb      	adds	r3, r5, r3
1a00420e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a004212:	f080 811b 	bcs.w	1a00444c <__udivmoddi4+0x28c>
1a004216:	4299      	cmp	r1, r3
1a004218:	f240 8118 	bls.w	1a00444c <__udivmoddi4+0x28c>
1a00421c:	3f02      	subs	r7, #2
1a00421e:	442b      	add	r3, r5
1a004220:	1a5b      	subs	r3, r3, r1
1a004222:	b2a4      	uxth	r4, r4
1a004224:	fbb3 f0fe 	udiv	r0, r3, lr
1a004228:	fb0e 3310 	mls	r3, lr, r0, r3
1a00422c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004230:	fb00 fc0c 	mul.w	ip, r0, ip
1a004234:	45a4      	cmp	ip, r4
1a004236:	d909      	bls.n	1a00424c <__udivmoddi4+0x8c>
1a004238:	192c      	adds	r4, r5, r4
1a00423a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00423e:	f080 8107 	bcs.w	1a004450 <__udivmoddi4+0x290>
1a004242:	45a4      	cmp	ip, r4
1a004244:	f240 8104 	bls.w	1a004450 <__udivmoddi4+0x290>
1a004248:	3802      	subs	r0, #2
1a00424a:	442c      	add	r4, r5
1a00424c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a004250:	eba4 040c 	sub.w	r4, r4, ip
1a004254:	2700      	movs	r7, #0
1a004256:	b11e      	cbz	r6, 1a004260 <__udivmoddi4+0xa0>
1a004258:	40d4      	lsrs	r4, r2
1a00425a:	2300      	movs	r3, #0
1a00425c:	e9c6 4300 	strd	r4, r3, [r6]
1a004260:	4639      	mov	r1, r7
1a004262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004266:	428b      	cmp	r3, r1
1a004268:	d909      	bls.n	1a00427e <__udivmoddi4+0xbe>
1a00426a:	2e00      	cmp	r6, #0
1a00426c:	f000 80eb 	beq.w	1a004446 <__udivmoddi4+0x286>
1a004270:	2700      	movs	r7, #0
1a004272:	e9c6 0100 	strd	r0, r1, [r6]
1a004276:	4638      	mov	r0, r7
1a004278:	4639      	mov	r1, r7
1a00427a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00427e:	fab3 f783 	clz	r7, r3
1a004282:	2f00      	cmp	r7, #0
1a004284:	d147      	bne.n	1a004316 <__udivmoddi4+0x156>
1a004286:	428b      	cmp	r3, r1
1a004288:	d302      	bcc.n	1a004290 <__udivmoddi4+0xd0>
1a00428a:	4282      	cmp	r2, r0
1a00428c:	f200 80fa 	bhi.w	1a004484 <__udivmoddi4+0x2c4>
1a004290:	1a84      	subs	r4, r0, r2
1a004292:	eb61 0303 	sbc.w	r3, r1, r3
1a004296:	2001      	movs	r0, #1
1a004298:	4698      	mov	r8, r3
1a00429a:	2e00      	cmp	r6, #0
1a00429c:	d0e0      	beq.n	1a004260 <__udivmoddi4+0xa0>
1a00429e:	e9c6 4800 	strd	r4, r8, [r6]
1a0042a2:	e7dd      	b.n	1a004260 <__udivmoddi4+0xa0>
1a0042a4:	b902      	cbnz	r2, 1a0042a8 <__udivmoddi4+0xe8>
1a0042a6:	deff      	udf	#255	; 0xff
1a0042a8:	fab2 f282 	clz	r2, r2
1a0042ac:	2a00      	cmp	r2, #0
1a0042ae:	f040 808f 	bne.w	1a0043d0 <__udivmoddi4+0x210>
1a0042b2:	1b49      	subs	r1, r1, r5
1a0042b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0042b8:	fa1f f885 	uxth.w	r8, r5
1a0042bc:	2701      	movs	r7, #1
1a0042be:	fbb1 fcfe 	udiv	ip, r1, lr
1a0042c2:	0c23      	lsrs	r3, r4, #16
1a0042c4:	fb0e 111c 	mls	r1, lr, ip, r1
1a0042c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0042cc:	fb08 f10c 	mul.w	r1, r8, ip
1a0042d0:	4299      	cmp	r1, r3
1a0042d2:	d907      	bls.n	1a0042e4 <__udivmoddi4+0x124>
1a0042d4:	18eb      	adds	r3, r5, r3
1a0042d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0042da:	d202      	bcs.n	1a0042e2 <__udivmoddi4+0x122>
1a0042dc:	4299      	cmp	r1, r3
1a0042de:	f200 80cd 	bhi.w	1a00447c <__udivmoddi4+0x2bc>
1a0042e2:	4684      	mov	ip, r0
1a0042e4:	1a59      	subs	r1, r3, r1
1a0042e6:	b2a3      	uxth	r3, r4
1a0042e8:	fbb1 f0fe 	udiv	r0, r1, lr
1a0042ec:	fb0e 1410 	mls	r4, lr, r0, r1
1a0042f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0042f4:	fb08 f800 	mul.w	r8, r8, r0
1a0042f8:	45a0      	cmp	r8, r4
1a0042fa:	d907      	bls.n	1a00430c <__udivmoddi4+0x14c>
1a0042fc:	192c      	adds	r4, r5, r4
1a0042fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004302:	d202      	bcs.n	1a00430a <__udivmoddi4+0x14a>
1a004304:	45a0      	cmp	r8, r4
1a004306:	f200 80b6 	bhi.w	1a004476 <__udivmoddi4+0x2b6>
1a00430a:	4618      	mov	r0, r3
1a00430c:	eba4 0408 	sub.w	r4, r4, r8
1a004310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a004314:	e79f      	b.n	1a004256 <__udivmoddi4+0x96>
1a004316:	f1c7 0c20 	rsb	ip, r7, #32
1a00431a:	40bb      	lsls	r3, r7
1a00431c:	fa22 fe0c 	lsr.w	lr, r2, ip
1a004320:	ea4e 0e03 	orr.w	lr, lr, r3
1a004324:	fa01 f407 	lsl.w	r4, r1, r7
1a004328:	fa20 f50c 	lsr.w	r5, r0, ip
1a00432c:	fa21 f30c 	lsr.w	r3, r1, ip
1a004330:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a004334:	4325      	orrs	r5, r4
1a004336:	fbb3 f9f8 	udiv	r9, r3, r8
1a00433a:	0c2c      	lsrs	r4, r5, #16
1a00433c:	fb08 3319 	mls	r3, r8, r9, r3
1a004340:	fa1f fa8e 	uxth.w	sl, lr
1a004344:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a004348:	fb09 f40a 	mul.w	r4, r9, sl
1a00434c:	429c      	cmp	r4, r3
1a00434e:	fa02 f207 	lsl.w	r2, r2, r7
1a004352:	fa00 f107 	lsl.w	r1, r0, r7
1a004356:	d90b      	bls.n	1a004370 <__udivmoddi4+0x1b0>
1a004358:	eb1e 0303 	adds.w	r3, lr, r3
1a00435c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a004360:	f080 8087 	bcs.w	1a004472 <__udivmoddi4+0x2b2>
1a004364:	429c      	cmp	r4, r3
1a004366:	f240 8084 	bls.w	1a004472 <__udivmoddi4+0x2b2>
1a00436a:	f1a9 0902 	sub.w	r9, r9, #2
1a00436e:	4473      	add	r3, lr
1a004370:	1b1b      	subs	r3, r3, r4
1a004372:	b2ad      	uxth	r5, r5
1a004374:	fbb3 f0f8 	udiv	r0, r3, r8
1a004378:	fb08 3310 	mls	r3, r8, r0, r3
1a00437c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a004380:	fb00 fa0a 	mul.w	sl, r0, sl
1a004384:	45a2      	cmp	sl, r4
1a004386:	d908      	bls.n	1a00439a <__udivmoddi4+0x1da>
1a004388:	eb1e 0404 	adds.w	r4, lr, r4
1a00438c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004390:	d26b      	bcs.n	1a00446a <__udivmoddi4+0x2aa>
1a004392:	45a2      	cmp	sl, r4
1a004394:	d969      	bls.n	1a00446a <__udivmoddi4+0x2aa>
1a004396:	3802      	subs	r0, #2
1a004398:	4474      	add	r4, lr
1a00439a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00439e:	fba0 8902 	umull	r8, r9, r0, r2
1a0043a2:	eba4 040a 	sub.w	r4, r4, sl
1a0043a6:	454c      	cmp	r4, r9
1a0043a8:	46c2      	mov	sl, r8
1a0043aa:	464b      	mov	r3, r9
1a0043ac:	d354      	bcc.n	1a004458 <__udivmoddi4+0x298>
1a0043ae:	d051      	beq.n	1a004454 <__udivmoddi4+0x294>
1a0043b0:	2e00      	cmp	r6, #0
1a0043b2:	d069      	beq.n	1a004488 <__udivmoddi4+0x2c8>
1a0043b4:	ebb1 050a 	subs.w	r5, r1, sl
1a0043b8:	eb64 0403 	sbc.w	r4, r4, r3
1a0043bc:	fa04 fc0c 	lsl.w	ip, r4, ip
1a0043c0:	40fd      	lsrs	r5, r7
1a0043c2:	40fc      	lsrs	r4, r7
1a0043c4:	ea4c 0505 	orr.w	r5, ip, r5
1a0043c8:	e9c6 5400 	strd	r5, r4, [r6]
1a0043cc:	2700      	movs	r7, #0
1a0043ce:	e747      	b.n	1a004260 <__udivmoddi4+0xa0>
1a0043d0:	f1c2 0320 	rsb	r3, r2, #32
1a0043d4:	fa20 f703 	lsr.w	r7, r0, r3
1a0043d8:	4095      	lsls	r5, r2
1a0043da:	fa01 f002 	lsl.w	r0, r1, r2
1a0043de:	fa21 f303 	lsr.w	r3, r1, r3
1a0043e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0043e6:	4338      	orrs	r0, r7
1a0043e8:	0c01      	lsrs	r1, r0, #16
1a0043ea:	fbb3 f7fe 	udiv	r7, r3, lr
1a0043ee:	fa1f f885 	uxth.w	r8, r5
1a0043f2:	fb0e 3317 	mls	r3, lr, r7, r3
1a0043f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0043fa:	fb07 f308 	mul.w	r3, r7, r8
1a0043fe:	428b      	cmp	r3, r1
1a004400:	fa04 f402 	lsl.w	r4, r4, r2
1a004404:	d907      	bls.n	1a004416 <__udivmoddi4+0x256>
1a004406:	1869      	adds	r1, r5, r1
1a004408:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a00440c:	d22f      	bcs.n	1a00446e <__udivmoddi4+0x2ae>
1a00440e:	428b      	cmp	r3, r1
1a004410:	d92d      	bls.n	1a00446e <__udivmoddi4+0x2ae>
1a004412:	3f02      	subs	r7, #2
1a004414:	4429      	add	r1, r5
1a004416:	1acb      	subs	r3, r1, r3
1a004418:	b281      	uxth	r1, r0
1a00441a:	fbb3 f0fe 	udiv	r0, r3, lr
1a00441e:	fb0e 3310 	mls	r3, lr, r0, r3
1a004422:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004426:	fb00 f308 	mul.w	r3, r0, r8
1a00442a:	428b      	cmp	r3, r1
1a00442c:	d907      	bls.n	1a00443e <__udivmoddi4+0x27e>
1a00442e:	1869      	adds	r1, r5, r1
1a004430:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a004434:	d217      	bcs.n	1a004466 <__udivmoddi4+0x2a6>
1a004436:	428b      	cmp	r3, r1
1a004438:	d915      	bls.n	1a004466 <__udivmoddi4+0x2a6>
1a00443a:	3802      	subs	r0, #2
1a00443c:	4429      	add	r1, r5
1a00443e:	1ac9      	subs	r1, r1, r3
1a004440:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a004444:	e73b      	b.n	1a0042be <__udivmoddi4+0xfe>
1a004446:	4637      	mov	r7, r6
1a004448:	4630      	mov	r0, r6
1a00444a:	e709      	b.n	1a004260 <__udivmoddi4+0xa0>
1a00444c:	4607      	mov	r7, r0
1a00444e:	e6e7      	b.n	1a004220 <__udivmoddi4+0x60>
1a004450:	4618      	mov	r0, r3
1a004452:	e6fb      	b.n	1a00424c <__udivmoddi4+0x8c>
1a004454:	4541      	cmp	r1, r8
1a004456:	d2ab      	bcs.n	1a0043b0 <__udivmoddi4+0x1f0>
1a004458:	ebb8 0a02 	subs.w	sl, r8, r2
1a00445c:	eb69 020e 	sbc.w	r2, r9, lr
1a004460:	3801      	subs	r0, #1
1a004462:	4613      	mov	r3, r2
1a004464:	e7a4      	b.n	1a0043b0 <__udivmoddi4+0x1f0>
1a004466:	4660      	mov	r0, ip
1a004468:	e7e9      	b.n	1a00443e <__udivmoddi4+0x27e>
1a00446a:	4618      	mov	r0, r3
1a00446c:	e795      	b.n	1a00439a <__udivmoddi4+0x1da>
1a00446e:	4667      	mov	r7, ip
1a004470:	e7d1      	b.n	1a004416 <__udivmoddi4+0x256>
1a004472:	4681      	mov	r9, r0
1a004474:	e77c      	b.n	1a004370 <__udivmoddi4+0x1b0>
1a004476:	3802      	subs	r0, #2
1a004478:	442c      	add	r4, r5
1a00447a:	e747      	b.n	1a00430c <__udivmoddi4+0x14c>
1a00447c:	f1ac 0c02 	sub.w	ip, ip, #2
1a004480:	442b      	add	r3, r5
1a004482:	e72f      	b.n	1a0042e4 <__udivmoddi4+0x124>
1a004484:	4638      	mov	r0, r7
1a004486:	e708      	b.n	1a00429a <__udivmoddi4+0xda>
1a004488:	4637      	mov	r7, r6
1a00448a:	e6e9      	b.n	1a004260 <__udivmoddi4+0xa0>

1a00448c <__aeabi_idiv0>:
1a00448c:	4770      	bx	lr
1a00448e:	bf00      	nop

1a004490 <atoi>:
1a004490:	220a      	movs	r2, #10
1a004492:	2100      	movs	r1, #0
1a004494:	f000 b8f6 	b.w	1a004684 <strtol>

1a004498 <__libc_init_array>:
1a004498:	b570      	push	{r4, r5, r6, lr}
1a00449a:	4e0d      	ldr	r6, [pc, #52]	; (1a0044d0 <__libc_init_array+0x38>)
1a00449c:	4c0d      	ldr	r4, [pc, #52]	; (1a0044d4 <__libc_init_array+0x3c>)
1a00449e:	1ba4      	subs	r4, r4, r6
1a0044a0:	10a4      	asrs	r4, r4, #2
1a0044a2:	2500      	movs	r5, #0
1a0044a4:	42a5      	cmp	r5, r4
1a0044a6:	d109      	bne.n	1a0044bc <__libc_init_array+0x24>
1a0044a8:	4e0b      	ldr	r6, [pc, #44]	; (1a0044d8 <__libc_init_array+0x40>)
1a0044aa:	4c0c      	ldr	r4, [pc, #48]	; (1a0044dc <__libc_init_array+0x44>)
1a0044ac:	f7fc fba1 	bl	1a000bf2 <_init>
1a0044b0:	1ba4      	subs	r4, r4, r6
1a0044b2:	10a4      	asrs	r4, r4, #2
1a0044b4:	2500      	movs	r5, #0
1a0044b6:	42a5      	cmp	r5, r4
1a0044b8:	d105      	bne.n	1a0044c6 <__libc_init_array+0x2e>
1a0044ba:	bd70      	pop	{r4, r5, r6, pc}
1a0044bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0044c0:	4798      	blx	r3
1a0044c2:	3501      	adds	r5, #1
1a0044c4:	e7ee      	b.n	1a0044a4 <__libc_init_array+0xc>
1a0044c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0044ca:	4798      	blx	r3
1a0044cc:	3501      	adds	r5, #1
1a0044ce:	e7f2      	b.n	1a0044b6 <__libc_init_array+0x1e>
1a0044d0:	1a005e84 	.word	0x1a005e84
1a0044d4:	1a005e84 	.word	0x1a005e84
1a0044d8:	1a005e84 	.word	0x1a005e84
1a0044dc:	1a005e88 	.word	0x1a005e88

1a0044e0 <memcpy>:
1a0044e0:	b510      	push	{r4, lr}
1a0044e2:	1e43      	subs	r3, r0, #1
1a0044e4:	440a      	add	r2, r1
1a0044e6:	4291      	cmp	r1, r2
1a0044e8:	d100      	bne.n	1a0044ec <memcpy+0xc>
1a0044ea:	bd10      	pop	{r4, pc}
1a0044ec:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0044f0:	f803 4f01 	strb.w	r4, [r3, #1]!
1a0044f4:	e7f7      	b.n	1a0044e6 <memcpy+0x6>

1a0044f6 <memset>:
1a0044f6:	4402      	add	r2, r0
1a0044f8:	4603      	mov	r3, r0
1a0044fa:	4293      	cmp	r3, r2
1a0044fc:	d100      	bne.n	1a004500 <memset+0xa>
1a0044fe:	4770      	bx	lr
1a004500:	f803 1b01 	strb.w	r1, [r3], #1
1a004504:	e7f9      	b.n	1a0044fa <memset+0x4>
1a004506:	Address 0x000000001a004506 is out of bounds.


1a004508 <iprintf>:
1a004508:	b40f      	push	{r0, r1, r2, r3}
1a00450a:	4b0a      	ldr	r3, [pc, #40]	; (1a004534 <iprintf+0x2c>)
1a00450c:	b513      	push	{r0, r1, r4, lr}
1a00450e:	681c      	ldr	r4, [r3, #0]
1a004510:	b124      	cbz	r4, 1a00451c <iprintf+0x14>
1a004512:	69a3      	ldr	r3, [r4, #24]
1a004514:	b913      	cbnz	r3, 1a00451c <iprintf+0x14>
1a004516:	4620      	mov	r0, r4
1a004518:	f000 fa90 	bl	1a004a3c <__sinit>
1a00451c:	ab05      	add	r3, sp, #20
1a00451e:	9a04      	ldr	r2, [sp, #16]
1a004520:	68a1      	ldr	r1, [r4, #8]
1a004522:	9301      	str	r3, [sp, #4]
1a004524:	4620      	mov	r0, r4
1a004526:	f000 fc6d 	bl	1a004e04 <_vfiprintf_r>
1a00452a:	b002      	add	sp, #8
1a00452c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a004530:	b004      	add	sp, #16
1a004532:	4770      	bx	lr
1a004534:	10000134 	.word	0x10000134

1a004538 <strcat>:
1a004538:	b510      	push	{r4, lr}
1a00453a:	4603      	mov	r3, r0
1a00453c:	781a      	ldrb	r2, [r3, #0]
1a00453e:	1c5c      	adds	r4, r3, #1
1a004540:	b93a      	cbnz	r2, 1a004552 <strcat+0x1a>
1a004542:	3b01      	subs	r3, #1
1a004544:	f811 2b01 	ldrb.w	r2, [r1], #1
1a004548:	f803 2f01 	strb.w	r2, [r3, #1]!
1a00454c:	2a00      	cmp	r2, #0
1a00454e:	d1f9      	bne.n	1a004544 <strcat+0xc>
1a004550:	bd10      	pop	{r4, pc}
1a004552:	4623      	mov	r3, r4
1a004554:	e7f2      	b.n	1a00453c <strcat+0x4>

1a004556 <strcpy>:
1a004556:	4603      	mov	r3, r0
1a004558:	f811 2b01 	ldrb.w	r2, [r1], #1
1a00455c:	f803 2b01 	strb.w	r2, [r3], #1
1a004560:	2a00      	cmp	r2, #0
1a004562:	d1f9      	bne.n	1a004558 <strcpy+0x2>
1a004564:	4770      	bx	lr

1a004566 <strlwr>:
1a004566:	b570      	push	{r4, r5, r6, lr}
1a004568:	4606      	mov	r6, r0
1a00456a:	1e45      	subs	r5, r0, #1
1a00456c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
1a004570:	b90c      	cbnz	r4, 1a004576 <strlwr+0x10>
1a004572:	4630      	mov	r0, r6
1a004574:	bd70      	pop	{r4, r5, r6, pc}
1a004576:	f000 faef 	bl	1a004b58 <__locale_ctype_ptr>
1a00457a:	4420      	add	r0, r4
1a00457c:	4623      	mov	r3, r4
1a00457e:	7842      	ldrb	r2, [r0, #1]
1a004580:	f002 0203 	and.w	r2, r2, #3
1a004584:	2a01      	cmp	r2, #1
1a004586:	bf08      	it	eq
1a004588:	3320      	addeq	r3, #32
1a00458a:	702b      	strb	r3, [r5, #0]
1a00458c:	e7ee      	b.n	1a00456c <strlwr+0x6>

1a00458e <_strtol_l.isra.0>:
1a00458e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004592:	4680      	mov	r8, r0
1a004594:	4689      	mov	r9, r1
1a004596:	4692      	mov	sl, r2
1a004598:	461e      	mov	r6, r3
1a00459a:	460f      	mov	r7, r1
1a00459c:	463d      	mov	r5, r7
1a00459e:	9808      	ldr	r0, [sp, #32]
1a0045a0:	f815 4b01 	ldrb.w	r4, [r5], #1
1a0045a4:	f000 fad4 	bl	1a004b50 <__locale_ctype_ptr_l>
1a0045a8:	4420      	add	r0, r4
1a0045aa:	7843      	ldrb	r3, [r0, #1]
1a0045ac:	f013 0308 	ands.w	r3, r3, #8
1a0045b0:	d132      	bne.n	1a004618 <_strtol_l.isra.0+0x8a>
1a0045b2:	2c2d      	cmp	r4, #45	; 0x2d
1a0045b4:	d132      	bne.n	1a00461c <_strtol_l.isra.0+0x8e>
1a0045b6:	787c      	ldrb	r4, [r7, #1]
1a0045b8:	1cbd      	adds	r5, r7, #2
1a0045ba:	2201      	movs	r2, #1
1a0045bc:	2e00      	cmp	r6, #0
1a0045be:	d05d      	beq.n	1a00467c <_strtol_l.isra.0+0xee>
1a0045c0:	2e10      	cmp	r6, #16
1a0045c2:	d109      	bne.n	1a0045d8 <_strtol_l.isra.0+0x4a>
1a0045c4:	2c30      	cmp	r4, #48	; 0x30
1a0045c6:	d107      	bne.n	1a0045d8 <_strtol_l.isra.0+0x4a>
1a0045c8:	782b      	ldrb	r3, [r5, #0]
1a0045ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
1a0045ce:	2b58      	cmp	r3, #88	; 0x58
1a0045d0:	d14f      	bne.n	1a004672 <_strtol_l.isra.0+0xe4>
1a0045d2:	786c      	ldrb	r4, [r5, #1]
1a0045d4:	2610      	movs	r6, #16
1a0045d6:	3502      	adds	r5, #2
1a0045d8:	2a00      	cmp	r2, #0
1a0045da:	bf14      	ite	ne
1a0045dc:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
1a0045e0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
1a0045e4:	2700      	movs	r7, #0
1a0045e6:	fbb1 fcf6 	udiv	ip, r1, r6
1a0045ea:	4638      	mov	r0, r7
1a0045ec:	fb06 1e1c 	mls	lr, r6, ip, r1
1a0045f0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
1a0045f4:	2b09      	cmp	r3, #9
1a0045f6:	d817      	bhi.n	1a004628 <_strtol_l.isra.0+0x9a>
1a0045f8:	461c      	mov	r4, r3
1a0045fa:	42a6      	cmp	r6, r4
1a0045fc:	dd23      	ble.n	1a004646 <_strtol_l.isra.0+0xb8>
1a0045fe:	1c7b      	adds	r3, r7, #1
1a004600:	d007      	beq.n	1a004612 <_strtol_l.isra.0+0x84>
1a004602:	4584      	cmp	ip, r0
1a004604:	d31c      	bcc.n	1a004640 <_strtol_l.isra.0+0xb2>
1a004606:	d101      	bne.n	1a00460c <_strtol_l.isra.0+0x7e>
1a004608:	45a6      	cmp	lr, r4
1a00460a:	db19      	blt.n	1a004640 <_strtol_l.isra.0+0xb2>
1a00460c:	fb00 4006 	mla	r0, r0, r6, r4
1a004610:	2701      	movs	r7, #1
1a004612:	f815 4b01 	ldrb.w	r4, [r5], #1
1a004616:	e7eb      	b.n	1a0045f0 <_strtol_l.isra.0+0x62>
1a004618:	462f      	mov	r7, r5
1a00461a:	e7bf      	b.n	1a00459c <_strtol_l.isra.0+0xe>
1a00461c:	2c2b      	cmp	r4, #43	; 0x2b
1a00461e:	bf04      	itt	eq
1a004620:	1cbd      	addeq	r5, r7, #2
1a004622:	787c      	ldrbeq	r4, [r7, #1]
1a004624:	461a      	mov	r2, r3
1a004626:	e7c9      	b.n	1a0045bc <_strtol_l.isra.0+0x2e>
1a004628:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
1a00462c:	2b19      	cmp	r3, #25
1a00462e:	d801      	bhi.n	1a004634 <_strtol_l.isra.0+0xa6>
1a004630:	3c37      	subs	r4, #55	; 0x37
1a004632:	e7e2      	b.n	1a0045fa <_strtol_l.isra.0+0x6c>
1a004634:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
1a004638:	2b19      	cmp	r3, #25
1a00463a:	d804      	bhi.n	1a004646 <_strtol_l.isra.0+0xb8>
1a00463c:	3c57      	subs	r4, #87	; 0x57
1a00463e:	e7dc      	b.n	1a0045fa <_strtol_l.isra.0+0x6c>
1a004640:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a004644:	e7e5      	b.n	1a004612 <_strtol_l.isra.0+0x84>
1a004646:	1c7b      	adds	r3, r7, #1
1a004648:	d108      	bne.n	1a00465c <_strtol_l.isra.0+0xce>
1a00464a:	2322      	movs	r3, #34	; 0x22
1a00464c:	f8c8 3000 	str.w	r3, [r8]
1a004650:	4608      	mov	r0, r1
1a004652:	f1ba 0f00 	cmp.w	sl, #0
1a004656:	d107      	bne.n	1a004668 <_strtol_l.isra.0+0xda>
1a004658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00465c:	b102      	cbz	r2, 1a004660 <_strtol_l.isra.0+0xd2>
1a00465e:	4240      	negs	r0, r0
1a004660:	f1ba 0f00 	cmp.w	sl, #0
1a004664:	d0f8      	beq.n	1a004658 <_strtol_l.isra.0+0xca>
1a004666:	b10f      	cbz	r7, 1a00466c <_strtol_l.isra.0+0xde>
1a004668:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
1a00466c:	f8ca 9000 	str.w	r9, [sl]
1a004670:	e7f2      	b.n	1a004658 <_strtol_l.isra.0+0xca>
1a004672:	2430      	movs	r4, #48	; 0x30
1a004674:	2e00      	cmp	r6, #0
1a004676:	d1af      	bne.n	1a0045d8 <_strtol_l.isra.0+0x4a>
1a004678:	2608      	movs	r6, #8
1a00467a:	e7ad      	b.n	1a0045d8 <_strtol_l.isra.0+0x4a>
1a00467c:	2c30      	cmp	r4, #48	; 0x30
1a00467e:	d0a3      	beq.n	1a0045c8 <_strtol_l.isra.0+0x3a>
1a004680:	260a      	movs	r6, #10
1a004682:	e7a9      	b.n	1a0045d8 <_strtol_l.isra.0+0x4a>

1a004684 <strtol>:
1a004684:	4b08      	ldr	r3, [pc, #32]	; (1a0046a8 <strtol+0x24>)
1a004686:	b537      	push	{r0, r1, r2, r4, r5, lr}
1a004688:	681c      	ldr	r4, [r3, #0]
1a00468a:	4d08      	ldr	r5, [pc, #32]	; (1a0046ac <strtol+0x28>)
1a00468c:	6a23      	ldr	r3, [r4, #32]
1a00468e:	2b00      	cmp	r3, #0
1a004690:	bf08      	it	eq
1a004692:	462b      	moveq	r3, r5
1a004694:	9300      	str	r3, [sp, #0]
1a004696:	4613      	mov	r3, r2
1a004698:	460a      	mov	r2, r1
1a00469a:	4601      	mov	r1, r0
1a00469c:	4620      	mov	r0, r4
1a00469e:	f7ff ff76 	bl	1a00458e <_strtol_l.isra.0>
1a0046a2:	b003      	add	sp, #12
1a0046a4:	bd30      	pop	{r4, r5, pc}
1a0046a6:	bf00      	nop
1a0046a8:	10000134 	.word	0x10000134
1a0046ac:	10000198 	.word	0x10000198

1a0046b0 <strupr>:
1a0046b0:	b570      	push	{r4, r5, r6, lr}
1a0046b2:	4606      	mov	r6, r0
1a0046b4:	1e45      	subs	r5, r0, #1
1a0046b6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
1a0046ba:	b90c      	cbnz	r4, 1a0046c0 <strupr+0x10>
1a0046bc:	4630      	mov	r0, r6
1a0046be:	bd70      	pop	{r4, r5, r6, pc}
1a0046c0:	f000 fa4a 	bl	1a004b58 <__locale_ctype_ptr>
1a0046c4:	4420      	add	r0, r4
1a0046c6:	4623      	mov	r3, r4
1a0046c8:	7842      	ldrb	r2, [r0, #1]
1a0046ca:	f002 0203 	and.w	r2, r2, #3
1a0046ce:	2a02      	cmp	r2, #2
1a0046d0:	bf08      	it	eq
1a0046d2:	f1a4 0320 	subeq.w	r3, r4, #32
1a0046d6:	702b      	strb	r3, [r5, #0]
1a0046d8:	e7ed      	b.n	1a0046b6 <strupr+0x6>
1a0046da:	Address 0x000000001a0046da is out of bounds.


1a0046dc <__swbuf_r>:
1a0046dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0046de:	460e      	mov	r6, r1
1a0046e0:	4614      	mov	r4, r2
1a0046e2:	4605      	mov	r5, r0
1a0046e4:	b118      	cbz	r0, 1a0046ee <__swbuf_r+0x12>
1a0046e6:	6983      	ldr	r3, [r0, #24]
1a0046e8:	b90b      	cbnz	r3, 1a0046ee <__swbuf_r+0x12>
1a0046ea:	f000 f9a7 	bl	1a004a3c <__sinit>
1a0046ee:	4b21      	ldr	r3, [pc, #132]	; (1a004774 <__swbuf_r+0x98>)
1a0046f0:	429c      	cmp	r4, r3
1a0046f2:	d12a      	bne.n	1a00474a <__swbuf_r+0x6e>
1a0046f4:	686c      	ldr	r4, [r5, #4]
1a0046f6:	69a3      	ldr	r3, [r4, #24]
1a0046f8:	60a3      	str	r3, [r4, #8]
1a0046fa:	89a3      	ldrh	r3, [r4, #12]
1a0046fc:	071a      	lsls	r2, r3, #28
1a0046fe:	d52e      	bpl.n	1a00475e <__swbuf_r+0x82>
1a004700:	6923      	ldr	r3, [r4, #16]
1a004702:	b363      	cbz	r3, 1a00475e <__swbuf_r+0x82>
1a004704:	6923      	ldr	r3, [r4, #16]
1a004706:	6820      	ldr	r0, [r4, #0]
1a004708:	1ac0      	subs	r0, r0, r3
1a00470a:	6963      	ldr	r3, [r4, #20]
1a00470c:	b2f6      	uxtb	r6, r6
1a00470e:	4283      	cmp	r3, r0
1a004710:	4637      	mov	r7, r6
1a004712:	dc04      	bgt.n	1a00471e <__swbuf_r+0x42>
1a004714:	4621      	mov	r1, r4
1a004716:	4628      	mov	r0, r5
1a004718:	f000 f926 	bl	1a004968 <_fflush_r>
1a00471c:	bb28      	cbnz	r0, 1a00476a <__swbuf_r+0x8e>
1a00471e:	68a3      	ldr	r3, [r4, #8]
1a004720:	3b01      	subs	r3, #1
1a004722:	60a3      	str	r3, [r4, #8]
1a004724:	6823      	ldr	r3, [r4, #0]
1a004726:	1c5a      	adds	r2, r3, #1
1a004728:	6022      	str	r2, [r4, #0]
1a00472a:	701e      	strb	r6, [r3, #0]
1a00472c:	6963      	ldr	r3, [r4, #20]
1a00472e:	3001      	adds	r0, #1
1a004730:	4283      	cmp	r3, r0
1a004732:	d004      	beq.n	1a00473e <__swbuf_r+0x62>
1a004734:	89a3      	ldrh	r3, [r4, #12]
1a004736:	07db      	lsls	r3, r3, #31
1a004738:	d519      	bpl.n	1a00476e <__swbuf_r+0x92>
1a00473a:	2e0a      	cmp	r6, #10
1a00473c:	d117      	bne.n	1a00476e <__swbuf_r+0x92>
1a00473e:	4621      	mov	r1, r4
1a004740:	4628      	mov	r0, r5
1a004742:	f000 f911 	bl	1a004968 <_fflush_r>
1a004746:	b190      	cbz	r0, 1a00476e <__swbuf_r+0x92>
1a004748:	e00f      	b.n	1a00476a <__swbuf_r+0x8e>
1a00474a:	4b0b      	ldr	r3, [pc, #44]	; (1a004778 <__swbuf_r+0x9c>)
1a00474c:	429c      	cmp	r4, r3
1a00474e:	d101      	bne.n	1a004754 <__swbuf_r+0x78>
1a004750:	68ac      	ldr	r4, [r5, #8]
1a004752:	e7d0      	b.n	1a0046f6 <__swbuf_r+0x1a>
1a004754:	4b09      	ldr	r3, [pc, #36]	; (1a00477c <__swbuf_r+0xa0>)
1a004756:	429c      	cmp	r4, r3
1a004758:	bf08      	it	eq
1a00475a:	68ec      	ldreq	r4, [r5, #12]
1a00475c:	e7cb      	b.n	1a0046f6 <__swbuf_r+0x1a>
1a00475e:	4621      	mov	r1, r4
1a004760:	4628      	mov	r0, r5
1a004762:	f000 f80d 	bl	1a004780 <__swsetup_r>
1a004766:	2800      	cmp	r0, #0
1a004768:	d0cc      	beq.n	1a004704 <__swbuf_r+0x28>
1a00476a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a00476e:	4638      	mov	r0, r7
1a004770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004772:	bf00      	nop
1a004774:	1a005d00 	.word	0x1a005d00
1a004778:	1a005d20 	.word	0x1a005d20
1a00477c:	1a005ce0 	.word	0x1a005ce0

1a004780 <__swsetup_r>:
1a004780:	4b32      	ldr	r3, [pc, #200]	; (1a00484c <__swsetup_r+0xcc>)
1a004782:	b570      	push	{r4, r5, r6, lr}
1a004784:	681d      	ldr	r5, [r3, #0]
1a004786:	4606      	mov	r6, r0
1a004788:	460c      	mov	r4, r1
1a00478a:	b125      	cbz	r5, 1a004796 <__swsetup_r+0x16>
1a00478c:	69ab      	ldr	r3, [r5, #24]
1a00478e:	b913      	cbnz	r3, 1a004796 <__swsetup_r+0x16>
1a004790:	4628      	mov	r0, r5
1a004792:	f000 f953 	bl	1a004a3c <__sinit>
1a004796:	4b2e      	ldr	r3, [pc, #184]	; (1a004850 <__swsetup_r+0xd0>)
1a004798:	429c      	cmp	r4, r3
1a00479a:	d10f      	bne.n	1a0047bc <__swsetup_r+0x3c>
1a00479c:	686c      	ldr	r4, [r5, #4]
1a00479e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0047a2:	b29a      	uxth	r2, r3
1a0047a4:	0715      	lsls	r5, r2, #28
1a0047a6:	d42c      	bmi.n	1a004802 <__swsetup_r+0x82>
1a0047a8:	06d0      	lsls	r0, r2, #27
1a0047aa:	d411      	bmi.n	1a0047d0 <__swsetup_r+0x50>
1a0047ac:	2209      	movs	r2, #9
1a0047ae:	6032      	str	r2, [r6, #0]
1a0047b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0047b4:	81a3      	strh	r3, [r4, #12]
1a0047b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0047ba:	e03e      	b.n	1a00483a <__swsetup_r+0xba>
1a0047bc:	4b25      	ldr	r3, [pc, #148]	; (1a004854 <__swsetup_r+0xd4>)
1a0047be:	429c      	cmp	r4, r3
1a0047c0:	d101      	bne.n	1a0047c6 <__swsetup_r+0x46>
1a0047c2:	68ac      	ldr	r4, [r5, #8]
1a0047c4:	e7eb      	b.n	1a00479e <__swsetup_r+0x1e>
1a0047c6:	4b24      	ldr	r3, [pc, #144]	; (1a004858 <__swsetup_r+0xd8>)
1a0047c8:	429c      	cmp	r4, r3
1a0047ca:	bf08      	it	eq
1a0047cc:	68ec      	ldreq	r4, [r5, #12]
1a0047ce:	e7e6      	b.n	1a00479e <__swsetup_r+0x1e>
1a0047d0:	0751      	lsls	r1, r2, #29
1a0047d2:	d512      	bpl.n	1a0047fa <__swsetup_r+0x7a>
1a0047d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0047d6:	b141      	cbz	r1, 1a0047ea <__swsetup_r+0x6a>
1a0047d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0047dc:	4299      	cmp	r1, r3
1a0047de:	d002      	beq.n	1a0047e6 <__swsetup_r+0x66>
1a0047e0:	4630      	mov	r0, r6
1a0047e2:	f000 fa3d 	bl	1a004c60 <_free_r>
1a0047e6:	2300      	movs	r3, #0
1a0047e8:	6363      	str	r3, [r4, #52]	; 0x34
1a0047ea:	89a3      	ldrh	r3, [r4, #12]
1a0047ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a0047f0:	81a3      	strh	r3, [r4, #12]
1a0047f2:	2300      	movs	r3, #0
1a0047f4:	6063      	str	r3, [r4, #4]
1a0047f6:	6923      	ldr	r3, [r4, #16]
1a0047f8:	6023      	str	r3, [r4, #0]
1a0047fa:	89a3      	ldrh	r3, [r4, #12]
1a0047fc:	f043 0308 	orr.w	r3, r3, #8
1a004800:	81a3      	strh	r3, [r4, #12]
1a004802:	6923      	ldr	r3, [r4, #16]
1a004804:	b94b      	cbnz	r3, 1a00481a <__swsetup_r+0x9a>
1a004806:	89a3      	ldrh	r3, [r4, #12]
1a004808:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a00480c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a004810:	d003      	beq.n	1a00481a <__swsetup_r+0x9a>
1a004812:	4621      	mov	r1, r4
1a004814:	4630      	mov	r0, r6
1a004816:	f000 f9d1 	bl	1a004bbc <__smakebuf_r>
1a00481a:	89a2      	ldrh	r2, [r4, #12]
1a00481c:	f012 0301 	ands.w	r3, r2, #1
1a004820:	d00c      	beq.n	1a00483c <__swsetup_r+0xbc>
1a004822:	2300      	movs	r3, #0
1a004824:	60a3      	str	r3, [r4, #8]
1a004826:	6963      	ldr	r3, [r4, #20]
1a004828:	425b      	negs	r3, r3
1a00482a:	61a3      	str	r3, [r4, #24]
1a00482c:	6923      	ldr	r3, [r4, #16]
1a00482e:	b953      	cbnz	r3, 1a004846 <__swsetup_r+0xc6>
1a004830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004834:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a004838:	d1ba      	bne.n	1a0047b0 <__swsetup_r+0x30>
1a00483a:	bd70      	pop	{r4, r5, r6, pc}
1a00483c:	0792      	lsls	r2, r2, #30
1a00483e:	bf58      	it	pl
1a004840:	6963      	ldrpl	r3, [r4, #20]
1a004842:	60a3      	str	r3, [r4, #8]
1a004844:	e7f2      	b.n	1a00482c <__swsetup_r+0xac>
1a004846:	2000      	movs	r0, #0
1a004848:	e7f7      	b.n	1a00483a <__swsetup_r+0xba>
1a00484a:	bf00      	nop
1a00484c:	10000134 	.word	0x10000134
1a004850:	1a005d00 	.word	0x1a005d00
1a004854:	1a005d20 	.word	0x1a005d20
1a004858:	1a005ce0 	.word	0x1a005ce0

1a00485c <__sflush_r>:
1a00485c:	898a      	ldrh	r2, [r1, #12]
1a00485e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004862:	4605      	mov	r5, r0
1a004864:	0710      	lsls	r0, r2, #28
1a004866:	460c      	mov	r4, r1
1a004868:	d458      	bmi.n	1a00491c <__sflush_r+0xc0>
1a00486a:	684b      	ldr	r3, [r1, #4]
1a00486c:	2b00      	cmp	r3, #0
1a00486e:	dc05      	bgt.n	1a00487c <__sflush_r+0x20>
1a004870:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a004872:	2b00      	cmp	r3, #0
1a004874:	dc02      	bgt.n	1a00487c <__sflush_r+0x20>
1a004876:	2000      	movs	r0, #0
1a004878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00487c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a00487e:	2e00      	cmp	r6, #0
1a004880:	d0f9      	beq.n	1a004876 <__sflush_r+0x1a>
1a004882:	2300      	movs	r3, #0
1a004884:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a004888:	682f      	ldr	r7, [r5, #0]
1a00488a:	6a21      	ldr	r1, [r4, #32]
1a00488c:	602b      	str	r3, [r5, #0]
1a00488e:	d032      	beq.n	1a0048f6 <__sflush_r+0x9a>
1a004890:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a004892:	89a3      	ldrh	r3, [r4, #12]
1a004894:	075a      	lsls	r2, r3, #29
1a004896:	d505      	bpl.n	1a0048a4 <__sflush_r+0x48>
1a004898:	6863      	ldr	r3, [r4, #4]
1a00489a:	1ac0      	subs	r0, r0, r3
1a00489c:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a00489e:	b10b      	cbz	r3, 1a0048a4 <__sflush_r+0x48>
1a0048a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0048a2:	1ac0      	subs	r0, r0, r3
1a0048a4:	2300      	movs	r3, #0
1a0048a6:	4602      	mov	r2, r0
1a0048a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0048aa:	6a21      	ldr	r1, [r4, #32]
1a0048ac:	4628      	mov	r0, r5
1a0048ae:	47b0      	blx	r6
1a0048b0:	1c43      	adds	r3, r0, #1
1a0048b2:	89a3      	ldrh	r3, [r4, #12]
1a0048b4:	d106      	bne.n	1a0048c4 <__sflush_r+0x68>
1a0048b6:	6829      	ldr	r1, [r5, #0]
1a0048b8:	291d      	cmp	r1, #29
1a0048ba:	d848      	bhi.n	1a00494e <__sflush_r+0xf2>
1a0048bc:	4a29      	ldr	r2, [pc, #164]	; (1a004964 <__sflush_r+0x108>)
1a0048be:	40ca      	lsrs	r2, r1
1a0048c0:	07d6      	lsls	r6, r2, #31
1a0048c2:	d544      	bpl.n	1a00494e <__sflush_r+0xf2>
1a0048c4:	2200      	movs	r2, #0
1a0048c6:	6062      	str	r2, [r4, #4]
1a0048c8:	04d9      	lsls	r1, r3, #19
1a0048ca:	6922      	ldr	r2, [r4, #16]
1a0048cc:	6022      	str	r2, [r4, #0]
1a0048ce:	d504      	bpl.n	1a0048da <__sflush_r+0x7e>
1a0048d0:	1c42      	adds	r2, r0, #1
1a0048d2:	d101      	bne.n	1a0048d8 <__sflush_r+0x7c>
1a0048d4:	682b      	ldr	r3, [r5, #0]
1a0048d6:	b903      	cbnz	r3, 1a0048da <__sflush_r+0x7e>
1a0048d8:	6560      	str	r0, [r4, #84]	; 0x54
1a0048da:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0048dc:	602f      	str	r7, [r5, #0]
1a0048de:	2900      	cmp	r1, #0
1a0048e0:	d0c9      	beq.n	1a004876 <__sflush_r+0x1a>
1a0048e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0048e6:	4299      	cmp	r1, r3
1a0048e8:	d002      	beq.n	1a0048f0 <__sflush_r+0x94>
1a0048ea:	4628      	mov	r0, r5
1a0048ec:	f000 f9b8 	bl	1a004c60 <_free_r>
1a0048f0:	2000      	movs	r0, #0
1a0048f2:	6360      	str	r0, [r4, #52]	; 0x34
1a0048f4:	e7c0      	b.n	1a004878 <__sflush_r+0x1c>
1a0048f6:	2301      	movs	r3, #1
1a0048f8:	4628      	mov	r0, r5
1a0048fa:	47b0      	blx	r6
1a0048fc:	1c41      	adds	r1, r0, #1
1a0048fe:	d1c8      	bne.n	1a004892 <__sflush_r+0x36>
1a004900:	682b      	ldr	r3, [r5, #0]
1a004902:	2b00      	cmp	r3, #0
1a004904:	d0c5      	beq.n	1a004892 <__sflush_r+0x36>
1a004906:	2b1d      	cmp	r3, #29
1a004908:	d001      	beq.n	1a00490e <__sflush_r+0xb2>
1a00490a:	2b16      	cmp	r3, #22
1a00490c:	d101      	bne.n	1a004912 <__sflush_r+0xb6>
1a00490e:	602f      	str	r7, [r5, #0]
1a004910:	e7b1      	b.n	1a004876 <__sflush_r+0x1a>
1a004912:	89a3      	ldrh	r3, [r4, #12]
1a004914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004918:	81a3      	strh	r3, [r4, #12]
1a00491a:	e7ad      	b.n	1a004878 <__sflush_r+0x1c>
1a00491c:	690f      	ldr	r7, [r1, #16]
1a00491e:	2f00      	cmp	r7, #0
1a004920:	d0a9      	beq.n	1a004876 <__sflush_r+0x1a>
1a004922:	0793      	lsls	r3, r2, #30
1a004924:	680e      	ldr	r6, [r1, #0]
1a004926:	bf08      	it	eq
1a004928:	694b      	ldreq	r3, [r1, #20]
1a00492a:	600f      	str	r7, [r1, #0]
1a00492c:	bf18      	it	ne
1a00492e:	2300      	movne	r3, #0
1a004930:	eba6 0807 	sub.w	r8, r6, r7
1a004934:	608b      	str	r3, [r1, #8]
1a004936:	f1b8 0f00 	cmp.w	r8, #0
1a00493a:	dd9c      	ble.n	1a004876 <__sflush_r+0x1a>
1a00493c:	4643      	mov	r3, r8
1a00493e:	463a      	mov	r2, r7
1a004940:	6a21      	ldr	r1, [r4, #32]
1a004942:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a004944:	4628      	mov	r0, r5
1a004946:	47b0      	blx	r6
1a004948:	2800      	cmp	r0, #0
1a00494a:	dc06      	bgt.n	1a00495a <__sflush_r+0xfe>
1a00494c:	89a3      	ldrh	r3, [r4, #12]
1a00494e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004952:	81a3      	strh	r3, [r4, #12]
1a004954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004958:	e78e      	b.n	1a004878 <__sflush_r+0x1c>
1a00495a:	4407      	add	r7, r0
1a00495c:	eba8 0800 	sub.w	r8, r8, r0
1a004960:	e7e9      	b.n	1a004936 <__sflush_r+0xda>
1a004962:	bf00      	nop
1a004964:	20400001 	.word	0x20400001

1a004968 <_fflush_r>:
1a004968:	b538      	push	{r3, r4, r5, lr}
1a00496a:	690b      	ldr	r3, [r1, #16]
1a00496c:	4605      	mov	r5, r0
1a00496e:	460c      	mov	r4, r1
1a004970:	b1db      	cbz	r3, 1a0049aa <_fflush_r+0x42>
1a004972:	b118      	cbz	r0, 1a00497c <_fflush_r+0x14>
1a004974:	6983      	ldr	r3, [r0, #24]
1a004976:	b90b      	cbnz	r3, 1a00497c <_fflush_r+0x14>
1a004978:	f000 f860 	bl	1a004a3c <__sinit>
1a00497c:	4b0c      	ldr	r3, [pc, #48]	; (1a0049b0 <_fflush_r+0x48>)
1a00497e:	429c      	cmp	r4, r3
1a004980:	d109      	bne.n	1a004996 <_fflush_r+0x2e>
1a004982:	686c      	ldr	r4, [r5, #4]
1a004984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004988:	b17b      	cbz	r3, 1a0049aa <_fflush_r+0x42>
1a00498a:	4621      	mov	r1, r4
1a00498c:	4628      	mov	r0, r5
1a00498e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a004992:	f7ff bf63 	b.w	1a00485c <__sflush_r>
1a004996:	4b07      	ldr	r3, [pc, #28]	; (1a0049b4 <_fflush_r+0x4c>)
1a004998:	429c      	cmp	r4, r3
1a00499a:	d101      	bne.n	1a0049a0 <_fflush_r+0x38>
1a00499c:	68ac      	ldr	r4, [r5, #8]
1a00499e:	e7f1      	b.n	1a004984 <_fflush_r+0x1c>
1a0049a0:	4b05      	ldr	r3, [pc, #20]	; (1a0049b8 <_fflush_r+0x50>)
1a0049a2:	429c      	cmp	r4, r3
1a0049a4:	bf08      	it	eq
1a0049a6:	68ec      	ldreq	r4, [r5, #12]
1a0049a8:	e7ec      	b.n	1a004984 <_fflush_r+0x1c>
1a0049aa:	2000      	movs	r0, #0
1a0049ac:	bd38      	pop	{r3, r4, r5, pc}
1a0049ae:	bf00      	nop
1a0049b0:	1a005d00 	.word	0x1a005d00
1a0049b4:	1a005d20 	.word	0x1a005d20
1a0049b8:	1a005ce0 	.word	0x1a005ce0

1a0049bc <std>:
1a0049bc:	2300      	movs	r3, #0
1a0049be:	b510      	push	{r4, lr}
1a0049c0:	4604      	mov	r4, r0
1a0049c2:	e9c0 3300 	strd	r3, r3, [r0]
1a0049c6:	6083      	str	r3, [r0, #8]
1a0049c8:	8181      	strh	r1, [r0, #12]
1a0049ca:	6643      	str	r3, [r0, #100]	; 0x64
1a0049cc:	81c2      	strh	r2, [r0, #14]
1a0049ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0049d2:	6183      	str	r3, [r0, #24]
1a0049d4:	4619      	mov	r1, r3
1a0049d6:	2208      	movs	r2, #8
1a0049d8:	305c      	adds	r0, #92	; 0x5c
1a0049da:	f7ff fd8c 	bl	1a0044f6 <memset>
1a0049de:	4b05      	ldr	r3, [pc, #20]	; (1a0049f4 <std+0x38>)
1a0049e0:	6263      	str	r3, [r4, #36]	; 0x24
1a0049e2:	4b05      	ldr	r3, [pc, #20]	; (1a0049f8 <std+0x3c>)
1a0049e4:	62a3      	str	r3, [r4, #40]	; 0x28
1a0049e6:	4b05      	ldr	r3, [pc, #20]	; (1a0049fc <std+0x40>)
1a0049e8:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0049ea:	4b05      	ldr	r3, [pc, #20]	; (1a004a00 <std+0x44>)
1a0049ec:	6224      	str	r4, [r4, #32]
1a0049ee:	6323      	str	r3, [r4, #48]	; 0x30
1a0049f0:	bd10      	pop	{r4, pc}
1a0049f2:	bf00      	nop
1a0049f4:	1a005341 	.word	0x1a005341
1a0049f8:	1a005363 	.word	0x1a005363
1a0049fc:	1a00539b 	.word	0x1a00539b
1a004a00:	1a0053bf 	.word	0x1a0053bf

1a004a04 <_cleanup_r>:
1a004a04:	4901      	ldr	r1, [pc, #4]	; (1a004a0c <_cleanup_r+0x8>)
1a004a06:	f000 b885 	b.w	1a004b14 <_fwalk_reent>
1a004a0a:	bf00      	nop
1a004a0c:	1a004969 	.word	0x1a004969

1a004a10 <__sfmoreglue>:
1a004a10:	b570      	push	{r4, r5, r6, lr}
1a004a12:	1e4a      	subs	r2, r1, #1
1a004a14:	2568      	movs	r5, #104	; 0x68
1a004a16:	4355      	muls	r5, r2
1a004a18:	460e      	mov	r6, r1
1a004a1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a004a1e:	f000 f96d 	bl	1a004cfc <_malloc_r>
1a004a22:	4604      	mov	r4, r0
1a004a24:	b140      	cbz	r0, 1a004a38 <__sfmoreglue+0x28>
1a004a26:	2100      	movs	r1, #0
1a004a28:	e9c0 1600 	strd	r1, r6, [r0]
1a004a2c:	300c      	adds	r0, #12
1a004a2e:	60a0      	str	r0, [r4, #8]
1a004a30:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a004a34:	f7ff fd5f 	bl	1a0044f6 <memset>
1a004a38:	4620      	mov	r0, r4
1a004a3a:	bd70      	pop	{r4, r5, r6, pc}

1a004a3c <__sinit>:
1a004a3c:	6983      	ldr	r3, [r0, #24]
1a004a3e:	b510      	push	{r4, lr}
1a004a40:	4604      	mov	r4, r0
1a004a42:	bb33      	cbnz	r3, 1a004a92 <__sinit+0x56>
1a004a44:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a004a48:	6503      	str	r3, [r0, #80]	; 0x50
1a004a4a:	4b12      	ldr	r3, [pc, #72]	; (1a004a94 <__sinit+0x58>)
1a004a4c:	4a12      	ldr	r2, [pc, #72]	; (1a004a98 <__sinit+0x5c>)
1a004a4e:	681b      	ldr	r3, [r3, #0]
1a004a50:	6282      	str	r2, [r0, #40]	; 0x28
1a004a52:	4298      	cmp	r0, r3
1a004a54:	bf04      	itt	eq
1a004a56:	2301      	moveq	r3, #1
1a004a58:	6183      	streq	r3, [r0, #24]
1a004a5a:	f000 f81f 	bl	1a004a9c <__sfp>
1a004a5e:	6060      	str	r0, [r4, #4]
1a004a60:	4620      	mov	r0, r4
1a004a62:	f000 f81b 	bl	1a004a9c <__sfp>
1a004a66:	60a0      	str	r0, [r4, #8]
1a004a68:	4620      	mov	r0, r4
1a004a6a:	f000 f817 	bl	1a004a9c <__sfp>
1a004a6e:	2200      	movs	r2, #0
1a004a70:	60e0      	str	r0, [r4, #12]
1a004a72:	2104      	movs	r1, #4
1a004a74:	6860      	ldr	r0, [r4, #4]
1a004a76:	f7ff ffa1 	bl	1a0049bc <std>
1a004a7a:	2201      	movs	r2, #1
1a004a7c:	2109      	movs	r1, #9
1a004a7e:	68a0      	ldr	r0, [r4, #8]
1a004a80:	f7ff ff9c 	bl	1a0049bc <std>
1a004a84:	2202      	movs	r2, #2
1a004a86:	2112      	movs	r1, #18
1a004a88:	68e0      	ldr	r0, [r4, #12]
1a004a8a:	f7ff ff97 	bl	1a0049bc <std>
1a004a8e:	2301      	movs	r3, #1
1a004a90:	61a3      	str	r3, [r4, #24]
1a004a92:	bd10      	pop	{r4, pc}
1a004a94:	1a005d40 	.word	0x1a005d40
1a004a98:	1a004a05 	.word	0x1a004a05

1a004a9c <__sfp>:
1a004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004a9e:	4b1b      	ldr	r3, [pc, #108]	; (1a004b0c <__sfp+0x70>)
1a004aa0:	681e      	ldr	r6, [r3, #0]
1a004aa2:	69b3      	ldr	r3, [r6, #24]
1a004aa4:	4607      	mov	r7, r0
1a004aa6:	b913      	cbnz	r3, 1a004aae <__sfp+0x12>
1a004aa8:	4630      	mov	r0, r6
1a004aaa:	f7ff ffc7 	bl	1a004a3c <__sinit>
1a004aae:	3648      	adds	r6, #72	; 0x48
1a004ab0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a004ab4:	3b01      	subs	r3, #1
1a004ab6:	d503      	bpl.n	1a004ac0 <__sfp+0x24>
1a004ab8:	6833      	ldr	r3, [r6, #0]
1a004aba:	b133      	cbz	r3, 1a004aca <__sfp+0x2e>
1a004abc:	6836      	ldr	r6, [r6, #0]
1a004abe:	e7f7      	b.n	1a004ab0 <__sfp+0x14>
1a004ac0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a004ac4:	b16d      	cbz	r5, 1a004ae2 <__sfp+0x46>
1a004ac6:	3468      	adds	r4, #104	; 0x68
1a004ac8:	e7f4      	b.n	1a004ab4 <__sfp+0x18>
1a004aca:	2104      	movs	r1, #4
1a004acc:	4638      	mov	r0, r7
1a004ace:	f7ff ff9f 	bl	1a004a10 <__sfmoreglue>
1a004ad2:	6030      	str	r0, [r6, #0]
1a004ad4:	2800      	cmp	r0, #0
1a004ad6:	d1f1      	bne.n	1a004abc <__sfp+0x20>
1a004ad8:	230c      	movs	r3, #12
1a004ada:	603b      	str	r3, [r7, #0]
1a004adc:	4604      	mov	r4, r0
1a004ade:	4620      	mov	r0, r4
1a004ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004ae2:	4b0b      	ldr	r3, [pc, #44]	; (1a004b10 <__sfp+0x74>)
1a004ae4:	6665      	str	r5, [r4, #100]	; 0x64
1a004ae6:	e9c4 5500 	strd	r5, r5, [r4]
1a004aea:	60a5      	str	r5, [r4, #8]
1a004aec:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a004af0:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a004af4:	2208      	movs	r2, #8
1a004af6:	4629      	mov	r1, r5
1a004af8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a004afc:	f7ff fcfb 	bl	1a0044f6 <memset>
1a004b00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a004b04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a004b08:	e7e9      	b.n	1a004ade <__sfp+0x42>
1a004b0a:	bf00      	nop
1a004b0c:	1a005d40 	.word	0x1a005d40
1a004b10:	ffff0001 	.word	0xffff0001

1a004b14 <_fwalk_reent>:
1a004b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004b18:	4680      	mov	r8, r0
1a004b1a:	4689      	mov	r9, r1
1a004b1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a004b20:	2600      	movs	r6, #0
1a004b22:	b914      	cbnz	r4, 1a004b2a <_fwalk_reent+0x16>
1a004b24:	4630      	mov	r0, r6
1a004b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004b2a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a004b2e:	3f01      	subs	r7, #1
1a004b30:	d501      	bpl.n	1a004b36 <_fwalk_reent+0x22>
1a004b32:	6824      	ldr	r4, [r4, #0]
1a004b34:	e7f5      	b.n	1a004b22 <_fwalk_reent+0xe>
1a004b36:	89ab      	ldrh	r3, [r5, #12]
1a004b38:	2b01      	cmp	r3, #1
1a004b3a:	d907      	bls.n	1a004b4c <_fwalk_reent+0x38>
1a004b3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a004b40:	3301      	adds	r3, #1
1a004b42:	d003      	beq.n	1a004b4c <_fwalk_reent+0x38>
1a004b44:	4629      	mov	r1, r5
1a004b46:	4640      	mov	r0, r8
1a004b48:	47c8      	blx	r9
1a004b4a:	4306      	orrs	r6, r0
1a004b4c:	3568      	adds	r5, #104	; 0x68
1a004b4e:	e7ee      	b.n	1a004b2e <_fwalk_reent+0x1a>

1a004b50 <__locale_ctype_ptr_l>:
1a004b50:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
1a004b54:	4770      	bx	lr
1a004b56:	Address 0x000000001a004b56 is out of bounds.


1a004b58 <__locale_ctype_ptr>:
1a004b58:	4b04      	ldr	r3, [pc, #16]	; (1a004b6c <__locale_ctype_ptr+0x14>)
1a004b5a:	4a05      	ldr	r2, [pc, #20]	; (1a004b70 <__locale_ctype_ptr+0x18>)
1a004b5c:	681b      	ldr	r3, [r3, #0]
1a004b5e:	6a1b      	ldr	r3, [r3, #32]
1a004b60:	2b00      	cmp	r3, #0
1a004b62:	bf08      	it	eq
1a004b64:	4613      	moveq	r3, r2
1a004b66:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
1a004b6a:	4770      	bx	lr
1a004b6c:	10000134 	.word	0x10000134
1a004b70:	10000198 	.word	0x10000198

1a004b74 <__swhatbuf_r>:
1a004b74:	b570      	push	{r4, r5, r6, lr}
1a004b76:	460e      	mov	r6, r1
1a004b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004b7c:	2900      	cmp	r1, #0
1a004b7e:	b096      	sub	sp, #88	; 0x58
1a004b80:	4614      	mov	r4, r2
1a004b82:	461d      	mov	r5, r3
1a004b84:	da07      	bge.n	1a004b96 <__swhatbuf_r+0x22>
1a004b86:	2300      	movs	r3, #0
1a004b88:	602b      	str	r3, [r5, #0]
1a004b8a:	89b3      	ldrh	r3, [r6, #12]
1a004b8c:	061a      	lsls	r2, r3, #24
1a004b8e:	d410      	bmi.n	1a004bb2 <__swhatbuf_r+0x3e>
1a004b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a004b94:	e00e      	b.n	1a004bb4 <__swhatbuf_r+0x40>
1a004b96:	466a      	mov	r2, sp
1a004b98:	f7fc f831 	bl	1a000bfe <_fstat_r>
1a004b9c:	2800      	cmp	r0, #0
1a004b9e:	dbf2      	blt.n	1a004b86 <__swhatbuf_r+0x12>
1a004ba0:	9a01      	ldr	r2, [sp, #4]
1a004ba2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a004ba6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a004baa:	425a      	negs	r2, r3
1a004bac:	415a      	adcs	r2, r3
1a004bae:	602a      	str	r2, [r5, #0]
1a004bb0:	e7ee      	b.n	1a004b90 <__swhatbuf_r+0x1c>
1a004bb2:	2340      	movs	r3, #64	; 0x40
1a004bb4:	2000      	movs	r0, #0
1a004bb6:	6023      	str	r3, [r4, #0]
1a004bb8:	b016      	add	sp, #88	; 0x58
1a004bba:	bd70      	pop	{r4, r5, r6, pc}

1a004bbc <__smakebuf_r>:
1a004bbc:	898b      	ldrh	r3, [r1, #12]
1a004bbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a004bc0:	079d      	lsls	r5, r3, #30
1a004bc2:	4606      	mov	r6, r0
1a004bc4:	460c      	mov	r4, r1
1a004bc6:	d507      	bpl.n	1a004bd8 <__smakebuf_r+0x1c>
1a004bc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a004bcc:	6023      	str	r3, [r4, #0]
1a004bce:	6123      	str	r3, [r4, #16]
1a004bd0:	2301      	movs	r3, #1
1a004bd2:	6163      	str	r3, [r4, #20]
1a004bd4:	b002      	add	sp, #8
1a004bd6:	bd70      	pop	{r4, r5, r6, pc}
1a004bd8:	ab01      	add	r3, sp, #4
1a004bda:	466a      	mov	r2, sp
1a004bdc:	f7ff ffca 	bl	1a004b74 <__swhatbuf_r>
1a004be0:	9900      	ldr	r1, [sp, #0]
1a004be2:	4605      	mov	r5, r0
1a004be4:	4630      	mov	r0, r6
1a004be6:	f000 f889 	bl	1a004cfc <_malloc_r>
1a004bea:	b948      	cbnz	r0, 1a004c00 <__smakebuf_r+0x44>
1a004bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004bf0:	059a      	lsls	r2, r3, #22
1a004bf2:	d4ef      	bmi.n	1a004bd4 <__smakebuf_r+0x18>
1a004bf4:	f023 0303 	bic.w	r3, r3, #3
1a004bf8:	f043 0302 	orr.w	r3, r3, #2
1a004bfc:	81a3      	strh	r3, [r4, #12]
1a004bfe:	e7e3      	b.n	1a004bc8 <__smakebuf_r+0xc>
1a004c00:	4b0d      	ldr	r3, [pc, #52]	; (1a004c38 <__smakebuf_r+0x7c>)
1a004c02:	62b3      	str	r3, [r6, #40]	; 0x28
1a004c04:	89a3      	ldrh	r3, [r4, #12]
1a004c06:	6020      	str	r0, [r4, #0]
1a004c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004c0c:	81a3      	strh	r3, [r4, #12]
1a004c0e:	9b00      	ldr	r3, [sp, #0]
1a004c10:	6163      	str	r3, [r4, #20]
1a004c12:	9b01      	ldr	r3, [sp, #4]
1a004c14:	6120      	str	r0, [r4, #16]
1a004c16:	b15b      	cbz	r3, 1a004c30 <__smakebuf_r+0x74>
1a004c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004c1c:	4630      	mov	r0, r6
1a004c1e:	f7fb fff3 	bl	1a000c08 <_isatty_r>
1a004c22:	b128      	cbz	r0, 1a004c30 <__smakebuf_r+0x74>
1a004c24:	89a3      	ldrh	r3, [r4, #12]
1a004c26:	f023 0303 	bic.w	r3, r3, #3
1a004c2a:	f043 0301 	orr.w	r3, r3, #1
1a004c2e:	81a3      	strh	r3, [r4, #12]
1a004c30:	89a3      	ldrh	r3, [r4, #12]
1a004c32:	431d      	orrs	r5, r3
1a004c34:	81a5      	strh	r5, [r4, #12]
1a004c36:	e7cd      	b.n	1a004bd4 <__smakebuf_r+0x18>
1a004c38:	1a004a05 	.word	0x1a004a05

1a004c3c <__ascii_mbtowc>:
1a004c3c:	b082      	sub	sp, #8
1a004c3e:	b901      	cbnz	r1, 1a004c42 <__ascii_mbtowc+0x6>
1a004c40:	a901      	add	r1, sp, #4
1a004c42:	b142      	cbz	r2, 1a004c56 <__ascii_mbtowc+0x1a>
1a004c44:	b14b      	cbz	r3, 1a004c5a <__ascii_mbtowc+0x1e>
1a004c46:	7813      	ldrb	r3, [r2, #0]
1a004c48:	600b      	str	r3, [r1, #0]
1a004c4a:	7812      	ldrb	r2, [r2, #0]
1a004c4c:	1c10      	adds	r0, r2, #0
1a004c4e:	bf18      	it	ne
1a004c50:	2001      	movne	r0, #1
1a004c52:	b002      	add	sp, #8
1a004c54:	4770      	bx	lr
1a004c56:	4610      	mov	r0, r2
1a004c58:	e7fb      	b.n	1a004c52 <__ascii_mbtowc+0x16>
1a004c5a:	f06f 0001 	mvn.w	r0, #1
1a004c5e:	e7f8      	b.n	1a004c52 <__ascii_mbtowc+0x16>

1a004c60 <_free_r>:
1a004c60:	b538      	push	{r3, r4, r5, lr}
1a004c62:	4605      	mov	r5, r0
1a004c64:	2900      	cmp	r1, #0
1a004c66:	d045      	beq.n	1a004cf4 <_free_r+0x94>
1a004c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a004c6c:	1f0c      	subs	r4, r1, #4
1a004c6e:	2b00      	cmp	r3, #0
1a004c70:	bfb8      	it	lt
1a004c72:	18e4      	addlt	r4, r4, r3
1a004c74:	f000 fc04 	bl	1a005480 <__malloc_lock>
1a004c78:	4a1f      	ldr	r2, [pc, #124]	; (1a004cf8 <_free_r+0x98>)
1a004c7a:	6813      	ldr	r3, [r2, #0]
1a004c7c:	4610      	mov	r0, r2
1a004c7e:	b933      	cbnz	r3, 1a004c8e <_free_r+0x2e>
1a004c80:	6063      	str	r3, [r4, #4]
1a004c82:	6014      	str	r4, [r2, #0]
1a004c84:	4628      	mov	r0, r5
1a004c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a004c8a:	f000 bbfa 	b.w	1a005482 <__malloc_unlock>
1a004c8e:	42a3      	cmp	r3, r4
1a004c90:	d90c      	bls.n	1a004cac <_free_r+0x4c>
1a004c92:	6821      	ldr	r1, [r4, #0]
1a004c94:	1862      	adds	r2, r4, r1
1a004c96:	4293      	cmp	r3, r2
1a004c98:	bf04      	itt	eq
1a004c9a:	681a      	ldreq	r2, [r3, #0]
1a004c9c:	685b      	ldreq	r3, [r3, #4]
1a004c9e:	6063      	str	r3, [r4, #4]
1a004ca0:	bf04      	itt	eq
1a004ca2:	1852      	addeq	r2, r2, r1
1a004ca4:	6022      	streq	r2, [r4, #0]
1a004ca6:	6004      	str	r4, [r0, #0]
1a004ca8:	e7ec      	b.n	1a004c84 <_free_r+0x24>
1a004caa:	4613      	mov	r3, r2
1a004cac:	685a      	ldr	r2, [r3, #4]
1a004cae:	b10a      	cbz	r2, 1a004cb4 <_free_r+0x54>
1a004cb0:	42a2      	cmp	r2, r4
1a004cb2:	d9fa      	bls.n	1a004caa <_free_r+0x4a>
1a004cb4:	6819      	ldr	r1, [r3, #0]
1a004cb6:	1858      	adds	r0, r3, r1
1a004cb8:	42a0      	cmp	r0, r4
1a004cba:	d10b      	bne.n	1a004cd4 <_free_r+0x74>
1a004cbc:	6820      	ldr	r0, [r4, #0]
1a004cbe:	4401      	add	r1, r0
1a004cc0:	1858      	adds	r0, r3, r1
1a004cc2:	4282      	cmp	r2, r0
1a004cc4:	6019      	str	r1, [r3, #0]
1a004cc6:	d1dd      	bne.n	1a004c84 <_free_r+0x24>
1a004cc8:	6810      	ldr	r0, [r2, #0]
1a004cca:	6852      	ldr	r2, [r2, #4]
1a004ccc:	605a      	str	r2, [r3, #4]
1a004cce:	4401      	add	r1, r0
1a004cd0:	6019      	str	r1, [r3, #0]
1a004cd2:	e7d7      	b.n	1a004c84 <_free_r+0x24>
1a004cd4:	d902      	bls.n	1a004cdc <_free_r+0x7c>
1a004cd6:	230c      	movs	r3, #12
1a004cd8:	602b      	str	r3, [r5, #0]
1a004cda:	e7d3      	b.n	1a004c84 <_free_r+0x24>
1a004cdc:	6820      	ldr	r0, [r4, #0]
1a004cde:	1821      	adds	r1, r4, r0
1a004ce0:	428a      	cmp	r2, r1
1a004ce2:	bf04      	itt	eq
1a004ce4:	6811      	ldreq	r1, [r2, #0]
1a004ce6:	6852      	ldreq	r2, [r2, #4]
1a004ce8:	6062      	str	r2, [r4, #4]
1a004cea:	bf04      	itt	eq
1a004cec:	1809      	addeq	r1, r1, r0
1a004cee:	6021      	streq	r1, [r4, #0]
1a004cf0:	605c      	str	r4, [r3, #4]
1a004cf2:	e7c7      	b.n	1a004c84 <_free_r+0x24>
1a004cf4:	bd38      	pop	{r3, r4, r5, pc}
1a004cf6:	bf00      	nop
1a004cf8:	10003b60 	.word	0x10003b60

1a004cfc <_malloc_r>:
1a004cfc:	b570      	push	{r4, r5, r6, lr}
1a004cfe:	1ccd      	adds	r5, r1, #3
1a004d00:	f025 0503 	bic.w	r5, r5, #3
1a004d04:	3508      	adds	r5, #8
1a004d06:	2d0c      	cmp	r5, #12
1a004d08:	bf38      	it	cc
1a004d0a:	250c      	movcc	r5, #12
1a004d0c:	2d00      	cmp	r5, #0
1a004d0e:	4606      	mov	r6, r0
1a004d10:	db01      	blt.n	1a004d16 <_malloc_r+0x1a>
1a004d12:	42a9      	cmp	r1, r5
1a004d14:	d903      	bls.n	1a004d1e <_malloc_r+0x22>
1a004d16:	230c      	movs	r3, #12
1a004d18:	6033      	str	r3, [r6, #0]
1a004d1a:	2000      	movs	r0, #0
1a004d1c:	bd70      	pop	{r4, r5, r6, pc}
1a004d1e:	f000 fbaf 	bl	1a005480 <__malloc_lock>
1a004d22:	4a21      	ldr	r2, [pc, #132]	; (1a004da8 <_malloc_r+0xac>)
1a004d24:	6814      	ldr	r4, [r2, #0]
1a004d26:	4621      	mov	r1, r4
1a004d28:	b991      	cbnz	r1, 1a004d50 <_malloc_r+0x54>
1a004d2a:	4c20      	ldr	r4, [pc, #128]	; (1a004dac <_malloc_r+0xb0>)
1a004d2c:	6823      	ldr	r3, [r4, #0]
1a004d2e:	b91b      	cbnz	r3, 1a004d38 <_malloc_r+0x3c>
1a004d30:	4630      	mov	r0, r6
1a004d32:	f7fb ffb3 	bl	1a000c9c <_sbrk_r>
1a004d36:	6020      	str	r0, [r4, #0]
1a004d38:	4629      	mov	r1, r5
1a004d3a:	4630      	mov	r0, r6
1a004d3c:	f7fb ffae 	bl	1a000c9c <_sbrk_r>
1a004d40:	1c43      	adds	r3, r0, #1
1a004d42:	d124      	bne.n	1a004d8e <_malloc_r+0x92>
1a004d44:	230c      	movs	r3, #12
1a004d46:	6033      	str	r3, [r6, #0]
1a004d48:	4630      	mov	r0, r6
1a004d4a:	f000 fb9a 	bl	1a005482 <__malloc_unlock>
1a004d4e:	e7e4      	b.n	1a004d1a <_malloc_r+0x1e>
1a004d50:	680b      	ldr	r3, [r1, #0]
1a004d52:	1b5b      	subs	r3, r3, r5
1a004d54:	d418      	bmi.n	1a004d88 <_malloc_r+0x8c>
1a004d56:	2b0b      	cmp	r3, #11
1a004d58:	d90f      	bls.n	1a004d7a <_malloc_r+0x7e>
1a004d5a:	600b      	str	r3, [r1, #0]
1a004d5c:	50cd      	str	r5, [r1, r3]
1a004d5e:	18cc      	adds	r4, r1, r3
1a004d60:	4630      	mov	r0, r6
1a004d62:	f000 fb8e 	bl	1a005482 <__malloc_unlock>
1a004d66:	f104 000b 	add.w	r0, r4, #11
1a004d6a:	1d23      	adds	r3, r4, #4
1a004d6c:	f020 0007 	bic.w	r0, r0, #7
1a004d70:	1ac3      	subs	r3, r0, r3
1a004d72:	d0d3      	beq.n	1a004d1c <_malloc_r+0x20>
1a004d74:	425a      	negs	r2, r3
1a004d76:	50e2      	str	r2, [r4, r3]
1a004d78:	e7d0      	b.n	1a004d1c <_malloc_r+0x20>
1a004d7a:	428c      	cmp	r4, r1
1a004d7c:	684b      	ldr	r3, [r1, #4]
1a004d7e:	bf16      	itet	ne
1a004d80:	6063      	strne	r3, [r4, #4]
1a004d82:	6013      	streq	r3, [r2, #0]
1a004d84:	460c      	movne	r4, r1
1a004d86:	e7eb      	b.n	1a004d60 <_malloc_r+0x64>
1a004d88:	460c      	mov	r4, r1
1a004d8a:	6849      	ldr	r1, [r1, #4]
1a004d8c:	e7cc      	b.n	1a004d28 <_malloc_r+0x2c>
1a004d8e:	1cc4      	adds	r4, r0, #3
1a004d90:	f024 0403 	bic.w	r4, r4, #3
1a004d94:	42a0      	cmp	r0, r4
1a004d96:	d005      	beq.n	1a004da4 <_malloc_r+0xa8>
1a004d98:	1a21      	subs	r1, r4, r0
1a004d9a:	4630      	mov	r0, r6
1a004d9c:	f7fb ff7e 	bl	1a000c9c <_sbrk_r>
1a004da0:	3001      	adds	r0, #1
1a004da2:	d0cf      	beq.n	1a004d44 <_malloc_r+0x48>
1a004da4:	6025      	str	r5, [r4, #0]
1a004da6:	e7db      	b.n	1a004d60 <_malloc_r+0x64>
1a004da8:	10003b60 	.word	0x10003b60
1a004dac:	10003b64 	.word	0x10003b64

1a004db0 <__sfputc_r>:
1a004db0:	6893      	ldr	r3, [r2, #8]
1a004db2:	3b01      	subs	r3, #1
1a004db4:	2b00      	cmp	r3, #0
1a004db6:	b410      	push	{r4}
1a004db8:	6093      	str	r3, [r2, #8]
1a004dba:	da08      	bge.n	1a004dce <__sfputc_r+0x1e>
1a004dbc:	6994      	ldr	r4, [r2, #24]
1a004dbe:	42a3      	cmp	r3, r4
1a004dc0:	db01      	blt.n	1a004dc6 <__sfputc_r+0x16>
1a004dc2:	290a      	cmp	r1, #10
1a004dc4:	d103      	bne.n	1a004dce <__sfputc_r+0x1e>
1a004dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004dca:	f7ff bc87 	b.w	1a0046dc <__swbuf_r>
1a004dce:	6813      	ldr	r3, [r2, #0]
1a004dd0:	1c58      	adds	r0, r3, #1
1a004dd2:	6010      	str	r0, [r2, #0]
1a004dd4:	7019      	strb	r1, [r3, #0]
1a004dd6:	4608      	mov	r0, r1
1a004dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004ddc:	4770      	bx	lr

1a004dde <__sfputs_r>:
1a004dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004de0:	4606      	mov	r6, r0
1a004de2:	460f      	mov	r7, r1
1a004de4:	4614      	mov	r4, r2
1a004de6:	18d5      	adds	r5, r2, r3
1a004de8:	42ac      	cmp	r4, r5
1a004dea:	d101      	bne.n	1a004df0 <__sfputs_r+0x12>
1a004dec:	2000      	movs	r0, #0
1a004dee:	e007      	b.n	1a004e00 <__sfputs_r+0x22>
1a004df0:	463a      	mov	r2, r7
1a004df2:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004df6:	4630      	mov	r0, r6
1a004df8:	f7ff ffda 	bl	1a004db0 <__sfputc_r>
1a004dfc:	1c43      	adds	r3, r0, #1
1a004dfe:	d1f3      	bne.n	1a004de8 <__sfputs_r+0xa>
1a004e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004e02:	Address 0x000000001a004e02 is out of bounds.


1a004e04 <_vfiprintf_r>:
1a004e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004e08:	460c      	mov	r4, r1
1a004e0a:	b09d      	sub	sp, #116	; 0x74
1a004e0c:	4617      	mov	r7, r2
1a004e0e:	461d      	mov	r5, r3
1a004e10:	4606      	mov	r6, r0
1a004e12:	b118      	cbz	r0, 1a004e1c <_vfiprintf_r+0x18>
1a004e14:	6983      	ldr	r3, [r0, #24]
1a004e16:	b90b      	cbnz	r3, 1a004e1c <_vfiprintf_r+0x18>
1a004e18:	f7ff fe10 	bl	1a004a3c <__sinit>
1a004e1c:	4b7c      	ldr	r3, [pc, #496]	; (1a005010 <_vfiprintf_r+0x20c>)
1a004e1e:	429c      	cmp	r4, r3
1a004e20:	d158      	bne.n	1a004ed4 <_vfiprintf_r+0xd0>
1a004e22:	6874      	ldr	r4, [r6, #4]
1a004e24:	89a3      	ldrh	r3, [r4, #12]
1a004e26:	0718      	lsls	r0, r3, #28
1a004e28:	d55e      	bpl.n	1a004ee8 <_vfiprintf_r+0xe4>
1a004e2a:	6923      	ldr	r3, [r4, #16]
1a004e2c:	2b00      	cmp	r3, #0
1a004e2e:	d05b      	beq.n	1a004ee8 <_vfiprintf_r+0xe4>
1a004e30:	2300      	movs	r3, #0
1a004e32:	9309      	str	r3, [sp, #36]	; 0x24
1a004e34:	2320      	movs	r3, #32
1a004e36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a004e3a:	2330      	movs	r3, #48	; 0x30
1a004e3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a004e40:	9503      	str	r5, [sp, #12]
1a004e42:	f04f 0b01 	mov.w	fp, #1
1a004e46:	46b8      	mov	r8, r7
1a004e48:	4645      	mov	r5, r8
1a004e4a:	f815 3b01 	ldrb.w	r3, [r5], #1
1a004e4e:	b10b      	cbz	r3, 1a004e54 <_vfiprintf_r+0x50>
1a004e50:	2b25      	cmp	r3, #37	; 0x25
1a004e52:	d154      	bne.n	1a004efe <_vfiprintf_r+0xfa>
1a004e54:	ebb8 0a07 	subs.w	sl, r8, r7
1a004e58:	d00b      	beq.n	1a004e72 <_vfiprintf_r+0x6e>
1a004e5a:	4653      	mov	r3, sl
1a004e5c:	463a      	mov	r2, r7
1a004e5e:	4621      	mov	r1, r4
1a004e60:	4630      	mov	r0, r6
1a004e62:	f7ff ffbc 	bl	1a004dde <__sfputs_r>
1a004e66:	3001      	adds	r0, #1
1a004e68:	f000 80c2 	beq.w	1a004ff0 <_vfiprintf_r+0x1ec>
1a004e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004e6e:	4453      	add	r3, sl
1a004e70:	9309      	str	r3, [sp, #36]	; 0x24
1a004e72:	f898 3000 	ldrb.w	r3, [r8]
1a004e76:	2b00      	cmp	r3, #0
1a004e78:	f000 80ba 	beq.w	1a004ff0 <_vfiprintf_r+0x1ec>
1a004e7c:	2300      	movs	r3, #0
1a004e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a004e82:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a004e86:	9304      	str	r3, [sp, #16]
1a004e88:	9307      	str	r3, [sp, #28]
1a004e8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a004e8e:	931a      	str	r3, [sp, #104]	; 0x68
1a004e90:	46a8      	mov	r8, r5
1a004e92:	2205      	movs	r2, #5
1a004e94:	f818 1b01 	ldrb.w	r1, [r8], #1
1a004e98:	485e      	ldr	r0, [pc, #376]	; (1a005014 <_vfiprintf_r+0x210>)
1a004e9a:	f000 faa1 	bl	1a0053e0 <memchr>
1a004e9e:	9b04      	ldr	r3, [sp, #16]
1a004ea0:	bb78      	cbnz	r0, 1a004f02 <_vfiprintf_r+0xfe>
1a004ea2:	06d9      	lsls	r1, r3, #27
1a004ea4:	bf44      	itt	mi
1a004ea6:	2220      	movmi	r2, #32
1a004ea8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004eac:	071a      	lsls	r2, r3, #28
1a004eae:	bf44      	itt	mi
1a004eb0:	222b      	movmi	r2, #43	; 0x2b
1a004eb2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004eb6:	782a      	ldrb	r2, [r5, #0]
1a004eb8:	2a2a      	cmp	r2, #42	; 0x2a
1a004eba:	d02a      	beq.n	1a004f12 <_vfiprintf_r+0x10e>
1a004ebc:	9a07      	ldr	r2, [sp, #28]
1a004ebe:	46a8      	mov	r8, r5
1a004ec0:	2000      	movs	r0, #0
1a004ec2:	250a      	movs	r5, #10
1a004ec4:	4641      	mov	r1, r8
1a004ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
1a004eca:	3b30      	subs	r3, #48	; 0x30
1a004ecc:	2b09      	cmp	r3, #9
1a004ece:	d969      	bls.n	1a004fa4 <_vfiprintf_r+0x1a0>
1a004ed0:	b360      	cbz	r0, 1a004f2c <_vfiprintf_r+0x128>
1a004ed2:	e024      	b.n	1a004f1e <_vfiprintf_r+0x11a>
1a004ed4:	4b50      	ldr	r3, [pc, #320]	; (1a005018 <_vfiprintf_r+0x214>)
1a004ed6:	429c      	cmp	r4, r3
1a004ed8:	d101      	bne.n	1a004ede <_vfiprintf_r+0xda>
1a004eda:	68b4      	ldr	r4, [r6, #8]
1a004edc:	e7a2      	b.n	1a004e24 <_vfiprintf_r+0x20>
1a004ede:	4b4f      	ldr	r3, [pc, #316]	; (1a00501c <_vfiprintf_r+0x218>)
1a004ee0:	429c      	cmp	r4, r3
1a004ee2:	bf08      	it	eq
1a004ee4:	68f4      	ldreq	r4, [r6, #12]
1a004ee6:	e79d      	b.n	1a004e24 <_vfiprintf_r+0x20>
1a004ee8:	4621      	mov	r1, r4
1a004eea:	4630      	mov	r0, r6
1a004eec:	f7ff fc48 	bl	1a004780 <__swsetup_r>
1a004ef0:	2800      	cmp	r0, #0
1a004ef2:	d09d      	beq.n	1a004e30 <_vfiprintf_r+0x2c>
1a004ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004ef8:	b01d      	add	sp, #116	; 0x74
1a004efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004efe:	46a8      	mov	r8, r5
1a004f00:	e7a2      	b.n	1a004e48 <_vfiprintf_r+0x44>
1a004f02:	4a44      	ldr	r2, [pc, #272]	; (1a005014 <_vfiprintf_r+0x210>)
1a004f04:	1a80      	subs	r0, r0, r2
1a004f06:	fa0b f000 	lsl.w	r0, fp, r0
1a004f0a:	4318      	orrs	r0, r3
1a004f0c:	9004      	str	r0, [sp, #16]
1a004f0e:	4645      	mov	r5, r8
1a004f10:	e7be      	b.n	1a004e90 <_vfiprintf_r+0x8c>
1a004f12:	9a03      	ldr	r2, [sp, #12]
1a004f14:	1d11      	adds	r1, r2, #4
1a004f16:	6812      	ldr	r2, [r2, #0]
1a004f18:	9103      	str	r1, [sp, #12]
1a004f1a:	2a00      	cmp	r2, #0
1a004f1c:	db01      	blt.n	1a004f22 <_vfiprintf_r+0x11e>
1a004f1e:	9207      	str	r2, [sp, #28]
1a004f20:	e004      	b.n	1a004f2c <_vfiprintf_r+0x128>
1a004f22:	4252      	negs	r2, r2
1a004f24:	f043 0302 	orr.w	r3, r3, #2
1a004f28:	9207      	str	r2, [sp, #28]
1a004f2a:	9304      	str	r3, [sp, #16]
1a004f2c:	f898 3000 	ldrb.w	r3, [r8]
1a004f30:	2b2e      	cmp	r3, #46	; 0x2e
1a004f32:	d10e      	bne.n	1a004f52 <_vfiprintf_r+0x14e>
1a004f34:	f898 3001 	ldrb.w	r3, [r8, #1]
1a004f38:	2b2a      	cmp	r3, #42	; 0x2a
1a004f3a:	d138      	bne.n	1a004fae <_vfiprintf_r+0x1aa>
1a004f3c:	9b03      	ldr	r3, [sp, #12]
1a004f3e:	1d1a      	adds	r2, r3, #4
1a004f40:	681b      	ldr	r3, [r3, #0]
1a004f42:	9203      	str	r2, [sp, #12]
1a004f44:	2b00      	cmp	r3, #0
1a004f46:	bfb8      	it	lt
1a004f48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a004f4c:	f108 0802 	add.w	r8, r8, #2
1a004f50:	9305      	str	r3, [sp, #20]
1a004f52:	4d33      	ldr	r5, [pc, #204]	; (1a005020 <_vfiprintf_r+0x21c>)
1a004f54:	f898 1000 	ldrb.w	r1, [r8]
1a004f58:	2203      	movs	r2, #3
1a004f5a:	4628      	mov	r0, r5
1a004f5c:	f000 fa40 	bl	1a0053e0 <memchr>
1a004f60:	b140      	cbz	r0, 1a004f74 <_vfiprintf_r+0x170>
1a004f62:	2340      	movs	r3, #64	; 0x40
1a004f64:	1b40      	subs	r0, r0, r5
1a004f66:	fa03 f000 	lsl.w	r0, r3, r0
1a004f6a:	9b04      	ldr	r3, [sp, #16]
1a004f6c:	4303      	orrs	r3, r0
1a004f6e:	f108 0801 	add.w	r8, r8, #1
1a004f72:	9304      	str	r3, [sp, #16]
1a004f74:	f898 1000 	ldrb.w	r1, [r8]
1a004f78:	482a      	ldr	r0, [pc, #168]	; (1a005024 <_vfiprintf_r+0x220>)
1a004f7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a004f7e:	2206      	movs	r2, #6
1a004f80:	f108 0701 	add.w	r7, r8, #1
1a004f84:	f000 fa2c 	bl	1a0053e0 <memchr>
1a004f88:	2800      	cmp	r0, #0
1a004f8a:	d037      	beq.n	1a004ffc <_vfiprintf_r+0x1f8>
1a004f8c:	4b26      	ldr	r3, [pc, #152]	; (1a005028 <_vfiprintf_r+0x224>)
1a004f8e:	bb1b      	cbnz	r3, 1a004fd8 <_vfiprintf_r+0x1d4>
1a004f90:	9b03      	ldr	r3, [sp, #12]
1a004f92:	3307      	adds	r3, #7
1a004f94:	f023 0307 	bic.w	r3, r3, #7
1a004f98:	3308      	adds	r3, #8
1a004f9a:	9303      	str	r3, [sp, #12]
1a004f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004f9e:	444b      	add	r3, r9
1a004fa0:	9309      	str	r3, [sp, #36]	; 0x24
1a004fa2:	e750      	b.n	1a004e46 <_vfiprintf_r+0x42>
1a004fa4:	fb05 3202 	mla	r2, r5, r2, r3
1a004fa8:	2001      	movs	r0, #1
1a004faa:	4688      	mov	r8, r1
1a004fac:	e78a      	b.n	1a004ec4 <_vfiprintf_r+0xc0>
1a004fae:	2300      	movs	r3, #0
1a004fb0:	f108 0801 	add.w	r8, r8, #1
1a004fb4:	9305      	str	r3, [sp, #20]
1a004fb6:	4619      	mov	r1, r3
1a004fb8:	250a      	movs	r5, #10
1a004fba:	4640      	mov	r0, r8
1a004fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
1a004fc0:	3a30      	subs	r2, #48	; 0x30
1a004fc2:	2a09      	cmp	r2, #9
1a004fc4:	d903      	bls.n	1a004fce <_vfiprintf_r+0x1ca>
1a004fc6:	2b00      	cmp	r3, #0
1a004fc8:	d0c3      	beq.n	1a004f52 <_vfiprintf_r+0x14e>
1a004fca:	9105      	str	r1, [sp, #20]
1a004fcc:	e7c1      	b.n	1a004f52 <_vfiprintf_r+0x14e>
1a004fce:	fb05 2101 	mla	r1, r5, r1, r2
1a004fd2:	2301      	movs	r3, #1
1a004fd4:	4680      	mov	r8, r0
1a004fd6:	e7f0      	b.n	1a004fba <_vfiprintf_r+0x1b6>
1a004fd8:	ab03      	add	r3, sp, #12
1a004fda:	9300      	str	r3, [sp, #0]
1a004fdc:	4622      	mov	r2, r4
1a004fde:	4b13      	ldr	r3, [pc, #76]	; (1a00502c <_vfiprintf_r+0x228>)
1a004fe0:	a904      	add	r1, sp, #16
1a004fe2:	4630      	mov	r0, r6
1a004fe4:	f3af 8000 	nop.w
1a004fe8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004fec:	4681      	mov	r9, r0
1a004fee:	d1d5      	bne.n	1a004f9c <_vfiprintf_r+0x198>
1a004ff0:	89a3      	ldrh	r3, [r4, #12]
1a004ff2:	065b      	lsls	r3, r3, #25
1a004ff4:	f53f af7e 	bmi.w	1a004ef4 <_vfiprintf_r+0xf0>
1a004ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
1a004ffa:	e77d      	b.n	1a004ef8 <_vfiprintf_r+0xf4>
1a004ffc:	ab03      	add	r3, sp, #12
1a004ffe:	9300      	str	r3, [sp, #0]
1a005000:	4622      	mov	r2, r4
1a005002:	4b0a      	ldr	r3, [pc, #40]	; (1a00502c <_vfiprintf_r+0x228>)
1a005004:	a904      	add	r1, sp, #16
1a005006:	4630      	mov	r0, r6
1a005008:	f000 f888 	bl	1a00511c <_printf_i>
1a00500c:	e7ec      	b.n	1a004fe8 <_vfiprintf_r+0x1e4>
1a00500e:	bf00      	nop
1a005010:	1a005d00 	.word	0x1a005d00
1a005014:	1a005d4e 	.word	0x1a005d4e
1a005018:	1a005d20 	.word	0x1a005d20
1a00501c:	1a005ce0 	.word	0x1a005ce0
1a005020:	1a005d54 	.word	0x1a005d54
1a005024:	1a005d58 	.word	0x1a005d58
1a005028:	00000000 	.word	0x00000000
1a00502c:	1a004ddf 	.word	0x1a004ddf

1a005030 <_printf_common>:
1a005030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a005034:	4691      	mov	r9, r2
1a005036:	461f      	mov	r7, r3
1a005038:	688a      	ldr	r2, [r1, #8]
1a00503a:	690b      	ldr	r3, [r1, #16]
1a00503c:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a005040:	4293      	cmp	r3, r2
1a005042:	bfb8      	it	lt
1a005044:	4613      	movlt	r3, r2
1a005046:	f8c9 3000 	str.w	r3, [r9]
1a00504a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a00504e:	4606      	mov	r6, r0
1a005050:	460c      	mov	r4, r1
1a005052:	b112      	cbz	r2, 1a00505a <_printf_common+0x2a>
1a005054:	3301      	adds	r3, #1
1a005056:	f8c9 3000 	str.w	r3, [r9]
1a00505a:	6823      	ldr	r3, [r4, #0]
1a00505c:	0699      	lsls	r1, r3, #26
1a00505e:	bf42      	ittt	mi
1a005060:	f8d9 3000 	ldrmi.w	r3, [r9]
1a005064:	3302      	addmi	r3, #2
1a005066:	f8c9 3000 	strmi.w	r3, [r9]
1a00506a:	6825      	ldr	r5, [r4, #0]
1a00506c:	f015 0506 	ands.w	r5, r5, #6
1a005070:	d107      	bne.n	1a005082 <_printf_common+0x52>
1a005072:	f104 0a19 	add.w	sl, r4, #25
1a005076:	68e3      	ldr	r3, [r4, #12]
1a005078:	f8d9 2000 	ldr.w	r2, [r9]
1a00507c:	1a9b      	subs	r3, r3, r2
1a00507e:	42ab      	cmp	r3, r5
1a005080:	dc28      	bgt.n	1a0050d4 <_printf_common+0xa4>
1a005082:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a005086:	6822      	ldr	r2, [r4, #0]
1a005088:	3300      	adds	r3, #0
1a00508a:	bf18      	it	ne
1a00508c:	2301      	movne	r3, #1
1a00508e:	0692      	lsls	r2, r2, #26
1a005090:	d42d      	bmi.n	1a0050ee <_printf_common+0xbe>
1a005092:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a005096:	4639      	mov	r1, r7
1a005098:	4630      	mov	r0, r6
1a00509a:	47c0      	blx	r8
1a00509c:	3001      	adds	r0, #1
1a00509e:	d020      	beq.n	1a0050e2 <_printf_common+0xb2>
1a0050a0:	6823      	ldr	r3, [r4, #0]
1a0050a2:	68e5      	ldr	r5, [r4, #12]
1a0050a4:	f8d9 2000 	ldr.w	r2, [r9]
1a0050a8:	f003 0306 	and.w	r3, r3, #6
1a0050ac:	2b04      	cmp	r3, #4
1a0050ae:	bf08      	it	eq
1a0050b0:	1aad      	subeq	r5, r5, r2
1a0050b2:	68a3      	ldr	r3, [r4, #8]
1a0050b4:	6922      	ldr	r2, [r4, #16]
1a0050b6:	bf0c      	ite	eq
1a0050b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a0050bc:	2500      	movne	r5, #0
1a0050be:	4293      	cmp	r3, r2
1a0050c0:	bfc4      	itt	gt
1a0050c2:	1a9b      	subgt	r3, r3, r2
1a0050c4:	18ed      	addgt	r5, r5, r3
1a0050c6:	f04f 0900 	mov.w	r9, #0
1a0050ca:	341a      	adds	r4, #26
1a0050cc:	454d      	cmp	r5, r9
1a0050ce:	d11a      	bne.n	1a005106 <_printf_common+0xd6>
1a0050d0:	2000      	movs	r0, #0
1a0050d2:	e008      	b.n	1a0050e6 <_printf_common+0xb6>
1a0050d4:	2301      	movs	r3, #1
1a0050d6:	4652      	mov	r2, sl
1a0050d8:	4639      	mov	r1, r7
1a0050da:	4630      	mov	r0, r6
1a0050dc:	47c0      	blx	r8
1a0050de:	3001      	adds	r0, #1
1a0050e0:	d103      	bne.n	1a0050ea <_printf_common+0xba>
1a0050e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0050e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0050ea:	3501      	adds	r5, #1
1a0050ec:	e7c3      	b.n	1a005076 <_printf_common+0x46>
1a0050ee:	18e1      	adds	r1, r4, r3
1a0050f0:	1c5a      	adds	r2, r3, #1
1a0050f2:	2030      	movs	r0, #48	; 0x30
1a0050f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a0050f8:	4422      	add	r2, r4
1a0050fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a0050fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a005102:	3302      	adds	r3, #2
1a005104:	e7c5      	b.n	1a005092 <_printf_common+0x62>
1a005106:	2301      	movs	r3, #1
1a005108:	4622      	mov	r2, r4
1a00510a:	4639      	mov	r1, r7
1a00510c:	4630      	mov	r0, r6
1a00510e:	47c0      	blx	r8
1a005110:	3001      	adds	r0, #1
1a005112:	d0e6      	beq.n	1a0050e2 <_printf_common+0xb2>
1a005114:	f109 0901 	add.w	r9, r9, #1
1a005118:	e7d8      	b.n	1a0050cc <_printf_common+0x9c>
1a00511a:	Address 0x000000001a00511a is out of bounds.


1a00511c <_printf_i>:
1a00511c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a005120:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a005124:	460c      	mov	r4, r1
1a005126:	7e09      	ldrb	r1, [r1, #24]
1a005128:	b085      	sub	sp, #20
1a00512a:	296e      	cmp	r1, #110	; 0x6e
1a00512c:	4617      	mov	r7, r2
1a00512e:	4606      	mov	r6, r0
1a005130:	4698      	mov	r8, r3
1a005132:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005134:	f000 80b3 	beq.w	1a00529e <_printf_i+0x182>
1a005138:	d822      	bhi.n	1a005180 <_printf_i+0x64>
1a00513a:	2963      	cmp	r1, #99	; 0x63
1a00513c:	d036      	beq.n	1a0051ac <_printf_i+0x90>
1a00513e:	d80a      	bhi.n	1a005156 <_printf_i+0x3a>
1a005140:	2900      	cmp	r1, #0
1a005142:	f000 80b9 	beq.w	1a0052b8 <_printf_i+0x19c>
1a005146:	2958      	cmp	r1, #88	; 0x58
1a005148:	f000 8083 	beq.w	1a005252 <_printf_i+0x136>
1a00514c:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005150:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a005154:	e032      	b.n	1a0051bc <_printf_i+0xa0>
1a005156:	2964      	cmp	r1, #100	; 0x64
1a005158:	d001      	beq.n	1a00515e <_printf_i+0x42>
1a00515a:	2969      	cmp	r1, #105	; 0x69
1a00515c:	d1f6      	bne.n	1a00514c <_printf_i+0x30>
1a00515e:	6820      	ldr	r0, [r4, #0]
1a005160:	6813      	ldr	r3, [r2, #0]
1a005162:	0605      	lsls	r5, r0, #24
1a005164:	f103 0104 	add.w	r1, r3, #4
1a005168:	d52a      	bpl.n	1a0051c0 <_printf_i+0xa4>
1a00516a:	681b      	ldr	r3, [r3, #0]
1a00516c:	6011      	str	r1, [r2, #0]
1a00516e:	2b00      	cmp	r3, #0
1a005170:	da03      	bge.n	1a00517a <_printf_i+0x5e>
1a005172:	222d      	movs	r2, #45	; 0x2d
1a005174:	425b      	negs	r3, r3
1a005176:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a00517a:	486f      	ldr	r0, [pc, #444]	; (1a005338 <_printf_i+0x21c>)
1a00517c:	220a      	movs	r2, #10
1a00517e:	e039      	b.n	1a0051f4 <_printf_i+0xd8>
1a005180:	2973      	cmp	r1, #115	; 0x73
1a005182:	f000 809d 	beq.w	1a0052c0 <_printf_i+0x1a4>
1a005186:	d808      	bhi.n	1a00519a <_printf_i+0x7e>
1a005188:	296f      	cmp	r1, #111	; 0x6f
1a00518a:	d020      	beq.n	1a0051ce <_printf_i+0xb2>
1a00518c:	2970      	cmp	r1, #112	; 0x70
1a00518e:	d1dd      	bne.n	1a00514c <_printf_i+0x30>
1a005190:	6823      	ldr	r3, [r4, #0]
1a005192:	f043 0320 	orr.w	r3, r3, #32
1a005196:	6023      	str	r3, [r4, #0]
1a005198:	e003      	b.n	1a0051a2 <_printf_i+0x86>
1a00519a:	2975      	cmp	r1, #117	; 0x75
1a00519c:	d017      	beq.n	1a0051ce <_printf_i+0xb2>
1a00519e:	2978      	cmp	r1, #120	; 0x78
1a0051a0:	d1d4      	bne.n	1a00514c <_printf_i+0x30>
1a0051a2:	2378      	movs	r3, #120	; 0x78
1a0051a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0051a8:	4864      	ldr	r0, [pc, #400]	; (1a00533c <_printf_i+0x220>)
1a0051aa:	e055      	b.n	1a005258 <_printf_i+0x13c>
1a0051ac:	6813      	ldr	r3, [r2, #0]
1a0051ae:	1d19      	adds	r1, r3, #4
1a0051b0:	681b      	ldr	r3, [r3, #0]
1a0051b2:	6011      	str	r1, [r2, #0]
1a0051b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0051b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a0051bc:	2301      	movs	r3, #1
1a0051be:	e08c      	b.n	1a0052da <_printf_i+0x1be>
1a0051c0:	681b      	ldr	r3, [r3, #0]
1a0051c2:	6011      	str	r1, [r2, #0]
1a0051c4:	f010 0f40 	tst.w	r0, #64	; 0x40
1a0051c8:	bf18      	it	ne
1a0051ca:	b21b      	sxthne	r3, r3
1a0051cc:	e7cf      	b.n	1a00516e <_printf_i+0x52>
1a0051ce:	6813      	ldr	r3, [r2, #0]
1a0051d0:	6825      	ldr	r5, [r4, #0]
1a0051d2:	1d18      	adds	r0, r3, #4
1a0051d4:	6010      	str	r0, [r2, #0]
1a0051d6:	0628      	lsls	r0, r5, #24
1a0051d8:	d501      	bpl.n	1a0051de <_printf_i+0xc2>
1a0051da:	681b      	ldr	r3, [r3, #0]
1a0051dc:	e002      	b.n	1a0051e4 <_printf_i+0xc8>
1a0051de:	0668      	lsls	r0, r5, #25
1a0051e0:	d5fb      	bpl.n	1a0051da <_printf_i+0xbe>
1a0051e2:	881b      	ldrh	r3, [r3, #0]
1a0051e4:	4854      	ldr	r0, [pc, #336]	; (1a005338 <_printf_i+0x21c>)
1a0051e6:	296f      	cmp	r1, #111	; 0x6f
1a0051e8:	bf14      	ite	ne
1a0051ea:	220a      	movne	r2, #10
1a0051ec:	2208      	moveq	r2, #8
1a0051ee:	2100      	movs	r1, #0
1a0051f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a0051f4:	6865      	ldr	r5, [r4, #4]
1a0051f6:	60a5      	str	r5, [r4, #8]
1a0051f8:	2d00      	cmp	r5, #0
1a0051fa:	f2c0 8095 	blt.w	1a005328 <_printf_i+0x20c>
1a0051fe:	6821      	ldr	r1, [r4, #0]
1a005200:	f021 0104 	bic.w	r1, r1, #4
1a005204:	6021      	str	r1, [r4, #0]
1a005206:	2b00      	cmp	r3, #0
1a005208:	d13d      	bne.n	1a005286 <_printf_i+0x16a>
1a00520a:	2d00      	cmp	r5, #0
1a00520c:	f040 808e 	bne.w	1a00532c <_printf_i+0x210>
1a005210:	4665      	mov	r5, ip
1a005212:	2a08      	cmp	r2, #8
1a005214:	d10b      	bne.n	1a00522e <_printf_i+0x112>
1a005216:	6823      	ldr	r3, [r4, #0]
1a005218:	07db      	lsls	r3, r3, #31
1a00521a:	d508      	bpl.n	1a00522e <_printf_i+0x112>
1a00521c:	6923      	ldr	r3, [r4, #16]
1a00521e:	6862      	ldr	r2, [r4, #4]
1a005220:	429a      	cmp	r2, r3
1a005222:	bfde      	ittt	le
1a005224:	2330      	movle	r3, #48	; 0x30
1a005226:	f805 3c01 	strble.w	r3, [r5, #-1]
1a00522a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a00522e:	ebac 0305 	sub.w	r3, ip, r5
1a005232:	6123      	str	r3, [r4, #16]
1a005234:	f8cd 8000 	str.w	r8, [sp]
1a005238:	463b      	mov	r3, r7
1a00523a:	aa03      	add	r2, sp, #12
1a00523c:	4621      	mov	r1, r4
1a00523e:	4630      	mov	r0, r6
1a005240:	f7ff fef6 	bl	1a005030 <_printf_common>
1a005244:	3001      	adds	r0, #1
1a005246:	d14d      	bne.n	1a0052e4 <_printf_i+0x1c8>
1a005248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00524c:	b005      	add	sp, #20
1a00524e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a005252:	4839      	ldr	r0, [pc, #228]	; (1a005338 <_printf_i+0x21c>)
1a005254:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a005258:	6813      	ldr	r3, [r2, #0]
1a00525a:	6821      	ldr	r1, [r4, #0]
1a00525c:	1d1d      	adds	r5, r3, #4
1a00525e:	681b      	ldr	r3, [r3, #0]
1a005260:	6015      	str	r5, [r2, #0]
1a005262:	060a      	lsls	r2, r1, #24
1a005264:	d50b      	bpl.n	1a00527e <_printf_i+0x162>
1a005266:	07ca      	lsls	r2, r1, #31
1a005268:	bf44      	itt	mi
1a00526a:	f041 0120 	orrmi.w	r1, r1, #32
1a00526e:	6021      	strmi	r1, [r4, #0]
1a005270:	b91b      	cbnz	r3, 1a00527a <_printf_i+0x15e>
1a005272:	6822      	ldr	r2, [r4, #0]
1a005274:	f022 0220 	bic.w	r2, r2, #32
1a005278:	6022      	str	r2, [r4, #0]
1a00527a:	2210      	movs	r2, #16
1a00527c:	e7b7      	b.n	1a0051ee <_printf_i+0xd2>
1a00527e:	064d      	lsls	r5, r1, #25
1a005280:	bf48      	it	mi
1a005282:	b29b      	uxthmi	r3, r3
1a005284:	e7ef      	b.n	1a005266 <_printf_i+0x14a>
1a005286:	4665      	mov	r5, ip
1a005288:	fbb3 f1f2 	udiv	r1, r3, r2
1a00528c:	fb02 3311 	mls	r3, r2, r1, r3
1a005290:	5cc3      	ldrb	r3, [r0, r3]
1a005292:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a005296:	460b      	mov	r3, r1
1a005298:	2900      	cmp	r1, #0
1a00529a:	d1f5      	bne.n	1a005288 <_printf_i+0x16c>
1a00529c:	e7b9      	b.n	1a005212 <_printf_i+0xf6>
1a00529e:	6813      	ldr	r3, [r2, #0]
1a0052a0:	6825      	ldr	r5, [r4, #0]
1a0052a2:	6961      	ldr	r1, [r4, #20]
1a0052a4:	1d18      	adds	r0, r3, #4
1a0052a6:	6010      	str	r0, [r2, #0]
1a0052a8:	0628      	lsls	r0, r5, #24
1a0052aa:	681b      	ldr	r3, [r3, #0]
1a0052ac:	d501      	bpl.n	1a0052b2 <_printf_i+0x196>
1a0052ae:	6019      	str	r1, [r3, #0]
1a0052b0:	e002      	b.n	1a0052b8 <_printf_i+0x19c>
1a0052b2:	066a      	lsls	r2, r5, #25
1a0052b4:	d5fb      	bpl.n	1a0052ae <_printf_i+0x192>
1a0052b6:	8019      	strh	r1, [r3, #0]
1a0052b8:	2300      	movs	r3, #0
1a0052ba:	6123      	str	r3, [r4, #16]
1a0052bc:	4665      	mov	r5, ip
1a0052be:	e7b9      	b.n	1a005234 <_printf_i+0x118>
1a0052c0:	6813      	ldr	r3, [r2, #0]
1a0052c2:	1d19      	adds	r1, r3, #4
1a0052c4:	6011      	str	r1, [r2, #0]
1a0052c6:	681d      	ldr	r5, [r3, #0]
1a0052c8:	6862      	ldr	r2, [r4, #4]
1a0052ca:	2100      	movs	r1, #0
1a0052cc:	4628      	mov	r0, r5
1a0052ce:	f000 f887 	bl	1a0053e0 <memchr>
1a0052d2:	b108      	cbz	r0, 1a0052d8 <_printf_i+0x1bc>
1a0052d4:	1b40      	subs	r0, r0, r5
1a0052d6:	6060      	str	r0, [r4, #4]
1a0052d8:	6863      	ldr	r3, [r4, #4]
1a0052da:	6123      	str	r3, [r4, #16]
1a0052dc:	2300      	movs	r3, #0
1a0052de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0052e2:	e7a7      	b.n	1a005234 <_printf_i+0x118>
1a0052e4:	6923      	ldr	r3, [r4, #16]
1a0052e6:	462a      	mov	r2, r5
1a0052e8:	4639      	mov	r1, r7
1a0052ea:	4630      	mov	r0, r6
1a0052ec:	47c0      	blx	r8
1a0052ee:	3001      	adds	r0, #1
1a0052f0:	d0aa      	beq.n	1a005248 <_printf_i+0x12c>
1a0052f2:	6823      	ldr	r3, [r4, #0]
1a0052f4:	079b      	lsls	r3, r3, #30
1a0052f6:	d413      	bmi.n	1a005320 <_printf_i+0x204>
1a0052f8:	68e0      	ldr	r0, [r4, #12]
1a0052fa:	9b03      	ldr	r3, [sp, #12]
1a0052fc:	4298      	cmp	r0, r3
1a0052fe:	bfb8      	it	lt
1a005300:	4618      	movlt	r0, r3
1a005302:	e7a3      	b.n	1a00524c <_printf_i+0x130>
1a005304:	2301      	movs	r3, #1
1a005306:	464a      	mov	r2, r9
1a005308:	4639      	mov	r1, r7
1a00530a:	4630      	mov	r0, r6
1a00530c:	47c0      	blx	r8
1a00530e:	3001      	adds	r0, #1
1a005310:	d09a      	beq.n	1a005248 <_printf_i+0x12c>
1a005312:	3501      	adds	r5, #1
1a005314:	68e3      	ldr	r3, [r4, #12]
1a005316:	9a03      	ldr	r2, [sp, #12]
1a005318:	1a9b      	subs	r3, r3, r2
1a00531a:	42ab      	cmp	r3, r5
1a00531c:	dcf2      	bgt.n	1a005304 <_printf_i+0x1e8>
1a00531e:	e7eb      	b.n	1a0052f8 <_printf_i+0x1dc>
1a005320:	2500      	movs	r5, #0
1a005322:	f104 0919 	add.w	r9, r4, #25
1a005326:	e7f5      	b.n	1a005314 <_printf_i+0x1f8>
1a005328:	2b00      	cmp	r3, #0
1a00532a:	d1ac      	bne.n	1a005286 <_printf_i+0x16a>
1a00532c:	7803      	ldrb	r3, [r0, #0]
1a00532e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a005332:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005336:	e76c      	b.n	1a005212 <_printf_i+0xf6>
1a005338:	1a005d5f 	.word	0x1a005d5f
1a00533c:	1a005d70 	.word	0x1a005d70

1a005340 <__sread>:
1a005340:	b510      	push	{r4, lr}
1a005342:	460c      	mov	r4, r1
1a005344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005348:	f7fb fc6c 	bl	1a000c24 <_read_r>
1a00534c:	2800      	cmp	r0, #0
1a00534e:	bfab      	itete	ge
1a005350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a005352:	89a3      	ldrhlt	r3, [r4, #12]
1a005354:	181b      	addge	r3, r3, r0
1a005356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a00535a:	bfac      	ite	ge
1a00535c:	6563      	strge	r3, [r4, #84]	; 0x54
1a00535e:	81a3      	strhlt	r3, [r4, #12]
1a005360:	bd10      	pop	{r4, pc}

1a005362 <__swrite>:
1a005362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005366:	461f      	mov	r7, r3
1a005368:	898b      	ldrh	r3, [r1, #12]
1a00536a:	05db      	lsls	r3, r3, #23
1a00536c:	4605      	mov	r5, r0
1a00536e:	460c      	mov	r4, r1
1a005370:	4616      	mov	r6, r2
1a005372:	d505      	bpl.n	1a005380 <__swrite+0x1e>
1a005374:	2302      	movs	r3, #2
1a005376:	2200      	movs	r2, #0
1a005378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00537c:	f7fb fc4d 	bl	1a000c1a <_lseek_r>
1a005380:	89a3      	ldrh	r3, [r4, #12]
1a005382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a005386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a00538a:	81a3      	strh	r3, [r4, #12]
1a00538c:	4632      	mov	r2, r6
1a00538e:	463b      	mov	r3, r7
1a005390:	4628      	mov	r0, r5
1a005392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a005396:	f7fb bc6c 	b.w	1a000c72 <_write_r>

1a00539a <__sseek>:
1a00539a:	b510      	push	{r4, lr}
1a00539c:	460c      	mov	r4, r1
1a00539e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0053a2:	f7fb fc3a 	bl	1a000c1a <_lseek_r>
1a0053a6:	1c43      	adds	r3, r0, #1
1a0053a8:	89a3      	ldrh	r3, [r4, #12]
1a0053aa:	bf15      	itete	ne
1a0053ac:	6560      	strne	r0, [r4, #84]	; 0x54
1a0053ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0053b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0053b6:	81a3      	strheq	r3, [r4, #12]
1a0053b8:	bf18      	it	ne
1a0053ba:	81a3      	strhne	r3, [r4, #12]
1a0053bc:	bd10      	pop	{r4, pc}

1a0053be <__sclose>:
1a0053be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0053c2:	f7fb bc17 	b.w	1a000bf4 <_close_r>

1a0053c6 <__ascii_wctomb>:
1a0053c6:	b149      	cbz	r1, 1a0053dc <__ascii_wctomb+0x16>
1a0053c8:	2aff      	cmp	r2, #255	; 0xff
1a0053ca:	bf85      	ittet	hi
1a0053cc:	238a      	movhi	r3, #138	; 0x8a
1a0053ce:	6003      	strhi	r3, [r0, #0]
1a0053d0:	700a      	strbls	r2, [r1, #0]
1a0053d2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
1a0053d6:	bf98      	it	ls
1a0053d8:	2001      	movls	r0, #1
1a0053da:	4770      	bx	lr
1a0053dc:	4608      	mov	r0, r1
1a0053de:	4770      	bx	lr

1a0053e0 <memchr>:
1a0053e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0053e4:	2a10      	cmp	r2, #16
1a0053e6:	db2b      	blt.n	1a005440 <memchr+0x60>
1a0053e8:	f010 0f07 	tst.w	r0, #7
1a0053ec:	d008      	beq.n	1a005400 <memchr+0x20>
1a0053ee:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0053f2:	3a01      	subs	r2, #1
1a0053f4:	428b      	cmp	r3, r1
1a0053f6:	d02d      	beq.n	1a005454 <memchr+0x74>
1a0053f8:	f010 0f07 	tst.w	r0, #7
1a0053fc:	b342      	cbz	r2, 1a005450 <memchr+0x70>
1a0053fe:	d1f6      	bne.n	1a0053ee <memchr+0xe>
1a005400:	b4f0      	push	{r4, r5, r6, r7}
1a005402:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a005406:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00540a:	f022 0407 	bic.w	r4, r2, #7
1a00540e:	f07f 0700 	mvns.w	r7, #0
1a005412:	2300      	movs	r3, #0
1a005414:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a005418:	3c08      	subs	r4, #8
1a00541a:	ea85 0501 	eor.w	r5, r5, r1
1a00541e:	ea86 0601 	eor.w	r6, r6, r1
1a005422:	fa85 f547 	uadd8	r5, r5, r7
1a005426:	faa3 f587 	sel	r5, r3, r7
1a00542a:	fa86 f647 	uadd8	r6, r6, r7
1a00542e:	faa5 f687 	sel	r6, r5, r7
1a005432:	b98e      	cbnz	r6, 1a005458 <memchr+0x78>
1a005434:	d1ee      	bne.n	1a005414 <memchr+0x34>
1a005436:	bcf0      	pop	{r4, r5, r6, r7}
1a005438:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00543c:	f002 0207 	and.w	r2, r2, #7
1a005440:	b132      	cbz	r2, 1a005450 <memchr+0x70>
1a005442:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005446:	3a01      	subs	r2, #1
1a005448:	ea83 0301 	eor.w	r3, r3, r1
1a00544c:	b113      	cbz	r3, 1a005454 <memchr+0x74>
1a00544e:	d1f8      	bne.n	1a005442 <memchr+0x62>
1a005450:	2000      	movs	r0, #0
1a005452:	4770      	bx	lr
1a005454:	3801      	subs	r0, #1
1a005456:	4770      	bx	lr
1a005458:	2d00      	cmp	r5, #0
1a00545a:	bf06      	itte	eq
1a00545c:	4635      	moveq	r5, r6
1a00545e:	3803      	subeq	r0, #3
1a005460:	3807      	subne	r0, #7
1a005462:	f015 0f01 	tst.w	r5, #1
1a005466:	d107      	bne.n	1a005478 <memchr+0x98>
1a005468:	3001      	adds	r0, #1
1a00546a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00546e:	bf02      	ittt	eq
1a005470:	3001      	addeq	r0, #1
1a005472:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a005476:	3001      	addeq	r0, #1
1a005478:	bcf0      	pop	{r4, r5, r6, r7}
1a00547a:	3801      	subs	r0, #1
1a00547c:	4770      	bx	lr
1a00547e:	bf00      	nop

1a005480 <__malloc_lock>:
1a005480:	4770      	bx	lr

1a005482 <__malloc_unlock>:
1a005482:	4770      	bx	lr
1a005484:	78787878 	.word	0x78787878
1a005488:	78787878 	.word	0x78787878
1a00548c:	78787878 	.word	0x78787878
1a005490:	78787878 	.word	0x78787878
1a005494:	78787878 	.word	0x78787878
1a005498:	78787878 	.word	0x78787878
1a00549c:	78787878 	.word	0x78787878
1a0054a0:	78787878 	.word	0x78787878
1a0054a4:	78787878 	.word	0x78787878
1a0054a8:	78787878 	.word	0x78787878
1a0054ac:	78787878 	.word	0x78787878
1a0054b0:	78787878 	.word	0x78787878
1a0054b4:	78787878 	.word	0x78787878
1a0054b8:	78787878 	.word	0x78787878
1a0054bc:	78787878 	.word	0x78787878
1a0054c0:	78787878 	.word	0x78787878
1a0054c4:	78787878 	.word	0x78787878
1a0054c8:	78787878 	.word	0x78787878
1a0054cc:	78787878 	.word	0x78787878
	...
1a0054f4:	78787878 	.word	0x78787878
1a0054f8:	78787878 	.word	0x78787878
1a0054fc:	78787878 	.word	0x78787878
1a005500:	78787878 	.word	0x78787878
1a005504:	78787878 	.word	0x78787878
1a005508:	78787878 	.word	0x78787878
1a00550c:	78787878 	.word	0x78787878
1a005510:	78787878 	.word	0x78787878
1a005514:	78787878 	.word	0x78787878
1a005518:	78787878 	.word	0x78787878
1a00551c:	78787878 	.word	0x78787878
1a005520:	78787878 	.word	0x78787878
1a005524:	78787878 	.word	0x78787878
1a005528:	78787878 	.word	0x78787878
1a00552c:	78787878 	.word	0x78787878
1a005530:	ff007878 	.word	0xff007878
1a005534:	6b736154 	.word	0x6b736154
1a005538:	73203120 	.word	0x73203120
1a00553c:	65707375 	.word	0x65707375
1a005540:	6465646e 	.word	0x6465646e
1a005544:	6f6e202c 	.word	0x6f6e202c
1a005548:	65755120 	.word	0x65755120
1a00554c:	63206575 	.word	0x63206575
1a005550:	74616572 	.word	0x74616572
1a005554:	202e6465 	.word	0x202e6465
1a005558:	00000a20 	.word	0x00000a20
1a00555c:	6b736154 	.word	0x6b736154
1a005560:	73203220 	.word	0x73203220
1a005564:	65707375 	.word	0x65707375
1a005568:	6465646e 	.word	0x6465646e
1a00556c:	6f6e202c 	.word	0x6f6e202c
1a005570:	65755120 	.word	0x65755120
1a005574:	63206575 	.word	0x63206575
1a005578:	74616572 	.word	0x74616572
1a00557c:	202e6465 	.word	0x202e6465
1a005580:	00000a20 	.word	0x00000a20
1a005584:	73206f4e 	.word	0x73206f4e
1a005588:	20686375 	.word	0x20686375
1a00558c:	6b736174 	.word	0x6b736174
1a005590:	0a20202e 	.word	0x0a20202e
1a005594:	ffffff00 	.word	0xffffff00
	...
1a0055cc:	ff000000 	.word	0xff000000
1a0055d0:	76697244 	.word	0x76697244
1a0055d4:	3e2d7265 	.word	0x3e2d7265
1a0055d8:	70655220 	.word	0x70655220
1a0055dc:	3a74726f 	.word	0x3a74726f
1a0055e0:	61724620 	.word	0x61724620
1a0055e4:	7220656d 	.word	0x7220656d
1a0055e8:	69656365 	.word	0x69656365
1a0055ec:	20646576 	.word	0x20646576
1a0055f0:	7325202d 	.word	0x7325202d
1a0055f4:	00000a20 	.word	0x00000a20
1a0055f8:	76697244 	.word	0x76697244
1a0055fc:	3e2d7265 	.word	0x3e2d7265
1a005600:	70655220 	.word	0x70655220
1a005604:	3a74726f 	.word	0x3a74726f
1a005608:	766e4920 	.word	0x766e4920
1a00560c:	64696c61 	.word	0x64696c61
1a005610:	61724620 	.word	0x61724620
1a005614:	0a20656d 	.word	0x0a20656d
1a005618:	00000000 	.word	0x00000000
1a00561c:	76697244 	.word	0x76697244
1a005620:	3e2d7265 	.word	0x3e2d7265
1a005624:	70655220 	.word	0x70655220
1a005628:	3a74726f 	.word	0x3a74726f
1a00562c:	6c615620 	.word	0x6c615620
1a005630:	46206469 	.word	0x46206469
1a005634:	656d6172 	.word	0x656d6172
1a005638:	00000a20 	.word	0x00000a20
1a00563c:	76697244 	.word	0x76697244
1a005640:	3c207265 	.word	0x3c207265
1a005644:	6547202d 	.word	0x6547202d
1a005648:	74614474 	.word	0x74614474
1a00564c:	46203a61 	.word	0x46203a61
1a005650:	656c6961 	.word	0x656c6961
1a005654:	00004e64 	.word	0x00004e64
1a005658:	76697244 	.word	0x76697244
1a00565c:	3e2d7265 	.word	0x3e2d7265
1a005660:	72655320 	.word	0x72655320
1a005664:	3a726576 	.word	0x3a726576
1a005668:	206f4e20 	.word	0x206f4e20
1a00566c:	746e6573 	.word	0x746e6573
1a005670:	0000000a 	.word	0x0000000a
1a005674:	76697244 	.word	0x76697244
1a005678:	3c207265 	.word	0x3c207265
1a00567c:	6553202d 	.word	0x6553202d
1a005680:	72657672 	.word	0x72657672
1a005684:	6f4e203a 	.word	0x6f4e203a
1a005688:	63655220 	.word	0x63655220
1a00568c:	65766965 	.word	0x65766965
1a005690:	00000a64 	.word	0x00000a64
1a005694:	76697244 	.word	0x76697244
1a005698:	3c207265 	.word	0x3c207265
1a00569c:	6553202d 	.word	0x6553202d
1a0056a0:	72657672 	.word	0x72657672
1a0056a4:	6552203a 	.word	0x6552203a
1a0056a8:	76696563 	.word	0x76696563
1a0056ac:	000a6465 	.word	0x000a6465
1a0056b0:	76697264 	.word	0x76697264
1a0056b4:	00007265 	.word	0x00007265
1a0056b8:	76726573 	.word	0x76726573
1a0056bc:	00007265 	.word	0x00007265
1a0056c0:	6b736174 	.word	0x6b736174
1a0056c4:	00000031 	.word	0x00000031
1a0056c8:	6b736174 	.word	0x6b736174
1a0056cc:	ffff0032 	.word	0xffff0032
1a0056d0:	76726553 	.word	0x76726553
1a0056d4:	3c207265 	.word	0x3c207265
1a0056d8:	6972442d 	.word	0x6972442d
1a0056dc:	3a726576 	.word	0x3a726576
1a0056e0:	206f4e20 	.word	0x206f4e20
1a0056e4:	65636572 	.word	0x65636572
1a0056e8:	64657669 	.word	0x64657669
1a0056ec:	0000000a 	.word	0x0000000a
1a0056f0:	76726553 	.word	0x76726553
1a0056f4:	3e2d7265 	.word	0x3e2d7265
1a0056f8:	70655220 	.word	0x70655220
1a0056fc:	3a74726f 	.word	0x3a74726f
1a005700:	67734d20 	.word	0x67734d20
1a005704:	7a697320 	.word	0x7a697320
1a005708:	64252065 	.word	0x64252065
1a00570c:	0000000a 	.word	0x0000000a
1a005710:	76726553 	.word	0x76726553
1a005714:	3c207265 	.word	0x3c207265
1a005718:	6972442d 	.word	0x6972442d
1a00571c:	3a726576 	.word	0x3a726576
1a005720:	65636552 	.word	0x65636552
1a005724:	64657669 	.word	0x64657669
1a005728:	73656d20 	.word	0x73656d20
1a00572c:	65676173 	.word	0x65676173
1a005730:	3a736920 	.word	0x3a736920
1a005734:	7325200a 	.word	0x7325200a
1a005738:	0000000a 	.word	0x0000000a
1a00573c:	76726553 	.word	0x76726553
1a005740:	3e2d7265 	.word	0x3e2d7265
1a005744:	616c4620 	.word	0x616c4620
1a005748:	25202d67 	.word	0x25202d67
1a00574c:	00000a63 	.word	0x00000a63
1a005750:	76726553 	.word	0x76726553
1a005754:	3e2d7265 	.word	0x3e2d7265
1a005758:	73615420 	.word	0x73615420
1a00575c:	203a316b 	.word	0x203a316b
1a005760:	73206f4e 	.word	0x73206f4e
1a005764:	0a746e65 	.word	0x0a746e65
1a005768:	00000000 	.word	0x00000000
1a00576c:	76726553 	.word	0x76726553
1a005770:	3c207265 	.word	0x3c207265
1a005774:	6154202d 	.word	0x6154202d
1a005778:	3a316b73 	.word	0x3a316b73
1a00577c:	206f4e20 	.word	0x206f4e20
1a005780:	65636572 	.word	0x65636572
1a005784:	64657669 	.word	0x64657669
1a005788:	0000000a 	.word	0x0000000a
1a00578c:	76726553 	.word	0x76726553
1a005790:	3c207265 	.word	0x3c207265
1a005794:	7361542d 	.word	0x7361542d
1a005798:	203a316b 	.word	0x203a316b
1a00579c:	65636552 	.word	0x65636552
1a0057a0:	64657669 	.word	0x64657669
1a0057a4:	7325202d 	.word	0x7325202d
1a0057a8:	0000000a 	.word	0x0000000a
1a0057ac:	76726553 	.word	0x76726553
1a0057b0:	3e2d7265 	.word	0x3e2d7265
1a0057b4:	70655220 	.word	0x70655220
1a0057b8:	3a74726f 	.word	0x3a74726f
1a0057bc:	616c4620 	.word	0x616c4620
1a0057c0:	25202067 	.word	0x25202067
1a0057c4:	00000a63 	.word	0x00000a63
1a0057c8:	76726553 	.word	0x76726553
1a0057cc:	3e2d7265 	.word	0x3e2d7265
1a0057d0:	73615420 	.word	0x73615420
1a0057d4:	203a326b 	.word	0x203a326b
1a0057d8:	73206f4e 	.word	0x73206f4e
1a0057dc:	0a746e65 	.word	0x0a746e65
1a0057e0:	00000000 	.word	0x00000000
1a0057e4:	76726553 	.word	0x76726553
1a0057e8:	3c207265 	.word	0x3c207265
1a0057ec:	6154202d 	.word	0x6154202d
1a0057f0:	3a326b73 	.word	0x3a326b73
1a0057f4:	206f4e20 	.word	0x206f4e20
1a0057f8:	65636572 	.word	0x65636572
1a0057fc:	64657669 	.word	0x64657669
1a005800:	0000000a 	.word	0x0000000a
1a005804:	76726553 	.word	0x76726553
1a005808:	2d207265 	.word	0x2d207265
1a00580c:	7244203e 	.word	0x7244203e
1a005810:	72657669 	.word	0x72657669
1a005814:	6f4e203a 	.word	0x6f4e203a
1a005818:	6e657320 	.word	0x6e657320
1a00581c:	00000a74 	.word	0x00000a74
1a005820:	76726553 	.word	0x76726553
1a005824:	2d207265 	.word	0x2d207265
1a005828:	7244203e 	.word	0x7244203e
1a00582c:	72657669 	.word	0x72657669
1a005830:	6553203a 	.word	0x6553203a
1a005834:	6d20746e 	.word	0x6d20746e
1a005838:	0a3a6773 	.word	0x0a3a6773
1a00583c:	000a7325 	.word	0x000a7325
1a005840:	76726553 	.word	0x76726553
1a005844:	2d207265 	.word	0x2d207265
1a005848:	6552203e 	.word	0x6552203e
1a00584c:	74726f70 	.word	0x74726f70
1a005850:	6f54203a 	.word	0x6f54203a
1a005854:	206c6174 	.word	0x206c6174
1a005858:	69617661 	.word	0x69617661
1a00585c:	6c62616c 	.word	0x6c62616c
1a005860:	74732065 	.word	0x74732065
1a005864:	206b6361 	.word	0x206b6361
1a005868:	657a6973 	.word	0x657a6973
1a00586c:	20736920 	.word	0x20736920
1a005870:	000a6425 	.word	0x000a6425
1a005874:	76726553 	.word	0x76726553
1a005878:	2d207265 	.word	0x2d207265
1a00587c:	6552203e 	.word	0x6552203e
1a005880:	74726f70 	.word	0x74726f70
1a005884:	6f54203a 	.word	0x6f54203a
1a005888:	206c6174 	.word	0x206c6174
1a00588c:	69617661 	.word	0x69617661
1a005890:	6c62616c 	.word	0x6c62616c
1a005894:	65482065 	.word	0x65482065
1a005898:	73207061 	.word	0x73207061
1a00589c:	20657a69 	.word	0x20657a69
1a0058a0:	25207369 	.word	0x25207369
1a0058a4:	00000a64 	.word	0x00000a64
1a0058a8:	76726553 	.word	0x76726553
1a0058ac:	2d207265 	.word	0x2d207265
1a0058b0:	6552203e 	.word	0x6552203e
1a0058b4:	74726f70 	.word	0x74726f70
1a0058b8:	6f4e203a 	.word	0x6f4e203a
1a0058bc:	616c4620 	.word	0x616c4620
1a0058c0:	000a2067 	.word	0x000a2067
1a0058c4:	73615420 	.word	0x73615420
1a0058c8:	3c20316b 	.word	0x3c20316b
1a0058cc:	6553202d 	.word	0x6553202d
1a0058d0:	72657672 	.word	0x72657672
1a0058d4:	4e203a20 	.word	0x4e203a20
1a0058d8:	6572206f 	.word	0x6572206f
1a0058dc:	76696563 	.word	0x76696563
1a0058e0:	000a6465 	.word	0x000a6465
1a0058e4:	6b736154 	.word	0x6b736154
1a0058e8:	3e2d2031 	.word	0x3e2d2031
1a0058ec:	70655220 	.word	0x70655220
1a0058f0:	3a74726f 	.word	0x3a74726f
1a0058f4:	206f4e20 	.word	0x206f4e20
1a0058f8:	65776f6c 	.word	0x65776f6c
1a0058fc:	61632072 	.word	0x61632072
1a005900:	000a6573 	.word	0x000a6573
1a005904:	6b736154 	.word	0x6b736154
1a005908:	3e2d2031 	.word	0x3e2d2031
1a00590c:	72655320 	.word	0x72655320
1a005910:	3a726576 	.word	0x3a726576
1a005914:	206f4e20 	.word	0x206f4e20
1a005918:	0a79656b 	.word	0x0a79656b
1a00591c:	00000000 	.word	0x00000000
1a005920:	6b736154 	.word	0x6b736154
1a005924:	203e2d31 	.word	0x203e2d31
1a005928:	76726553 	.word	0x76726553
1a00592c:	203a7265 	.word	0x203a7265
1a005930:	73206f4e 	.word	0x73206f4e
1a005934:	20746e65 	.word	0x20746e65
1a005938:	ffff000a 	.word	0xffff000a
1a00593c:	73615420 	.word	0x73615420
1a005940:	3c20326b 	.word	0x3c20326b
1a005944:	6553202d 	.word	0x6553202d
1a005948:	72657672 	.word	0x72657672
1a00594c:	4e203a20 	.word	0x4e203a20
1a005950:	6572206f 	.word	0x6572206f
1a005954:	76696563 	.word	0x76696563
1a005958:	000a6465 	.word	0x000a6465
1a00595c:	6b736154 	.word	0x6b736154
1a005960:	3e2d2032 	.word	0x3e2d2032
1a005964:	70655220 	.word	0x70655220
1a005968:	3a74726f 	.word	0x3a74726f
1a00596c:	206f4e20 	.word	0x206f4e20
1a005970:	65776f6c 	.word	0x65776f6c
1a005974:	61632072 	.word	0x61632072
1a005978:	000a6573 	.word	0x000a6573
1a00597c:	6b736154 	.word	0x6b736154
1a005980:	3e2d2032 	.word	0x3e2d2032
1a005984:	72655320 	.word	0x72655320
1a005988:	3a726576 	.word	0x3a726576
1a00598c:	206f4e20 	.word	0x206f4e20
1a005990:	0a79656b 	.word	0x0a79656b
1a005994:	00000000 	.word	0x00000000
1a005998:	6b736154 	.word	0x6b736154
1a00599c:	203e2d32 	.word	0x203e2d32
1a0059a0:	76726553 	.word	0x76726553
1a0059a4:	203a7265 	.word	0x203a7265
1a0059a8:	73206f4e 	.word	0x73206f4e
1a0059ac:	20746e65 	.word	0x20746e65
1a0059b0:	ffff000a 	.word	0xffff000a
1a0059b4:	454c4449 	.word	0x454c4449
1a0059b8:	ffffff00 	.word	0xffffff00
1a0059bc:	51726d54 	.word	0x51726d54
1a0059c0:	ffffff00 	.word	0xffffff00
1a0059c4:	20726d54 	.word	0x20726d54
1a0059c8:	00637653 	.word	0x00637653

1a0059cc <ExtRateIn>:
1a0059cc:	00000000                                ....

1a0059d0 <GpioButtons>:
1a0059d0:	08000400 09010900                       ........

1a0059d8 <GpioLeds>:
1a0059d8:	01050005 0e000205 0c010b01              ............

1a0059e4 <GpioPorts>:
1a0059e4:	03030003 0f050403 05031005 07030603     ................
1a0059f4:	ffff0802                                ....

1a0059f8 <OscRateIn>:
1a0059f8:	00b71b00                                ....

1a0059fc <InitClkStates>:
1a0059fc:	01010f01                                ....

1a005a00 <pinmuxing>:
1a005a00:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a005a10:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a005a20:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a005a30:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a005a40:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a005a50:	00d50301 00d50401 00160107 00560207     ..............V.
1a005a60:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a005a70:	00570206                                ..W.

1a005a74 <UART_BClock>:
1a005a74:	01a201c2 01620182                       ......b.

1a005a7c <UART_PClock>:
1a005a7c:	00820081 00a200a1 08040201 0f0f0f03     ................
1a005a8c:	ffff00ff                                ....

1a005a90 <periph_to_base>:
1a005a90:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a005aa0:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a005ab0:	000100e0 01000100 01200003 00060120     .......... . ...
1a005ac0:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005ad0:	01820013 00120182 01a201a2 01c20011     ................
1a005ae0:	001001c2 01e201e2 0202000f 000e0202     ................
1a005af0:	02220222 0223000d 001c0223              "."...#.#...

1a005afc <InitClkStates>:
1a005afc:	00010100 00010909 0001090a 01010701     ................
1a005b0c:	00010902 00010906 0101090c 0001090d     ................
1a005b1c:	0001090e 0001090f 00010910 00010911     ................
1a005b2c:	00010912 00010913 00011114 00011119     ................
1a005b3c:	0001111a 0001111b 6b726f77 2e676e69     ........working.
1a005b4c:	ffff002e                                ....

1a005b50 <lpcUarts>:
1a005b50:	40081000 06020406 00180205 40081000     ...@...........@
1a005b60:	09070509 00180706 40082000 00000000     ......... .@....
1a005b70:	00190000 400c1000 07060107 001a0602     .......@........
1a005b80:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a005b90:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a005ba0:	0072656d                                mer.

1a005ba4 <gpioPinsInit>:
1a005ba4:	02000104 00050701 05010d03 04080100     ................
1a005bb4:	02020002 02000304 00000403 04070002     ................
1a005bc4:	030c0300 09050402 05040103 04030208     ................
1a005bd4:	04020305 06040504 0802000c 03000b06     ................
1a005be4:	00090607 07060503 060f0504 03030004     ................
1a005bf4:	02000404 00050404 06040502 04060200     ................
1a005c04:	0c050408 05040a04 0003010e 14010a00     ................
1a005c14:	010f0000 0d000012 00001101 0010010c     ................
1a005c24:	07070300 000f0300 01000001 00000000     ................
1a005c34:	000a0600 08060603 06100504 04030005     ................
1a005c44:	03000106 04090400 04010d05 010b0000     ................
1a005c54:	0200000f 00000001 00010104 02010800     ................
1a005c64:	01090000 09010006 05040002 04010200     ................
1a005c74:	02020105 02020504 0e00000a 01000b02     ................
1a005c84:	000c020b 00040c01 04000200 01020001     ................
1a005c94:	02000204 00030402 03070302 070b0300     ................
1a005ca4:	0c030004 03000507 0006070d 01020e03     ................
1a005cb4:	04010504 06020006 02000504 00040405     ................
1a005cc4:	08040402 040c0504 0d050409 05040a04     ................
1a005cd4:	0005010e ffff0801                       ........

1a005cdc <ultrasonicSensorsIrqMap>:
1a005cdc:	ff020100                                ....

1a005ce0 <__sf_fake_stderr>:
	...

1a005d00 <__sf_fake_stdin>:
	...

1a005d20 <__sf_fake_stdout>:
	...

1a005d40 <_global_impure_ptr>:
1a005d40:	10000138 4f500043 00584953 2d23002e     8...C.POSIX...#-
1a005d50:	00202b30 004c6c68 45676665 30004746     0+ .hlL.efgEFG.0
1a005d60:	34333231 38373635 43424139 00464544     123456789ABCDEF.
1a005d70:	33323130 37363534 62613938 66656463     0123456789abcdef
	...

1a005d81 <_ctype_>:
1a005d81:	20202000 20202020 28282020 20282828     .         ((((( 
1a005d91:	20202020 20202020 20202020 20202020                     
1a005da1:	10108820 10101010 10101010 10101010      ...............
1a005db1:	04040410 04040404 10040404 10101010     ................
1a005dc1:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a005dd1:	01010101 01010101 01010101 10101010     ................
1a005de1:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a005df1:	02020202 02020202 02020202 10101010     ................
1a005e01:	00000020 00000000 00000000 00000000      ...............
	...
1a005e81:	00ffff00                                         ...
